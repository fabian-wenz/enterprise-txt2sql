[
    {
        "sql": "WITH MailingListStats AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ed ON mld.MOIRA_LIST_MEMBER = ed.KRB_NAME WHERE ed.OFFICE_LOCATION LIKE '24%' GROUP BY ml.MOIRA_LIST_NAME ), Largest AS ( SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank FROM MailingListStats ) SELECT MAX(CASE WHEN Size_Rank = 1 THEN MOIRA_LIST_NAME END) AS Largest_Mailing_List, MAX(CASE WHEN Size_Rank = 1 THEN Total_Members END) AS Member_Count FROM Largest;",
        "question": "What is the name of the largest mailing list and how many members does it have? The largest mailing list is \"orange-rabbit\" with 29 members.",
    },
    {
        "sql": "WITH FilteredMoiraLists AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'beacon-date-date' ), FilteredMoiraListDetails AS ( SELECT mld.MOIRA_LIST_MEMBER, mld.MOIRA_LIST_KEY FROM MOIRA_LIST_DETAIL mld JOIN FilteredMoiraLists fml ON mld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY ), MailingListSizes AS ( SELECT fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME, COUNT(fmld.MOIRA_LIST_MEMBER) AS List_Size FROM FilteredMoiraLists fml JOIN FilteredMoiraListDetails fmld ON fml.MOIRA_LIST_KEY = fmld.MOIRA_LIST_KEY GROUP BY fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME ) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, MLS.List_Size AS List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredMoiraListDetails fmld ON UPPER(se.KRB_NAME) = UPPER(fmld.MOIRA_LIST_MEMBER) JOIN FilteredMoiraLists fml ON fmld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON fml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'H%';",
        "question": "What are the names of students whose last names start with 'H', their respective department phone numbers, and the size of the mailing list they belong to?",
    },
    {
        "question": "For the email list with name 'date-destiny', list the name of the list, department name, the number of students from the Management department, and the percentage of students who are from the Management department, rounded to two decimal places.",
        "sql": "WITH FilteredList AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'date-destiny' ), FilteredListDetails AS ( SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL mld JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY ) SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) AS MANAGEMENT_STUDENT_COUNT, ROUND( COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) * 100.0 / COUNT(fld.MOIRA_LIST_MEMBER), 2 ) AS MANAGEMENT_STUDENT_PERCENTAGE FROM MIT_STUDENT_DIRECTORY msd JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredListDetails fld ON UPPER(se.KRB_NAME) = UPPER(fld.MOIRA_LIST_MEMBER) JOIN FilteredList ml ON fld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE GROUP BY ml.MOIRA_LIST_NAME;",
    },
    {
        "sql": "SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE, COUNT(a.BUILDING_ADDRESS_KEY) AS ADDRESS_COUNT, AVG(b.EXT_GROSS_AREA) AS AVG_GROSS_AREA, COUNT(r.FAC_ROOM_KEY) AS TOTAL_ROOMS FROM FAC_BUILDING b JOIN FAC_BUILDING_ADDRESS a ON b.FAC_BUILDING_KEY = a.BUILDING_KEY JOIN FAC_ROOMS r ON b.FAC_BUILDING_KEY = r.BUILDING_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE ORDER BY b.BUILDING_NAME;",
        "question": "What are the building details such as name, number, date built, and type along with the count of addresses, average gross area, and total rooms for each building? Can you list the buildings in ascending order by name?",
   },
    {
        "sql": "WITH SubjectsByTerm AS ( SELECT cc.SUBJECT_ID, cc.SUBJECT_TITLE, cc.TOTAL_UNITS, cc.DEPARTMENT_NAME, CASE WHEN cc.TERM_CODE LIKE '%FA' THEN 'Fall' WHEN cc.TERM_CODE LIKE '%SP' THEN 'Spring' END AS offered_term, at.TERM_DESCRIPTION AS term_description, sd.SCHOOL_NAME, scd.COURSE_LEVEL, cc.FALL_INSTRUCTORS, cc.SPRING_INSTRUCTORS FROM COURSE_CATALOG_SUBJECT_OFFERED cc JOIN ACADEMIC_TERMS at ON cc.TERM_CODE = at.TERM_CODE LEFT JOIN SIS_DEPARTMENT sd ON cc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE LEFT JOIN SIS_COURSE_DESCRIPTION scd ON cc.SUBJECT_CODE = scd.COURSE WHERE cc.IS_OFFERED_THIS_YEAR = 'Y' AND (cc.TERM_CODE LIKE '%FA' OR cc.TERM_CODE LIKE '%SP') ), SubjectsAggregated AS ( SELECT SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors FROM SubjectsByTerm GROUP BY SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description ) SELECT DEPARTMENT_NAME, SCHOOL_NAME, SUBJECT_ID, SUBJECT_TITLE, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, num_fall_instructors, num_spring_instructors FROM SubjectsAggregated ORDER BY DEPARTMENT_NAME, SUBJECT_ID, SUBJECT_TITLE, offered_term;",
        "question": "What are the department names, school names, subject IDs, and subject titles of courses offered in the Fall or Spring terms? Include the course level, total units, term description, and the number of instructors for both Fall and Spring terms.",
   },
    {
        "sql": "SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME, COUNT(DISTINCT sad.DEPARTMENT_PHONE_NUMBER) AS Total_Phone_Numbers, CASE WHEN SUM(CASE WHEN scd.COURSE_LEVEL = 'U' THEN 1 ELSE 0 END) >= SUM(CASE WHEN scd.COURSE_LEVEL = 'G' THEN 1 ELSE 0 END) THEN 'U' ELSE 'G' END AS Most_Common_Course_Level FROM SIS_ADMIN_DEPARTMENT sad JOIN SIS_DEPARTMENT sd ON sad.SIS_ADMIN_DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME;",
        "question": "What are the school code, school name, department code, admin department name, total unique phone numbers, and the most common course level among departments based on the SIS admin department, department, course description, and subject code tables?",

    },
    {
        "sql": "SELECT ata.ACADEMIC_YEAR, ed.FULL_NAME, COUNT(distinct so.COURSE_NUMBER) AS Total_Courses FROM SUBJECT_OFFERED so JOIN ACADEMIC_TERMS_ALL ata ON so.TERM_CODE = ata.TERM_CODE JOIN EMPLOYEE_DIRECTORY ed ON so.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID WHERE ata.ACADEMIC_YEAR = 2022 GROUP BY ata.ACADEMIC_YEAR, ed.FULL_NAME;",
        "question": "What is the total number of courses taught by each faculty member for the academic year 2022? Display the academic year, full name of the faculty member, and the total number of distinct course numbers they are responsible for teaching.",
    },
    {
        "sql": "SELECT at.TERM_DESCRIPTION, at.IS_CURRENT_TERM, COUNT(DISTINCT tso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT tm.ISBN) AS Total_Materials, MIN(tso.NUM_ENROLLED_STUDENTS) AS Min_Enrolled_Students, MAX(tso.NUM_ENROLLED_STUDENTS) AS Max_Enrolled_Students, COUNT(DISTINCT OFFER_SCHOOL_NAME) AS Total_Num_Schools, SUM(td.RECORD_COUNT) AS Total_Records FROM ACADEMIC_TERMS_ALL at LEFT OUTER JOIN TIP_SUBJECT_OFFERED tso ON at.TERM_CODE = tso.TERM_CODE JOIN TIP_DETAIL td ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM;",
        "question": "What are the total number of courses, materials, schools, and records for each academic term? Can you provide the term description, current term status, and the range of enrolled students for each term in the output?",
    },
    {
        "sql": "WITH FinancialAidDetails AS ( SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.ACADEMIC_YEAR, at.FINANCIAL_AID_YEAR, td.START_DATE AS Term_Start_Date, td.END_DATE AS Term_End_Date, tm.FISCAL_PERIOD, tm.FISCAL_YEAR, tq.FY_QUARTER_CODE, tp.TERM_PARAMETER AS Dept_Term_Param FROM ACADEMIC_TERMS at JOIN TIME_DAY td ON at.TERM_START_DATE = td.CALENDAR_DATE JOIN TIME_MONTH tm ON td.FISCAL_PERIOD = tm.FISCAL_PERIOD AND td.FISCAL_YEAR = tm.FISCAL_YEAR JOIN TIME_QUARTER tq ON tm.FISCAL_YEAR = tq.FISCAL_YEAR AND tm.FY_QUARTER_CODE = tq.FY_QUARTER_CODE LEFT JOIN ACADEMIC_TERM_PARAMETER tp ON at.TERM_CODE = tp.TERM_CODE WHERE at.FINANCIAL_AID_YEAR IS NOT NULL ) SELECT FINANCIAL_AID_YEAR, ACADEMIC_YEAR, COUNT(DISTINCT FISCAL_PERIOD) AS Total_Fiscal_Periods, COUNT(DISTINCT FY_QUARTER_CODE) AS Total_Quarters, MIN(Term_Start_Date) AS First_Term_Start_Date, MAX(Term_End_Date) AS Last_Term_End_Date, COUNT(DISTINCT Dept_Term_Param) AS Distinct_Term_Params FROM FinancialAidDetails GROUP BY FINANCIAL_AID_YEAR, ACADEMIC_YEAR ORDER BY FINANCIAL_AID_YEAR DESC, ACADEMIC_YEAR ASC;",
        "question": "What are the financial aid details for each academic year, including the total number of fiscal periods, quarters, and distinct term parameters? Can you provide the financial aid year, academic year, the total fiscal periods, the total quarters, the first term start date, the last term end date, and the distinct term parameters for each academic year?",
  },
    {
        "sql": "SELECT DISTINCT d.FCLT_BUILDING_KEY, e.BUILDING_STREET_ADDRESS, d.CITY, d.STATE, d.POSTAL_CODE FROM FCLT_BUILDING_ADDRESS d JOIN FCLT_ROOMS a ON a.FCLT_BUILDING_KEY = d.FCLT_BUILDING_KEY JOIN FCLT_ORG_DLC_KEY b ON a.FCLT_ORGANIZATION_KEY = b.FCLT_ORGANIZATION_KEY JOIN MASTER_DEPT_HIERARCHY c ON b.DLC_KEY = c.DLC_KEY JOIN BUILDINGS e ON e.BUILDING_KEY = d.FCLT_BUILDING_KEY WHERE lower(c.DLC_NAME) = lower('History') AND d.ADDRESS_PURPOSE = 'STREET';",
        "question": "What are the unique facility building keys, building street addresses, cities, states, and postal codes for buildings with the department name 'History' and address purpose 'STREET'? The output includes the facility building key, street address, city, state, and postal code for the relevant building.",
   },
    {
        "sql": "SELECT tso.OFFER_DEPT_NAME, COUNT(distinct tso.SUBJECT_ID) AS Total_Subjects, SUM(tso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students, MIN(tm.RENTAL_NEW_PRICE) AS Min_Rental_New_Price, MAX(tm.RENTAL_NEW_PRICE) AS Max_Rental_New_Price FROM TIP_SUBJECT_OFFERED tso JOIN TIP_DETAIL td ON tso.TIP_SUBJECT_OFFERED_KEY = td.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY GROUP BY tso.OFFER_DEPT_NAME;",
        "question": "What are the total number of subjects offered, the total number of enrolled students, and the range of rental prices for each department that offers subjects? Can you provide the department name, the count of unique subjects, the sum of enrolled students, the minimum rental price, and the maximum rental price for each department?",
    },
    {
        "sql": "SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN ff.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/ff.ASSIGNABLE_AREA END AS PERC_OF_ASG_FLOOR, CASE WHEN fb.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/fb.ASSIGNABLE_AREA END AS PERC_OF_ASG_BUILDING FROM FAC_ROOMS fr JOIN FAC_BUILDING fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;",
        "question": "What are the room names, building names, floors, organization names, HR department names, percentage of assignable area on each floor, and percentage of assignable area in each building?",
   },
    {
        "sql": "SELECT DISTINCT a.activity_title, d.session_location, c.term_start_date, b.person_name AS Leader FROM iap_subject_detail a JOIN iap_subject_person b ON a.iap_subject_person_key = b.iap_subject_person_key JOIN academic_terms_all c ON c.term_code = a.term_code JOIN iap_subject_session d ON a.iap_subject_session_key = d.iap_subject_session_key WHERE b.person_role = 'Activity leader' ORDER BY term_start_date ASC;",
        "question": "What are the activity titles, session locations, start dates of terms, and leaders of activities where the person's role is an activity leader? The results are sorted by the start date of the terms.",
    },
    {
        "sql": "SELECT mlo.OWNER, COUNT(DISTINCT ml.MOIRA_LIST_KEY) AS Total_Lists, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE mlo.MOIRA_LIST_OWNER_KEY = 'LIST69.377-keeper-xenon' GROUP BY mlo.OWNER;",
        "question": "What is the total number of lists and members associated with the owner '69.377-keeper-xenon' in the Moira system?",
    },
    {
        "sql": "SELECT DISTINCT ml.MOIRA_LIST_NAME, COUNT(ccso.SUBJECT_ID) AS course_count, COUNT(DISTINCT ccso.RESPONSIBLE_FACULTY_NAME) AS distinct_faculty_count FROM COURSE_CATALOG_SUBJECT_OFFERED CCSO JOIN EMPLOYEE_DIRECTORY E ON ccso.RESPONSIBLE_FACULTY_MIT_ID = E.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON upper(e.KRB_NAME_UPPERCASE) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ccso.RESPONSIBLE_FACULTY_NAME LIKE 'Y%' GROUP BY ML.MOIRA_LIST_NAME",
        "question": "What are the names of the Moira lists along with the count of courses offered and the number of distinct faculty members responsible for courses starting with 'Y'? The output includes the Moira list name, the total number of courses offered, and the count of unique faculty members associated with each Moira list.",
    }
