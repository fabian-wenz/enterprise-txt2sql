[
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Among the mailing lists subscribed by people with physical offices in building 24, provide the name of the most subscribed mailing list and the total number of subscribers.",
    "gold-sql": "WITH MailingListStats AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ed ON mld.MOIRA_LIST_MEMBER = ed.KRB_NAME WHERE ed.OFFICE_LOCATION LIKE '24%' GROUP BY ml.MOIRA_LIST_NAME ), Largest AS ( SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank FROM MailingListStats ) SELECT MAX(CASE WHEN Size_Rank = 1 THEN MOIRA_LIST_NAME END) AS Largest_Mailing_List, MAX(CASE WHEN Size_Rank = 1 THEN Total_Members END) AS Member_Count FROM Largest;",
    "options": "",
    "oracle_sql": "WITH MailingListStats AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ed ON mld.MOIRA_LIST_MEMBER = ed.KRB_NAME WHERE ed.OFFICE_LOCATION LIKE '24%' GROUP BY ml.MOIRA_LIST_NAME ), Largest AS ( SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank FROM MailingListStats ) SELECT MAX(CASE WHEN Size_Rank = 1 THEN MOIRA_LIST_NAME END) AS Largest_Mailing_List, MAX(CASE WHEN Size_Rank = 1 THEN Total_Members END) AS Member_Count FROM Largest;",
    "question": "",
    "sql": "",
    "question_basic": "What is the name of the largest mailing list and how many members does it have? The largest mailing list is \"orange-rabbit\" with 29 members."
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For students with last names starting with H who are subscribed to mailing list 'beacon-date-date', list the names of the students, the phone numbers of departments they belong to, and the size of the mailing list 'beacon-date-date' that they are subscribed to.",
    "gold-sql": "WITH FilteredMoiraLists AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'beacon-date-date' ), FilteredMoiraListDetails AS ( SELECT mld.MOIRA_LIST_MEMBER, mld.MOIRA_LIST_KEY FROM MOIRA_LIST_DETAIL mld JOIN FilteredMoiraLists fml ON mld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY ), MailingListSizes AS ( SELECT fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME, COUNT(fmld.MOIRA_LIST_MEMBER) AS List_Size FROM FilteredMoiraLists fml JOIN FilteredMoiraListDetails fmld ON fml.MOIRA_LIST_KEY = fmld.MOIRA_LIST_KEY GROUP BY fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME ) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, MLS.List_Size AS List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredMoiraListDetails fmld ON UPPER(se.KRB_NAME) = UPPER(fmld.MOIRA_LIST_MEMBER) JOIN FilteredMoiraLists fml ON fmld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON fml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'H%';",
    "options": "",
    "oracle_sql": "WITH FilteredMoiraLists AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'beacon-date-date' ), FilteredMoiraListDetails AS ( SELECT mld.MOIRA_LIST_MEMBER, mld.MOIRA_LIST_KEY FROM MOIRA_LIST_DETAIL mld JOIN FilteredMoiraLists fml ON mld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY ), MailingListSizes AS ( SELECT fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME, COUNT(fmld.MOIRA_LIST_MEMBER) AS List_Size FROM FilteredMoiraLists fml JOIN FilteredMoiraListDetails fmld ON fml.MOIRA_LIST_KEY = fmld.MOIRA_LIST_KEY GROUP BY fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME ) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, MLS.List_Size AS List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredMoiraListDetails fmld ON UPPER(se.KRB_NAME) = UPPER(fmld.MOIRA_LIST_MEMBER) JOIN FilteredMoiraLists fml ON fmld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON fml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'H%';",
    "question": "",
    "sql": "",
    "question_basic": "What is the name and department phone number of students whose last names start with 'H', along with the size of the mailing list they belong to?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the email list with name 'date-destiny', list the name of the list, department name, the number of students from the Management department, and the percentage of students who are from the Management department, rounded to two decimal places.",
    "gold-sql": "WITH FilteredList AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'date-destiny' ), FilteredListDetails AS ( SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL mld JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY ) SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) AS MANAGEMENT_STUDENT_COUNT, ROUND( COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) * 100.0 / COUNT(fld.MOIRA_LIST_MEMBER), 2 ) AS MANAGEMENT_STUDENT_PERCENTAGE FROM MIT_STUDENT_DIRECTORY msd JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredListDetails fld ON UPPER(se.KRB_NAME) = UPPER(fld.MOIRA_LIST_MEMBER) JOIN FilteredList ml ON fld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE GROUP BY ml.MOIRA_LIST_NAME;",
    "options": "",
    "oracle_sql": "WITH FilteredList AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'date-destiny' ), FilteredListDetails AS ( SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL mld JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY ) SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) AS MANAGEMENT_STUDENT_COUNT, ROUND( COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) * 100.0 / COUNT(fld.MOIRA_LIST_MEMBER), 2 ) AS MANAGEMENT_STUDENT_PERCENTAGE FROM MIT_STUDENT_DIRECTORY msd JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredListDetails fld ON UPPER(se.KRB_NAME) = UPPER(fld.MOIRA_LIST_MEMBER) JOIN FilteredList ml ON fld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE GROUP BY ml.MOIRA_LIST_NAME;",
    "question": "",
    "sql": "",
    "question_basic": "What is the count and percentage of students in the 'date-destiny' list who belong to the 'Management' department?"
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "List the name, number, construction date, and type of all buildings, along with the count of addresses associated with each building, the average gross area of the buildings, and the total number of rooms in each building. Sort the results by building name.",
    "gold-sql": "SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE, COUNT(a.BUILDING_ADDRESS_KEY) AS ADDRESS_COUNT, AVG(b.EXT_GROSS_AREA) AS AVG_GROSS_AREA, COUNT(r.FAC_ROOM_KEY) AS TOTAL_ROOMS FROM FAC_BUILDING b JOIN FAC_BUILDING_ADDRESS a ON b.FAC_BUILDING_KEY = a.BUILDING_KEY JOIN FAC_ROOMS r ON b.FAC_BUILDING_KEY = r.BUILDING_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE ORDER BY b.BUILDING_NAME;",
    "options": "",
    "oracle_sql": "SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE, COUNT(a.BUILDING_ADDRESS_KEY) AS ADDRESS_COUNT, AVG(b.EXT_GROSS_AREA) AS AVG_GROSS_AREA, COUNT(r.FAC_ROOM_KEY) AS TOTAL_ROOMS FROM FAC_BUILDING b JOIN FAC_BUILDING_ADDRESS a ON b.FAC_BUILDING_KEY = a.BUILDING_KEY JOIN FAC_ROOMS r ON b.FAC_BUILDING_KEY = r.BUILDING_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE ORDER BY b.BUILDING_NAME;",
    "question": "",
    "sql": "",
    "question_basic": "What are the building details, including the name, number, date built, and type, along with the count of addresses associated with each building, the average gross area, and the total number of rooms in each building? Which building has the highest number of rooms, and which building has the smallest average gross area?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For subjects offered this year in either the Fall or Spring term, list its department name, school name, subject ID, subject title, course level, total units, the term it is offered ('Spring' for Spring term and 'Fall' for Fall term), term description, the number of distinct instructors teaching in the Fall, and the number of distinct instructors teaching in the Spring.",
    "gold-sql": "WITH SubjectsByTerm AS ( SELECT cc.SUBJECT_ID, cc.SUBJECT_TITLE, cc.TOTAL_UNITS, cc.DEPARTMENT_NAME, CASE WHEN cc.TERM_CODE LIKE '%FA' THEN 'Fall' WHEN cc.TERM_CODE LIKE '%SP' THEN 'Spring' END AS offered_term, at.TERM_DESCRIPTION AS term_description, sd.SCHOOL_NAME, scd.COURSE_LEVEL, cc.FALL_INSTRUCTORS, cc.SPRING_INSTRUCTORS FROM COURSE_CATALOG_SUBJECT_OFFERED cc JOIN ACADEMIC_TERMS at ON cc.TERM_CODE = at.TERM_CODE LEFT JOIN SIS_DEPARTMENT sd ON cc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE LEFT JOIN SIS_COURSE_DESCRIPTION scd ON cc.SUBJECT_CODE = scd.COURSE WHERE cc.IS_OFFERED_THIS_YEAR = 'Y' AND (cc.TERM_CODE LIKE '%FA' OR cc.TERM_CODE LIKE '%SP') ), SubjectsAggregated AS ( SELECT SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors FROM SubjectsByTerm GROUP BY SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description ) SELECT DEPARTMENT_NAME, SCHOOL_NAME, SUBJECT_ID, SUBJECT_TITLE, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, num_fall_instructors, num_spring_instructors FROM SubjectsAggregated ORDER BY DEPARTMENT_NAME, SUBJECT_ID, SUBJECT_TITLE, offered_term;",
    "options": "",
    "oracle_sql": "WITH SubjectsByTerm AS ( SELECT cc.SUBJECT_ID, cc.SUBJECT_TITLE, cc.TOTAL_UNITS, cc.DEPARTMENT_NAME, CASE WHEN cc.TERM_CODE LIKE '%FA' THEN 'Fall' WHEN cc.TERM_CODE LIKE '%SP' THEN 'Spring' END AS offered_term, at.TERM_DESCRIPTION AS term_description, sd.SCHOOL_NAME, scd.COURSE_LEVEL, cc.FALL_INSTRUCTORS, cc.SPRING_INSTRUCTORS FROM COURSE_CATALOG_SUBJECT_OFFERED cc JOIN ACADEMIC_TERMS at ON cc.TERM_CODE = at.TERM_CODE LEFT JOIN SIS_DEPARTMENT sd ON cc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE LEFT JOIN SIS_COURSE_DESCRIPTION scd ON cc.SUBJECT_CODE = scd.COURSE WHERE cc.IS_OFFERED_THIS_YEAR = 'Y' AND (cc.TERM_CODE LIKE '%FA' OR cc.TERM_CODE LIKE '%SP') ), SubjectsAggregated AS ( SELECT SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors FROM SubjectsByTerm GROUP BY SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description ) SELECT DEPARTMENT_NAME, SCHOOL_NAME, SUBJECT_ID, SUBJECT_TITLE, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, num_fall_instructors, num_spring_instructors FROM SubjectsAggregated ORDER BY DEPARTMENT_NAME, SUBJECT_ID, SUBJECT_TITLE, offered_term;",
    "question": "",
    "sql": "",
    "question_basic": "What are the different courses offered by the Aeronautics and Astronautics department in the Engineering school? How many instructors taught the course \"Introduction to Aerospace and Design\" in the Spring term for the years 2009-2014?"
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What are the different schools and departments that offer SIS courses? List their school code, school name, department code, department name, the total number of phone numbers, and the most common course level.",
    "gold-sql": "SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME, COUNT(DISTINCT sad.DEPARTMENT_PHONE_NUMBER) AS Total_Phone_Numbers, CASE WHEN SUM(CASE WHEN scd.COURSE_LEVEL = 'U' THEN 1 ELSE 0 END) >= SUM(CASE WHEN scd.COURSE_LEVEL = 'G' THEN 1 ELSE 0 END) THEN 'U' ELSE 'G' END AS Most_Common_Course_Level FROM SIS_ADMIN_DEPARTMENT sad JOIN SIS_DEPARTMENT sd ON sad.SIS_ADMIN_DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME;",
    "options": [
      "What are the school code, school name, department code, admin department name, total unique phone numbers, and the most common course level among departments based on the SIS admin department, department, course description, and subject code tables?",
      "Retrieve the school code, school name, department code, admin department name, total count of distinct phone numbers, and the predominant course level (undergraduate or graduate) across departments by joining the SIS admin department, department, course description, and subject code tables.",
      "Show the school code, school name, department code, admin department name, total unique phone numbers, and the prevalent course level (undergraduate or graduate) within departments from the SIS admin department, department, course description, and subject code tables.",
      "List the school code, school name, department code, admin department name, total distinct phone numbers, and the primary course level (undergraduate or graduate) observed in departments by linking data from the SIS admin department, department, course description, and subject code tables."
    ],
    "oracle_sql": "SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME, COUNT(DISTINCT sad.DEPARTMENT_PHONE_NUMBER) AS Total_Phone_Numbers, CASE WHEN SUM(CASE WHEN scd.COURSE_LEVEL = 'U' THEN 1 ELSE 0 END) >= SUM(CASE WHEN scd.COURSE_LEVEL = 'G' THEN 1 ELSE 0 END) THEN 'U' ELSE 'G' END AS Most_Common_Course_Level FROM SIS_ADMIN_DEPARTMENT sad JOIN SIS_DEPARTMENT sd ON sad.SIS_ADMIN_DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME;",
    "question": "What are the school code, school name, department code, admin department name, total unique phone numbers, and the most common course level among departments based on the SIS admin department, department, course description, and subject code tables?",
    "sql": "",
    "question_basic": "What are the school code, school name, department code, department name, total phone numbers, and the most common course level for each school's department?"
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What are the academic year, and instructors names for courses offered in the academic year 2022, along with the total number of types of courses per instructor?",
    "gold-sql": "SELECT ata.ACADEMIC_YEAR, ed.FULL_NAME, COUNT(distinct so.COURSE_NUMBER) AS Total_Courses FROM SUBJECT_OFFERED so JOIN ACADEMIC_TERMS_ALL ata ON so.TERM_CODE = ata.TERM_CODE JOIN EMPLOYEE_DIRECTORY ed ON so.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID WHERE ata.ACADEMIC_YEAR = 2022 GROUP BY ata.ACADEMIC_YEAR, ed.FULL_NAME;",
    "options": "",
    "oracle_sql": "SELECT ata.ACADEMIC_YEAR, ed.FULL_NAME, COUNT(distinct so.COURSE_NUMBER) AS Total_Courses FROM SUBJECT_OFFERED so JOIN ACADEMIC_TERMS_ALL ata ON so.TERM_CODE = ata.TERM_CODE JOIN EMPLOYEE_DIRECTORY ed ON so.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID WHERE ata.ACADEMIC_YEAR = 2022 GROUP BY ata.ACADEMIC_YEAR, ed.FULL_NAME;",
    "question": "",
    "sql": "",
    "question_basic": "What is the total number of courses taught by each faculty member in the academic year 2022? Can you provide a list showing the academic year, full name of the faculty member, and the total number of distinct courses they are responsible for teaching?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What is the term description, whether the term is current or not, total number of types of TIP subjects offered and materials needed, the minimum and maximum number of enrolled students, the total number of schools offering subjects, and the total number of records for each term code?",
    "gold-sql": "SELECT at.TERM_DESCRIPTION, at.IS_CURRENT_TERM, COUNT(DISTINCT tso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT tm.ISBN) AS Total_Materials, MIN(tso.NUM_ENROLLED_STUDENTS) AS Min_Enrolled_Students, MAX(tso.NUM_ENROLLED_STUDENTS) AS Max_Enrolled_Students, COUNT(DISTINCT OFFER_SCHOOL_NAME) AS Total_Num_Schools, SUM(td.RECORD_COUNT) AS Total_Records FROM ACADEMIC_TERMS_ALL at LEFT OUTER JOIN TIP_SUBJECT_OFFERED tso ON at.TERM_CODE = tso.TERM_CODE JOIN TIP_DETAIL td ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM;",
    "options": "",
    "oracle_sql": "SELECT at.TERM_DESCRIPTION, at.IS_CURRENT_TERM, COUNT(DISTINCT tso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT tm.ISBN) AS Total_Materials, MIN(tso.NUM_ENROLLED_STUDENTS) AS Min_Enrolled_Students, MAX(tso.NUM_ENROLLED_STUDENTS) AS Max_Enrolled_Students, COUNT(DISTINCT OFFER_SCHOOL_NAME) AS Total_Num_Schools, SUM(td.RECORD_COUNT) AS Total_Records FROM ACADEMIC_TERMS_ALL at LEFT OUTER JOIN TIP_SUBJECT_OFFERED tso ON at.TERM_CODE = tso.TERM_CODE JOIN TIP_DETAIL td ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM;",
    "question": "",
    "sql": "",
    "question_basic": "What are the details of academic terms along with the number of courses, materials, enrolled students, schools, and records for each term?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each financial aid year and academic year, list the number of fiscal periods, quarters, the start term date, the end term date, and number of distinct department-level term parameters.",
    "gold-sql": "WITH FinancialAidDetails AS ( SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.ACADEMIC_YEAR, at.FINANCIAL_AID_YEAR, td.START_DATE AS Term_Start_Date, td.END_DATE AS Term_End_Date, tm.FISCAL_PERIOD, tm.FISCAL_YEAR, tq.FY_QUARTER_CODE, tp.TERM_PARAMETER AS Dept_Term_Param FROM ACADEMIC_TERMS at JOIN TIME_DAY td ON at.TERM_START_DATE = td.CALENDAR_DATE JOIN TIME_MONTH tm ON td.FISCAL_PERIOD = tm.FISCAL_PERIOD AND td.FISCAL_YEAR = tm.FISCAL_YEAR JOIN TIME_QUARTER tq ON tm.FISCAL_YEAR = tq.FISCAL_YEAR AND tm.FY_QUARTER_CODE = tq.FY_QUARTER_CODE LEFT JOIN ACADEMIC_TERM_PARAMETER tp ON at.TERM_CODE = tp.TERM_CODE WHERE at.FINANCIAL_AID_YEAR IS NOT NULL ) SELECT FINANCIAL_AID_YEAR, ACADEMIC_YEAR, COUNT(DISTINCT FISCAL_PERIOD) AS Total_Fiscal_Periods, COUNT(DISTINCT FY_QUARTER_CODE) AS Total_Quarters, MIN(Term_Start_Date) AS First_Term_Start_Date, MAX(Term_End_Date) AS Last_Term_End_Date, COUNT(DISTINCT Dept_Term_Param) AS Distinct_Term_Params FROM FinancialAidDetails GROUP BY FINANCIAL_AID_YEAR, ACADEMIC_YEAR ORDER BY FINANCIAL_AID_YEAR DESC, ACADEMIC_YEAR ASC;",
    "options": "",
    "oracle_sql": "WITH FinancialAidDetails AS ( SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.ACADEMIC_YEAR, at.FINANCIAL_AID_YEAR, td.START_DATE AS Term_Start_Date, td.END_DATE AS Term_End_Date, tm.FISCAL_PERIOD, tm.FISCAL_YEAR, tq.FY_QUARTER_CODE, tp.TERM_PARAMETER AS Dept_Term_Param FROM ACADEMIC_TERMS at JOIN TIME_DAY td ON at.TERM_START_DATE = td.CALENDAR_DATE JOIN TIME_MONTH tm ON td.FISCAL_PERIOD = tm.FISCAL_PERIOD AND td.FISCAL_YEAR = tm.FISCAL_YEAR JOIN TIME_QUARTER tq ON tm.FISCAL_YEAR = tq.FISCAL_YEAR AND tm.FY_QUARTER_CODE = tq.FY_QUARTER_CODE LEFT JOIN ACADEMIC_TERM_PARAMETER tp ON at.TERM_CODE = tp.TERM_CODE WHERE at.FINANCIAL_AID_YEAR IS NOT NULL ) SELECT FINANCIAL_AID_YEAR, ACADEMIC_YEAR, COUNT(DISTINCT FISCAL_PERIOD) AS Total_Fiscal_Periods, COUNT(DISTINCT FY_QUARTER_CODE) AS Total_Quarters, MIN(Term_Start_Date) AS First_Term_Start_Date, MAX(Term_End_Date) AS Last_Term_End_Date, COUNT(DISTINCT Dept_Term_Param) AS Distinct_Term_Params FROM FinancialAidDetails GROUP BY FINANCIAL_AID_YEAR, ACADEMIC_YEAR ORDER BY FINANCIAL_AID_YEAR DESC, ACADEMIC_YEAR ASC;",
    "question": "",
    "sql": "",
    "question_basic": "What is the distribution of financial aid details across academic years and fiscal periods?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What is the current building key, building street address, city, state, and postal code of the history department?",
    "gold-sql": "SELECT DISTINCT d.FCLT_BUILDING_KEY, e.BUILDING_STREET_ADDRESS, d.CITY, d.STATE, d.POSTAL_CODE FROM FCLT_BUILDING_ADDRESS d JOIN FCLT_ROOMS a ON a.FCLT_BUILDING_KEY = d.FCLT_BUILDING_KEY JOIN FCLT_ORG_DLC_KEY b ON a.FCLT_ORGANIZATION_KEY = b.FCLT_ORGANIZATION_KEY JOIN MASTER_DEPT_HIERARCHY c ON b.DLC_KEY = c.DLC_KEY JOIN BUILDINGS e ON e.BUILDING_KEY = d.FCLT_BUILDING_KEY WHERE lower(c.DLC_NAME) = lower('History') AND d.ADDRESS_PURPOSE = 'STREET';",
    "options": [
      "1. Retrieve the distinct building key, street address, city, state, and postal code for buildings associated with the History department, focusing on street addresses.",
      "2. The query involves joining multiple tables to link building information with department hierarchies and organizational keys to filter by the History department and address purpose.",
      "3. Ensure accurate data retrieval by considering the lowercase comparison of the department name and filtering by the specific address purpose 'STREET'.",
      "4. Identify the unique building details related to the History department, emphasizing street addresses for precise location information.",
      "5. List the distinct building keys, street addresses, cities, states, and postal codes for buildings linked to the History department, specifically focusing on street addresses.",
      "6. Utilize inner joins to connect building addresses with organizational keys and department hierarchies, filtering by the History department and 'STREET' address purpose.",
      "7. Ensure data accuracy by comparing department names in lowercase and specifying the address purpose to retrieve relevant building information.",
      "8. Highlight the unique building attributes associated with the History department, emphasizing the importance of street addresses for location details.",
      "9. Show the unique building keys, street addresses, cities, states, and postal codes for buildings affiliated with the History department, particularly focusing on street addresses.",
      "10. Employ inner joins to establish relationships between building addresses, organizational keys, and department hierarchies, filtering by the History department and 'STREET' address purpose.",
      "11. Guarantee data precision by comparing department names in lowercase and specifying the address purpose to extract pertinent building details.",
      "12. Emphasize the distinct building characteristics linked to the History department, with an emphasis on street addresses for precise location identification.",
      "13. Retrieve the distinct building keys, street addresses, cities, states, and postal codes for buildings associated with the History department, with a specific focus on street addresses.",
      "14. The query involves joining multiple tables to connect building addresses with organizational keys and department hierarchies, filtering by the History department and 'STREET' address purpose.",
      "15. Ensure data accuracy by comparing department names in lowercase and specifying the address purpose to retrieve relevant building information.",
      "16. Identify the unique building details related to the History department, highlighting street addresses for precise location information."
    ],
    "oracle_sql": "SELECT DISTINCT d.FCLT_BUILDING_KEY, e.BUILDING_STREET_ADDRESS, d.CITY, d.STATE, d.POSTAL_CODE FROM FCLT_BUILDING_ADDRESS d JOIN FCLT_ROOMS a ON a.FCLT_BUILDING_KEY = d.FCLT_BUILDING_KEY JOIN FCLT_ORG_DLC_KEY b ON a.FCLT_ORGANIZATION_KEY = b.FCLT_ORGANIZATION_KEY JOIN MASTER_DEPT_HIERARCHY c ON b.DLC_KEY = c.DLC_KEY JOIN BUILDINGS e ON e.BUILDING_KEY = d.FCLT_BUILDING_KEY WHERE lower(c.DLC_NAME) = lower('History') AND d.ADDRESS_PURPOSE = 'STREET';",
    "question": "1. Retrieve the distinct building key, street address, city, state, and postal code for buildings associated with the History department, focusing on street addresses.",
    "sql": "",
    "question_basic": "What are the building details for the History department's street address?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What is the department name, total number of types of TIP subjects, total number of enrolled students, the minimum and maximum rental new price for each department?",
    "gold-sql": "SELECT tso.OFFER_DEPT_NAME, COUNT(distinct tso.SUBJECT_ID) AS Total_Subjects, SUM(tso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students, MIN(tm.RENTAL_NEW_PRICE) AS Min_Rental_New_Price, MAX(tm.RENTAL_NEW_PRICE) AS Max_Rental_New_Price FROM TIP_SUBJECT_OFFERED tso JOIN TIP_DETAIL td ON tso.TIP_SUBJECT_OFFERED_KEY = td.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY GROUP BY tso.OFFER_DEPT_NAME;",
    "options": "",
    "oracle_sql": "SELECT tso.OFFER_DEPT_NAME, COUNT(distinct tso.SUBJECT_ID) AS Total_Subjects, SUM(tso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students, MIN(tm.RENTAL_NEW_PRICE) AS Min_Rental_New_Price, MAX(tm.RENTAL_NEW_PRICE) AS Max_Rental_New_Price FROM TIP_SUBJECT_OFFERED tso JOIN TIP_DETAIL td ON tso.TIP_SUBJECT_OFFERED_KEY = td.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY GROUP BY tso.OFFER_DEPT_NAME;",
    "question": "",
    "sql": "",
    "question_basic": "What is the total number of subjects offered, the total number of enrolled students, and the range of rental prices for each department that offers subjects? Which department has the highest number of subjects and enrolled students? Which department has the highest and lowest rental prices for materials?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Show the details of rooms including the full name of the rooms, the building names, floor numbers, the organizations occupying them, name of the departments occupying them, and the percentage of the room area over the assignable floor area and building.",
    "gold-sql": "SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN ff.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/ff.ASSIGNABLE_AREA END AS PERC_OF_ASG_FLOOR, CASE WHEN fb.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/fb.ASSIGNABLE_AREA END AS PERC_OF_ASG_BUILDING FROM FAC_ROOMS fr JOIN FAC_BUILDING fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;",
    "options": "",
    "oracle_sql": "SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN ff.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/ff.ASSIGNABLE_AREA END AS PERC_OF_ASG_FLOOR, CASE WHEN fb.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/fb.ASSIGNABLE_AREA END AS PERC_OF_ASG_BUILDING FROM FAC_ROOMS fr JOIN FAC_BUILDING fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;",
    "question": "",
    "sql": "",
    "question_basic": "What is the percentage of assignable area occupied by each room on its respective floor and building?"
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Show the unique activity titles, locations, term start date, and supervisor name for all independent activities, sorted by the ascending order of start date.",
    "gold-sql": "SELECT DISTINCT a.activity_title, d.session_location, c.term_start_date, b.person_name AS Leader FROM iap_subject_detail a JOIN iap_subject_person b ON a.iap_subject_person_key = b.iap_subject_person_key JOIN academic_terms_all c ON c.term_code = a.term_code JOIN iap_subject_session d ON a.iap_subject_session_key = d.iap_subject_session_key WHERE b.person_role = 'Activity leader' ORDER BY term_start_date ASC;",
    "options": [
      "What are the activity titles, session locations, term start dates, and names of individuals serving as leaders for activities in the IAP subject details, sorted by the start date of the academic terms?",
      "Retrieve the unique activity titles, session locations, term start dates, and names of leaders involved in activities within the IAP subject details, with a focus on those designated as activity leaders, arranged in ascending order based on the start date of academic terms.",
      "List the distinct activity titles, session locations, term start dates, and the designated leaders' names for activities specified in the IAP subject details, filtering specifically for individuals holding the role of activity leader, and sort the results by the start date of academic terms.",
      "Display the activity titles, session locations, term start dates, and the names of individuals identified as activity leaders within the IAP subject details, ensuring uniqueness in the results and ordering them by the ascending start dates of academic terms."
    ],
    "oracle_sql": "SELECT DISTINCT a.activity_title, d.session_location, c.term_start_date, b.person_name AS Leader FROM iap_subject_detail a JOIN iap_subject_person b ON a.iap_subject_person_key = b.iap_subject_person_key JOIN academic_terms_all c ON c.term_code = a.term_code JOIN iap_subject_session d ON a.iap_subject_session_key = d.iap_subject_session_key WHERE b.person_role = 'Activity leader' ORDER BY term_start_date ASC;",
    "question": "What are the activity titles, session locations, term start dates, and names of individuals serving as leaders for activities in the IAP subject details, sorted by the start date of the academic terms?",
    "sql": "",
    "question_basic": "What are the upcoming activities led by specific individuals? Show the activity title, session location, start date, and the leader's name. The results are sorted by the start date in ascending order."
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the mailing list with owner key LIST69.377-keeper-xenon, list the owner, total number of mailing lists, and total number of members across all these mailing lists.",
    "gold-sql": "SELECT mlo.OWNER, COUNT(DISTINCT ml.MOIRA_LIST_KEY) AS Total_Lists, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE mlo.MOIRA_LIST_OWNER_KEY = 'LIST69.377-keeper-xenon' GROUP BY mlo.OWNER;",
    "options": "",
    "oracle_sql": "SELECT mlo.OWNER, COUNT(DISTINCT ml.MOIRA_LIST_KEY) AS Total_Lists, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE mlo.MOIRA_LIST_OWNER_KEY = 'LIST69.377-keeper-xenon' GROUP BY mlo.OWNER;",
    "question": "",
    "sql": "",
    "question_basic": "What is the total number of lists and members owned by the owner with the key 'LIST69.377-keeper-xenon'?"
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the email lists subscribed by faculty members with last names begin with Y, list the names of the lists, the total number of subjects managed by faculty in those mailing lists, and the number of such faculty in the lists.",
    "gold-sql": "SELECT DISTINCT ml.MOIRA_LIST_NAME, COUNT(ccso.SUBJECT_ID) AS course_count, COUNT(DISTINCT ccso.RESPONSIBLE_FACULTY_NAME) AS distinct_faculty_count FROM COURSE_CATALOG_SUBJECT_OFFERED CCSO JOIN EMPLOYEE_DIRECTORY E ON ccso.RESPONSIBLE_FACULTY_MIT_ID = E.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON upper(e.KRB_NAME_UPPERCASE) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ccso.RESPONSIBLE_FACULTY_NAME LIKE 'Y%' GROUP BY ML.MOIRA_LIST_NAME",
    "options": "",
    "oracle_sql": "SELECT DISTINCT ml.MOIRA_LIST_NAME, COUNT(ccso.SUBJECT_ID) AS course_count, COUNT(DISTINCT ccso.RESPONSIBLE_FACULTY_NAME) AS distinct_faculty_count FROM COURSE_CATALOG_SUBJECT_OFFERED CCSO JOIN EMPLOYEE_DIRECTORY E ON ccso.RESPONSIBLE_FACULTY_MIT_ID = E.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON upper(e.KRB_NAME_UPPERCASE) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ccso.RESPONSIBLE_FACULTY_NAME LIKE 'Y%' GROUP BY ML.MOIRA_LIST_NAME",
    "question": "",
    "sql": "",
    "question_basic": "What are the names of the Moira lists that start with 'Y' and how many courses are offered in each list? Additionally, how many distinct faculty members are responsible for teaching these courses in each Moira list?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each mailing list with a name beginning with R (case insensitive), and that Professor Ayden Hopkins is subscribed to, list its name, description, owner, number of people in the list, and number of tenured faculty in the list.",
    "gold-sql": "WITH FilteredLists AS ( SELECT DISTINCT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, ml.MOIRA_LIST_DESCRIPTION, mlo.OWNER FROM SE_PERSON se JOIN MOIRA_LIST_DETAIL mld ON UPPER(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE se.FULL_NAME = 'Hopkins, Ayden' AND UPPER(ml.MOIRA_LIST_NAME) LIKE 'R%' ), MemberCounts AS ( SELECT fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, fl.MOIRA_LIST_DESCRIPTION, fl.OWNER, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Member_Count FROM FilteredLists fl JOIN MOIRA_LIST_DETAIL mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, fl.MOIRA_LIST_DESCRIPTION, fl.OWNER ), FacultyTenuredCounts AS ( SELECT fl.MOIRA_LIST_KEY, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Faculty_Tenured_Count FROM FilteredLists fl JOIN MOIRA_LIST_DETAIL mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) WHERE se.PAYROLL_RANK = 'Faculty Tenured' GROUP BY fl.MOIRA_LIST_KEY ) SELECT DISTINCT mc.MOIRA_LIST_NAME, mc.MOIRA_LIST_DESCRIPTION, mc.OWNER, mc.Member_Count, COALESCE(ftc.Faculty_Tenured_Count, 0) AS Faculty_Tenured_Count FROM MemberCounts mc LEFT JOIN FacultyTenuredCounts ftc ON mc.MOIRA_LIST_KEY = ftc.MOIRA_LIST_KEY ORDER BY mc.Member_Count DESC;",
    "options": "",
    "oracle_sql": "WITH MemberCounts AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Member_Count FROM SE_PERSON se JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ml.MOIRA_LIST_NAME IN ( SELECT DISTINCT ml_sub.MOIRA_LIST_NAME FROM SE_PERSON se_sub JOIN MOIRA_LIST_DETAIL mld_sub ON upper(se_sub.KRB_NAME) = upper(mld_sub.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml_sub ON mld_sub.MOIRA_LIST_KEY = ml_sub.MOIRA_LIST_KEY WHERE se_sub.FULL_NAME = 'Hopkins, Ayden' ) GROUP BY ml.MOIRA_LIST_NAME ), FacultyTenuredCounts AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Faculty_Tenured_Count FROM SE_PERSON se JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ml.MOIRA_LIST_NAME IN ( SELECT DISTINCT ml_sub.MOIRA_LIST_NAME FROM SE_PERSON se_sub JOIN MOIRA_LIST_DETAIL mld_sub ON upper(se_sub.KRB_NAME) = upper(mld_sub.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml_sub ON mld_sub.MOIRA_LIST_KEY = ml_sub.MOIRA_LIST_KEY WHERE se_sub.FULL_NAME = 'Hopkins, Ayden' ) AND se.PAYROLL_RANK = 'Faculty Tenured' GROUP BY ml.MOIRA_LIST_NAME ) SELECT DISTINCT mc.MOIRA_LIST_NAME, ml.MOIRA_LIST_DESCRIPTION, mlo.OWNER, mc.Member_Count, COALESCE(ftc.Faculty_Tenured_Count, 0) AS Faculty_Tenured_Count FROM MemberCounts mc LEFT JOIN FacultyTenuredCounts ftc ON mc.MOIRA_LIST_NAME = ftc.MOIRA_LIST_NAME JOIN MOIRA_LIST ml ON mc.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL mld ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON MLD.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'C%' ORDER BY mc.Member_Count DESC;",
    "question": "",
    "question_basic": "What is the purpose of this query?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For students with last names starting with K, list their names, the phone numbers of departments they belong to, total number of mailing lists each student is in, and the average size of the mailing lists each student is in.",
    "gold-sql": "WITH MailingListSizes AS (SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, COUNT(mld.MOIRA_LIST_MEMBER) AS List_Size FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, COUNT(ml.MOIRA_LIST_KEY) AS Total_Lists, AVG(MLS.List_Size) AS Avg_List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON ml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'K%' GROUP BY msd.FULL_NAME, sad.DEPARTMENT_PHONE_NUMBER;",
    "options": "",
    "oracle_sql": "WITH MailingListSizes AS (SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, COUNT(mld.MOIRA_LIST_MEMBER) AS List_Size FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, COUNT(ml.MOIRA_LIST_KEY) AS Total_Lists, AVG(MLS.List_Size) AS Avg_List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON ml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'K%' GROUP BY msd.FULL_NAME, sad.DEPARTMENT_PHONE_NUMBER;",
    "question": "",
    "sql": "",
    "question_basic": "What are the names of students whose last names start with 'K' and their respective department phone numbers? How many mailing lists are they part of on average, and what is the average size of these lists?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For subjects offered in the summer term, list the subject titles, number of instructors, and the length of the longest instructor name.",
    "gold-sql": "SELECT ccso.SUBJECT_TITLE, COUNT(DISTINCT e.FULL_NAME) AS Num_Instructors, MAX(LENGTH(e.FULL_NAME)) AS Longest_Instructor_Name FROM EMPLOYEE_DIRECTORY e JOIN COURSE_CATALOG_SUBJECT_OFFERED ccso ON ccso.RESPONSIBLE_FACULTY_MIT_ID = e.MIT_ID JOIN ACADEMIC_TERMS_ALL at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' GROUP BY ccso.SUBJECT_TITLE;",
    "options": "",
    "oracle_sql": "SELECT ccso.SUBJECT_TITLE, COUNT(DISTINCT e.FULL_NAME) AS Num_Instructors, MAX(LENGTH(e.FULL_NAME)) AS Longest_Instructor_Name FROM EMPLOYEE_DIRECTORY e JOIN COURSE_CATALOG_SUBJECT_OFFERED ccso ON ccso.RESPONSIBLE_FACULTY_MIT_ID = e.MIT_ID JOIN ACADEMIC_TERMS_ALL at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' GROUP BY ccso.SUBJECT_TITLE;",
    "question": "",
    "sql": "",
    "question_basic": "What are the different subjects offered in the summer term, and how many instructors are responsible for each subject? Which subject has the longest instructor name?"
  },
  {
    "match_basic": false,
    "comment": "it is not the current academic term",
    "db_id": "dw",
    "gold-question": "For each IAP category and academic year, list the category name, academic year, total fee collected, total number of IAP subjects, and the minimum and maximum enrollment.",
    "gold-sql": "SELECT isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR, SUM(isd.FEE) AS Total_Fee, COUNT(distinct isd.ACTIVITY_TITLE) AS Total_Subjects, MIN(isd.MAX_ENROLLMENT) AS Min_Attendance, MAX(isd.MAX_ENROLLMENT) AS Max_Attendance FROM IAP_SUBJECT_DETAIL isd JOIN IAP_SUBJECT_CATEGORY isc ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY JOIN TIME_DAY td ON isd.TERM_CODE = td.ACADEMIC_TERM_CODE GROUP BY isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR;",
    "options": [
      "1. What are the total fee, number of subjects, minimum and maximum attendance, and academic year for each IAP category in the current academic term?",
      "2. Show the total fee collected, the count of unique subjects, the minimum and maximum attendance allowed, and the academic year for each IAP category during the ongoing academic term.",
      "3. Retrieve the sum of fees, the total number of subjects, the minimum and maximum attendance limits, and the academic year for every IAP category within the present academic term.",
      "4. Display the total fee amount, the total count of subjects, the minimum and maximum attendance requirements, and the academic year associated with each IAP category in the current academic term."
    ],
    "oracle_sql": "SELECT isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR, SUM(isd.FEE) AS Total_Fee, COUNT(distinct isd.ACTIVITY_TITLE) AS Total_Subjects, MIN(isd.MAX_ENROLLMENT) AS Min_Attendance, MAX(isd.MAX_ENROLLMENT) AS Max_Attendance FROM IAP_SUBJECT_DETAIL isd JOIN IAP_SUBJECT_CATEGORY isc ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY JOIN TIME_DAY td ON isd.TERM_CODE = td.ACADEMIC_TERM_CODE GROUP BY isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR;",
    "question": "What are the IAP category names, the years they occur, the total fee, number of subjects, minimum and maximum attendance, for each IAP category and academic year?",
    "sql": "",
    "question_basic": "What are the total fees, number of subjects, and attendance details for each academic year and category in the IAP program?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the 2023 Fall term, what are the unique term descriptions, subject titles along with their prerequisites, total number of types of subjects per term code, instructor of this course, and the number of types of courses ever taught by the instructor?",
    "gold-sql": "WITH SubjectCounts AS (SELECT TERM_CODE, FALL_INSTRUCTORS, SUBJECT_ID, COUNT(*) OVER (PARTITION BY TERM_CODE) AS Total_Subjects, COUNT(*) OVER (PARTITION BY FALL_INSTRUCTORS) AS Experience FROM COURSE_CATALOG_SUBJECT_OFFERED WHERE TERM_CODE = '2023FA') SELECT DISTINCT at.TERM_DESCRIPTION, ccso.SUBJECT_TITLE, ccso.PREREQUISITES, sc.Total_Subjects, ccso.FALL_INSTRUCTORS, sc.Experience FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE JOIN SubjectCounts sc ON ccso.TERM_CODE = sc.TERM_CODE AND ccso.SUBJECT_ID = sc.SUBJECT_ID WHERE ccso.TERM_CODE = '2023FA';",
    "options": "",
    "oracle_sql": "SELECT DISTINCT at.TERM_DESCRIPTION, ccso.SUBJECT_TITLE, ccso.PREREQUISITES, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY at.TERM_CODE) AS Total_Subjects, ccso.FALL_INSTRUCTORS, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY ccso.FALL_INSTRUCTORS) AS Experience FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE WHERE ccso.TERM_CODE = '2023FA';",
    "question": "",
    "sql": "",
    "question_basic": "What are the different subjects offered in the Fall Term 2023, and how many total subjects are available in this term? Additionally, who are the instructors for these subjects, and what is their level of experience in teaching?"
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For email lists with names starting with e (case insensitive), containing 10 to 20 members inclusive, and where over 75% are computer science students, provide the list name, owner, and member count.",
    "gold-sql": "WITH FilteredLists AS ( SELECT ml.MOIRA_LIST_NAME, mlo.OWNER, COUNT(mld.MOIRA_LIST_MEMBER) AS TOTAL_MEMBER_COUNT FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'E%' GROUP BY ml.MOIRA_LIST_NAME, mlo.OWNER HAVING COUNT(mld.MOIRA_LIST_MEMBER) BETWEEN 10 AND 20 ), CSStudentCounts AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE NULL END) AS CS_STUDENT_COUNT FROM FilteredLists fl JOIN MOIRA_LIST ml ON fl.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME GROUP BY ml.MOIRA_LIST_NAME ) SELECT fl.MOIRA_LIST_NAME, fl.OWNER, fl.TOTAL_MEMBER_COUNT FROM FilteredLists fl JOIN CSStudentCounts cs ON fl.MOIRA_LIST_NAME = cs.MOIRA_LIST_NAME WHERE cs.CS_STUDENT_COUNT > 0.75 * fl.TOTAL_MEMBER_COUNT;",
    "options": "",
    "oracle_sql": "WITH FilteredLists AS (SELECT ml.MOIRA_LIST_NAME, mlo.OWNER, COUNT(mld.MOIRA_LIST_MEMBER) AS TOTAL_MEMBER_COUNT FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'E%' GROUP BY ml.MOIRA_LIST_NAME, mlo.OWNER HAVING COUNT(mld.MOIRA_LIST_MEMBER) BETWEEN 10 AND 20), CSStudentCounts AS (SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE NULL END) AS CS_STUDENT_COUNT FROM FilteredLists fl JOIN MOIRA_LIST ml ON fl.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME GROUP BY ml.MOIRA_LIST_NAME) SELECT fl.MOIRA_LIST_NAME, fl.OWNER, fl.TOTAL_MEMBER_COUNT FROM FilteredLists fl JOIN CSStudentCounts cs ON fl.MOIRA_LIST_NAME = cs.MOIRA_LIST_NAME WHERE cs.CS_STUDENT_COUNT > 0.75 * fl.TOTAL_MEMBER_COUNT;",
    "question": "",
    "sql": "",
    "question_basic": "What are the MOIRA_LIST_NAME, OWNER, and TOTAL_MEMBER_COUNT for lists starting with 'E' that have between 10 and 20 members, and where more than 75% of the members are Computer Science students?"
  },
  {
    "match_basic": true,
    "comment": "try to incoporate all filters",
    "db_id": "dw",
    "gold-question": "List the unique full room names, their corresponding building names, street addresses, cities, states, postal codes, and building heights for rooms associated with subjects that Computer Science students can enroll in.",
    "gold-sql": "SELECT DISTINCT fr.ROOM_FULL_NAME, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, fb.BUILDING_HEIGHT FROM COURSE_CATALOG_SUBJECT_OFFERED JOIN FCLT_ROOMS fr ON MEET_PLACE = FCLT_ROOM_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = fr.FCLT_BUILDING_KEY WHERE DEPARTMENT_NAME = 'Electrical Eng & Computer Sci' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "options": [
      "1. Retrieve the unique room full names, building names, building street addresses, cities, states, postal codes, and building heights for courses offered in the Electrical Engineering & Computer Science department.",
      "2. Select the room full names, building names, street addresses, cities, states, postal codes, and building heights from the course catalog for the Electrical Engineering & Computer Science department, ensuring distinct results.",
      "3. Show the distinct room full names, building names, street addresses, cities, states, postal codes, and building heights of courses held in the Electrical Engineering & Computer Science department.",
      "4. List the unique room full names, building names, street addresses, cities, states, postal codes, and building heights for courses conducted within the Electrical Engineering & Computer Science department."
    ],
    "oracle_sql": "SELECT DISTINCT fr.ROOM_FULL_NAME, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, fb.BUILDING_HEIGHT FROM COURSE_CATALOG_SUBJECT_OFFERED JOIN FCLT_ROOMS fr ON MEET_PLACE = FCLT_ROOM_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = fr.FCLT_BUILDING_KEY WHERE DEPARTMENT_NAME = 'Electrical Eng & Computer Sci' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "question": "1. Retrieve the unique room full names, building names, building street addresses, cities, states, postal codes, and building heights for courses offered in the Electrical Engineering & Computer Science department.",
    "sql": "",
    "question_basic": "What are the room names, building names, street addresses, city, state, postal codes, and building heights for the Electrical Engineering & Computer Science department's facilities located on street addresses?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the 'ocean-apple' mailing list, identify the department with the highest student count. Provide the department name, phone number, and the total number of students subscribed to the mailing list from that department. If multiple departments have the same highest count, list each one separately.",
    "gold-sql": "WITH FilteredList AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'ocean-apple' ), FilteredListDetails AS ( SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL mld JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY ), StudentMemberCounts AS ( SELECT fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER AS department_phone, ad.SIS_ADMIN_DEPARTMENT_NAME AS department_name, COUNT(DISTINCT msd.FULL_NAME) AS student_members FROM FilteredList fl JOIN FilteredListDetails fld ON fl.MOIRA_LIST_KEY = fld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(fld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE GROUP BY fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER, ad.SIS_ADMIN_DEPARTMENT_NAME ), RankedDepartments AS ( SELECT department_name, department_phone, SUM(student_members) AS total_student_members, RANK() OVER (ORDER BY SUM(student_members) DESC) AS department_rank FROM StudentMemberCounts GROUP BY department_name, department_phone ) SELECT department_name AS most_prominent_dpt, department_phone AS most_prominent_dpt_phone, total_student_members FROM RankedDepartments WHERE department_rank = 1;",
    "options": "",
    "oracle_sql": "WITH StudentMemberCounts AS (SELECT mld.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, mo.OWNER AS list_owner, ad.DEPARTMENT_PHONE_NUMBER AS department_phone, ad.SIS_ADMIN_DEPARTMENT_NAME AS department_name, COUNT(DISTINCT msd.FULL_NAME) AS student_members FROM MOIRA_LIST_DETAIL mld JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mo ON mld.MOIRA_LIST_OWNER_KEY = mo.MOIRA_LIST_OWNER_KEY JOIN SE_PERSON se ON upper(mld.MOIRA_LIST_MEMBER) = upper(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE WHERE ml.MOIRA_LIST_NAME = 'ocean-apple' GROUP BY mld.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, mo.OWNER, ad.DEPARTMENT_PHONE_NUMBER, ad.SIS_ADMIN_DEPARTMENT_NAME), RankedDepartments AS (SELECT list_owner, department_name, department_phone, SUM(student_members) AS total_student_members, RANK() OVER (PARTITION BY list_owner ORDER BY SUM(student_members) DESC) AS department_rank FROM StudentMemberCounts GROUP BY list_owner, department_name, department_phone) SELECT list_owner, department_name AS most_prominent_dpt, department_phone AS most_prominent_dpt_phone, total_student_members FROM RankedDepartments WHERE department_rank = 1 ORDER BY list_owner;",
    "question": "",
    "sql": "",
    "question_basic": "What is the department with the highest number of student members and how many students are in that department?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What is the name of the building, total number of subjects, total fee, and shortest and longest sessions for each physical IAP session location?",
    "gold-sql": "SELECT b.BUILDING_NAME, COUNT(DISTINCT isd.ACTIVITY_TITLE) AS Total_Subjects, SUM(isd.FEE) AS Total_Fee, MIN(TIMESTAMPDIFF(MINUTE, STR_TO_DATE(iss.SESSION_START_TIME, '%h%i%p'), CASE WHEN STR_TO_DATE(iss.SESSION_START_TIME, '%h%i%p') > STR_TO_DATE(iss.SESSION_END_TIME, '%h%i%p') THEN STR_TO_DATE('1200PM', '%h%i%p') ELSE STR_TO_DATE(iss.SESSION_END_TIME, '%h%i%p') END)) AS Min_Sessions, MAX(TIMESTAMPDIFF(MINUTE, STR_TO_DATE(iss.SESSION_START_TIME, '%h%i%p'), CASE WHEN STR_TO_DATE(iss.SESSION_START_TIME, '%h%i%p') > STR_TO_DATE(iss.SESSION_END_TIME, '%h%i%p') THEN STR_TO_DATE('1200PM', '%h%i%p') ELSE STR_TO_DATE(iss.SESSION_END_TIME, '%h%i%p') END)) AS Max_Sessions FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN BUILDINGS b ON b.BUILDING_NUMBER = iss.SESSION_LOCATION GROUP BY b.BUILDING_NAME;",
    "options": [
      "What are the total number of subjects, total fee collected, minimum session duration, and maximum session duration for each building based on the Independent Activities Program?",
      "Retrieve the building names along with the count of unique activity titles, total fee generated, shortest session duration, and longest session duration for each building where Independent Activities Program sessions are held.",
      "How many different subjects are offered, what is the total fee earned, and what are the shortest and longest session durations for each building where Independent Activities Program sessions take place?",
      "List the building names, total number of unique subjects, total fee collected, minimum session duration, and maximum session duration for each building hosting sessions of the Independent Activities Program."
    ],
    "oracle_sql": "SELECT b.BUILDING_NAME, COUNT(Distinct isd.ACTIVITY_TITLE) AS Total_Subjects, SUM(isd.FEE) AS Total_Fee, MIN((CASE WHEN TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') > TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM') THEN TO_DATE('12:00PM', 'HH12:MIAM') ELSE TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM')END) - TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') ) * 24 * 60 AS Min_Sessions, MAX((CASE WHEN TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') > TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM') THEN TO_DATE('12:00PM', 'HH12:MIAM') ELSE TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM')END) - TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') ) * 24 * 60 AS Max_Sessions FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN BUILDINGS b on b.BUILDING_NUMBER = iss.SESSION_LOCATION GROUP BY b.BUILDING_NAME;",
    "question": "Retrieve the building names along with the count of unique activity titles, total fee generated, shortest session duration, and longest session duration for each building where Independent Activities Program sessions are held.",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each course, list its name, name of the building of the course location, and the cumulative number of courses, including the course itself, held in the same year or preceding years (partitioned by academic year and sorted in the ascending order of course start date).",
    "gold-sql": "select distinct subject_title, building_name, count(ccso.subject_id) over (partition by ccso.academic_year order by term_start_date asc range between unbounded preceding and current row) from COURSE_CATALOG_SUBJECT_OFFERED ccso join academic_terms on ccso.effective_term_code =academic_terms.term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY",
    "options": "",
    "oracle_sql": "select distinct subject_title, building_name, count(ccso.subject_id) over (partition by ccso.academic_year order by term_start_date asc range between unbounded preceding and current row) from COURSE_CATALOG_SUBJECT_OFFERED ccso join academic_terms on ccso.effective_term_code =academic_terms.term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each course, provide the room number of course location, building name, building number, building city, building state, area, organization name, room usage, term code, course level, the total number of subjects, unique meeting times, and total units. Do not include meet place or meet times with NULL values.",
    "gold-sql": "WITH MeetingPlaceDetails AS ( SELECT c.MEET_PLACE AS room_number, c.MEET_TIME, c.TERM_CODE, c.SUBJECT_ID, c.TOTAL_UNITS, b.BUILDING_NAME, b.BUILDING_NUMBER, ba.CITY AS building_city, ba.STATE AS building_state, fr.AREA, fr.ORGANIZATION_NAME, fmu.MAJOR_USE, scd.COURSE_LEVEL AS course_level, scd.COURSE_DESCRIPTION AS course_description FROM COURSE_CATALOG_SUBJECT_OFFERED c JOIN FAC_ROOMS fr ON c.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_BUILDING b ON fr.BUILDING_KEY = b.FAC_BUILDING_KEY JOIN FAC_MAJOR_USE fmu ON fr.MAJOR_USE_KEY = fmu.MAJOR_USE_KEY LEFT JOIN FAC_BUILDING_ADDRESS ba ON b.FAC_BUILDING_KEY = ba.BUILDING_KEY LEFT JOIN SIS_COURSE_DESCRIPTION scd ON c.SUBJECT_ID = scd.COURSE WHERE c.MEET_PLACE IS NOT NULL AND c.MEET_TIME IS NOT NULL ), MeetingPlaceAggregates AS ( SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, COUNT(DISTINCT SUBJECT_ID) AS num_subjects, COUNT(DISTINCT MEET_TIME) AS unique_meet_times, SUM(TOTAL_UNITS) AS total_units FROM MeetingPlaceDetails GROUP BY room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level ) SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, num_subjects, unique_meet_times, total_units FROM MeetingPlaceAggregates ORDER BY TERM_CODE, total_units DESC, room_number;",
    "options": "",
    "oracle_sql": "WITH MeetingPlaceDetails AS ( SELECT c.MEET_PLACE AS room_number, c.MEET_TIME, c.TERM_CODE, c.SUBJECT_ID, c.TOTAL_UNITS, b.BUILDING_NAME, b.BUILDING_NUMBER, ba.CITY AS building_city, ba.STATE AS building_state, fr.AREA, fr.ORGANIZATION_NAME, fmu.MAJOR_USE, scd.COURSE_LEVEL AS course_level, scd.COURSE_DESCRIPTION AS course_description FROM COURSE_CATALOG_SUBJECT_OFFERED c JOIN FAC_ROOMS fr ON c.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_BUILDING b ON fr.BUILDING_KEY = b.FAC_BUILDING_KEY JOIN FAC_MAJOR_USE fmu ON fr.MAJOR_USE_KEY = fmu.MAJOR_USE_KEY LEFT JOIN FAC_BUILDING_ADDRESS ba ON b.FAC_BUILDING_KEY = ba.BUILDING_KEY LEFT JOIN SIS_COURSE_DESCRIPTION scd ON c.SUBJECT_ID = scd.COURSE WHERE c.MEET_PLACE IS NOT NULL AND c.MEET_TIME IS NOT NULL ), MeetingPlaceAggregates AS ( SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, COUNT(DISTINCT SUBJECT_ID) AS num_subjects, COUNT(DISTINCT MEET_TIME) AS unique_meet_times, SUM(TOTAL_UNITS) AS total_units FROM MeetingPlaceDetails GROUP BY room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level ) SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, num_subjects, unique_meet_times, total_units FROM MeetingPlaceAggregates ORDER BY TERM_CODE, total_units DESC, room_number;",
    "question": "",
    "sql": "",
    "question_basic": "What are the different meeting places, along with their details, where courses are offered in the 2002FA term? The output includes the room number, building name, building number, city, state, area, organization name, major use, course level, number of subjects offered, unique meeting times, and total units. The results are sorted by term code, total units in descending order, and room number."
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each publication year, list the year, the total number of reserved materials, the average length of their titles, distinct number of status, and number of courses, sorted by publication year in descending order.",
    "gold-sql": "SELECT lrc.CATALOG_YEAR AS PUBLICATION_YEAR, COUNT(distinct lrc.LIBRARY_RESERVE_CATALOG_KEY) AS TOTAL_MATERIALS, AVG(LENGTH(lrc.CATALOG_TITLE)) AS AVG_TITLE_LENGTH, COUNT(DISTINCT lms.LIBRARY_MATERIAL_STATUS) AS STATUS_COUNT, COUNT(DISTINCT lci.COURSE_NAME) AS COURSE_COUNT FROM LIBRARY_RESERVE_CATALOG lrc JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lrc.LIBRARY_RESERVE_CATALOG_KEY = lrmd.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY GROUP BY lrc.CATALOG_YEAR ORDER BY PUBLICATION_YEAR DESC;",
    "options": "",
    "oracle_sql": "SELECT lrc.CATALOG_YEAR AS PUBLICATION_YEAR, COUNT(distinct lrc.LIBRARY_RESERVE_CATALOG_KEY) AS TOTAL_MATERIALS, AVG(LENGTH(lrc.CATALOG_TITLE)) AS AVG_TITLE_LENGTH, COUNT(DISTINCT lms.LIBRARY_MATERIAL_STATUS) AS STATUS_COUNT, COUNT(DISTINCT lci.COURSE_NAME) AS COURSE_COUNT FROM LIBRARY_RESERVE_CATALOG lrc JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lrc.LIBRARY_RESERVE_CATALOG_KEY = lrmd.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY GROUP BY lrc.CATALOG_YEAR ORDER BY PUBLICATION_YEAR DESC;",
    "question": "",
    "sql": "",
    "question_basic": "What is the publication year, total number of materials, average title length, number of unique material statuses, and count of courses for each year in the library reserve catalog?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each sponsor, list the sponsor name, the number of IAP sessions hosted, and the number of unique subjects organized.",
    "gold-sql": "SELECT iss.SPONSOR_NAME, COUNT(issp.IAP_SUBJECT_SESSION_KEY) AS SESSION_COUNT, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS UNIQUE_SUBJECTS FROM IAP_SUBJECT_SESSION issp JOIN IAP_SUBJECT_DETAIL isd ON issp.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR iss ON isd.IAP_SUBJECT_SPONSOR_KEY = iss.IAP_SUBJECT_SPONSOR_KEY GROUP BY iss.SPONSOR_NAME ORDER BY SESSION_COUNT DESC;",
    "options": "",
    "oracle_sql": "SELECT iss.SPONSOR_NAME, COUNT(issp.IAP_SUBJECT_SESSION_KEY) AS SESSION_COUNT, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS UNIQUE_SUBJECTS FROM IAP_SUBJECT_SESSION issp JOIN IAP_SUBJECT_DETAIL isd ON issp.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR iss ON isd.IAP_SUBJECT_SPONSOR_KEY = iss.IAP_SUBJECT_SPONSOR_KEY GROUP BY iss.SPONSOR_NAME ORDER BY SESSION_COUNT DESC;",
    "question": "",
    "question_basic": "What is the number of sessions and unique subjects associated with each sponsor in the IAP program? Which sponsor has the highest session count?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each sponsor of the independent activity periods, list the sponsor name, number of sessions held, the total number of enrollment, the minimum and maximum fee, the number of sessions with info, and the number of sessions without info.",
    "gold-sql": "SELECT issr.SPONSOR_NAME, COUNT(DISTINCT iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions, SUM(isd.MAX_ENROLLMENT), MIN(isd.FEE) AS Min_Fee, MAX(isd.FEE) AS Max_Fee, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'Y' THEN 1 ELSE 0 END) AS Num_Sessions_With_Info, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'N' THEN 1 ELSE 0 END) AS Num_Sessions_Without_Info FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR issr ON isd.IAP_SUBJECT_SPONSOR_KEY = issr.IAP_SUBJECT_SPONSOR_KEY GROUP BY issr.SPONSOR_NAME;",
    "options": [
      "What is the total number of sessions, maximum enrollment, minimum fee, maximum fee, number of sessions with information, and number of sessions without information for each sponsor in the IAP subject sessions?",
      "Show the sponsor names along with the total count of unique sessions, the sum of maximum enrollments, the minimum fee, the maximum fee, the count of sessions with information, and the count of sessions without information for each sponsor in the IAP subject sessions.",
      "List the sponsor names and provide the total number of sessions, maximum enrollment, minimum fee, maximum fee, number of sessions with information, and number of sessions without information for each sponsor involved in the IAP subject sessions.",
      "Display the sponsor names and calculate the total sessions, maximum enrollment, minimum fee, maximum fee, sessions with information, and sessions without information for each sponsor in the IAP subject sessions."
    ],
    "oracle_sql": "SELECT issr.SPONSOR_NAME, COUNT(DISTINCT iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions, SUM(isd.MAX_ENROLLMENT), MIN(isd.FEE) AS Min_Fee, MAX(isd.FEE) AS Max_Fee, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'Y' THEN 1 ELSE 0 END) AS Num_Sessions_With_Info, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'N' THEN 1 ELSE 0 END) AS Num_Sessions_Without_Info FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR issr ON isd.IAP_SUBJECT_SPONSOR_KEY = issr.IAP_SUBJECT_SPONSOR_KEY GROUP BY issr.SPONSOR_NAME;",
    "question": "Show the sponsor names along with the total count of unique sessions, the sum of maximum enrollments, the minimum fee, the maximum fee, the count of sessions with information, and the count of sessions without information for each sponsor in the IAP subject sessions.",
    "sql": "",
    "question_basic": "What is the total number of sessions, maximum enrollment, and fee range for each sponsor? Which sponsors have sessions with and without session information?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For email lists with names starting with C (case insensitive) and containing faculty who teach courses in the summer in financial aid years after 2001, provide the name of the list, the number of people in the list, and the number of faculty in the list.",
    "gold-sql": "WITH FilteredLists AS ( SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME FROM MOIRA_LIST ml WHERE upper(ml.MOIRA_LIST_NAME) LIKE 'C%' ) SELECT DISTINCT fl.MOIRA_LIST_NAME AS Moira_List_Name, COUNT(mld.MOIRA_LIST_MEMBER) AS Member_Count, COUNT(DISTINCT ed.MIT_ID) AS Distinct_Faculty_Count FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON UPPER(ed.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN FilteredLists fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' AND CAST(at.FINANCIAL_AID_YEAR AS UNSIGNED) > 2001 GROUP BY fl.MOIRA_LIST_NAME;",
    "options": "",
    "oracle_sql": "WITH FilteredLists AS ( SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME FROM MOIRA_LIST ml WHERE upper(ml.MOIRA_LIST_NAME) LIKE 'C%' ) SELECT DISTINCT fl.MOIRA_LIST_NAME AS Moira_List_Name, COUNT(mld.MOIRA_LIST_MEMBER) AS Member_Count, COUNT(DISTINCT ed.MIT_ID) AS Distinct_Faculty_Count FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON UPPER(ed.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN FilteredLists fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' AND CAST(at.FINANCIAL_AID_YEAR AS UNSIGNED) > 2001 GROUP BY fl.MOIRA_LIST_NAME;",
    "question": "",
    "sql": "",
    "question_basic": "What are the names of Moira lists starting with 'C' and their corresponding member and distinct faculty counts?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each department and material status, list the name of the department, the material status, the number of TIP materials associated with this department and status, the number of library materials associated with this department and status, the total number of TIP and library materials associated with this department and status. Include a subtotal for each department and a grand total across all departments.",
    "gold-sql": "WITH TIPMaterialStatuses AS ( SELECT tso.OFFER_DEPT_NAME AS Department, tms.TIP_MATERIAL_STATUS AS Status, COUNT(td.TIP_MATERIAL_KEY) AS Total_TIP_Materials FROM TIP_DETAIL td JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY tso.OFFER_DEPT_NAME, tms.TIP_MATERIAL_STATUS ), LibraryMaterialStatuses AS ( SELECT lso.OFFER_DEPT_NAME AS Department, lms.LIBRARY_MATERIAL_STATUS AS Status, COUNT(lrmd.LIBRARY_RESERVE_CATALOG_KEY) AS Total_Library_Materials FROM LIBRARY_RESERVE_MATRL_DETAIL lrmd JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lso.OFFER_DEPT_NAME, lms.LIBRARY_MATERIAL_STATUS ), CombinedStatuses AS ( SELECT Department, Status, Total_TIP_Materials, 0 AS Total_Library_Materials FROM TIPMaterialStatuses UNION ALL SELECT Department, Status, 0 AS Total_TIP_Materials, Total_Library_Materials FROM LibraryMaterialStatuses ) SELECT Department, Status, SUM(Total_TIP_Materials) AS Total_TIP_Materials, SUM(Total_Library_Materials) AS Total_Library_Materials, SUM(Total_TIP_Materials + Total_Library_Materials) AS Total_All_Materials FROM CombinedStatuses GROUP BY Department, Status WITH ROLLUP ORDER BY Department, Status;",
    "options": "",
    "oracle_sql": "WITH TIPMaterialStatuses AS ( SELECT tso.OFFER_DEPT_NAME AS Department, tms.TIP_MATERIAL_STATUS AS Status, COUNT(td.TIP_MATERIAL_KEY) AS Total_TIP_Materials FROM TIP_DETAIL td JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY tso.OFFER_DEPT_NAME, tms.TIP_MATERIAL_STATUS ), LibraryMaterialStatuses AS ( SELECT lso.OFFER_DEPT_NAME AS Department, lms.LIBRARY_MATERIAL_STATUS AS Status, COUNT(lrmd.LIBRARY_RESERVE_CATALOG_KEY) AS Total_Library_Materials FROM LIBRARY_RESERVE_MATRL_DETAIL lrmd JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lso.OFFER_DEPT_NAME, lms.LIBRARY_MATERIAL_STATUS ), CombinedStatuses AS ( SELECT COALESCE(tms.Department, lms.Department) AS Department, COALESCE(tms.Status, lms.Status) AS Status, COALESCE(tms.Total_TIP_Materials, 0) AS Total_TIP_Materials, COALESCE(lms.Total_Library_Materials, 0) AS Total_Library_Materials FROM TIPMaterialStatuses tms FULL OUTER JOIN LibraryMaterialStatuses lms ON tms.Department = lms.Department AND tms.Status = lms.Status ) SELECT Department, Status, SUM(Total_TIP_Materials) AS Total_TIP_Materials, SUM(Total_Library_Materials) AS Total_Library_Materials, SUM(Total_TIP_Materials + Total_Library_Materials) AS Total_All_Materials FROM CombinedStatuses GROUP BY ROLLUP(Department, Status) ORDER BY Department, Status;",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "List the name and floor of the building with the largest floor number.",
    "gold-sql": "SELECT DISTINCT B.BUILDING_NAME, A.FLOOR FROM FAC_FLOOR A JOIN FAC_BUILDING B ON A.BUILDING_KEY = B.FAC_BUILDING_KEY JOIN (SELECT MAX(f) AS highest_floor FROM (SELECT CASE WHEN FLOOR REGEXP '^[0-9]+$' THEN CAST(FLOOR AS UNSIGNED) ELSE NULL END AS f FROM FAC_FLOOR) AS subquery1) AS subquery2 ON (CASE WHEN A.FLOOR REGEXP '^[0-9]+$' THEN CAST(A.FLOOR AS UNSIGNED) ELSE NULL END) = subquery2.highest_floor;",
    "options": [
      "1. Retrieve the unique building names and floors of the highest floor in each building by joining the FAC_FLOOR table with the FAC_BUILDING table, considering only the maximum floor level in each building.",
      "2. The query involves selecting the columns B.BUILDING_NAME and A.FLOOR from the FAC_FLOOR table, joining it with the FAC_BUILDING table based on the relationship between A.BUILDING_KEY and B.FAC_BUILDING_KEY. Additionally, it calculates the highest floor in each building by filtering the maximum floor value using subqueries.",
      "3. Obtain the distinct building names and corresponding highest floors by linking the FAC_FLOOR and FAC_BUILDING tables, ensuring that only the top floor of each building is displayed accurately.",
      "4. Find the unique names of buildings and their respective top floors by connecting the FAC_FLOOR and FAC_BUILDING tables, focusing on identifying the highest floor level within each building efficiently.",
      "5. Display the building names and their highest floors by joining the FAC_FLOOR and FAC_BUILDING tables, filtering out the maximum floor value to determine the top floor in each building accurately.",
      "6. List the distinct building names and their highest floors by linking the FAC_FLOOR and FAC_BUILDING tables, ensuring that only the top floor of each building is retrieved correctly.",
      "7. Identify the building names and their highest floors by joining the FAC_FLOOR and FAC_BUILDING tables, filtering out the maximum floor value to determine the top floor in each building effectively.",
      "8. Retrieve the unique building names and their highest floors by connecting the FAC_FLOOR and FAC_BUILDING tables, ensuring that only the top floor of each building is accurately displayed."
    ],
    "oracle_sql": "SELECT DISTINCT B.BUILDING_NAME, A.FLOOR FROM FAC_FLOOR A JOIN FAC_BUILDING B ON A.BUILDING_KEY = B.FAC_BUILDING_KEY JOIN (SELECT max(f) as highest_floor FROM (SELECT CASE WHEN REGEXP_LIKE(FLOOR, '^\\d+$') THEN TO_NUMBER(FLOOR) ELSE NULL END AS f FROM fac_floor)) ON (CASE WHEN REGEXP_LIKE(A.FLOOR, '^\\d+$') THEN TO_NUMBER(FLOOR) ELSE NULL END) = highest_floor;",
    "question": "4. Show the unique names of buildings and their respective floor numbers for the highest floor in each building, utilizing the floor data to identify the topmost floor levels effectively.",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each IAP category, list its name, number of unique sessions, total number of attendees, active period (in the format of 'beginning term code-end term code'), the most common sponsor name, and the most common session start time. Include a grand total row showing the total number of sessions and attendees across all categories in the format of ('TOTAL', number of sessions, number of attendees, null, null, null).",
    "gold-sql": "WITH SponsorAndStartTime AS (SELECT isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME, COUNT(isp.SPONSOR_NAME) AS sponsor_count, COUNT(iss.SESSION_START_TIME) AS start_time_count FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN IAP_SUBJECT_SESSION iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY LEFT JOIN IAP_SUBJECT_SPONSOR isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY GROUP BY isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME), MostCommonDetails AS (SELECT IAP_CATEGORY_NAME, (SELECT SPONSOR_NAME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SPONSOR_NAME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_sponsor, (SELECT SESSION_START_TIME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SESSION_START_TIME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_start_time FROM SponsorAndStartTime sast GROUP BY IAP_CATEGORY_NAME), CategorySummary AS (SELECT isc.IAP_CATEGORY_NAME AS TYPE, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS nr_sessions, FORMAT(SUM(isd.MAX_ENROLLMENT), 0) AS total_attend, MIN(isd.TERM_CODE) AS first_active_year, MAX(isd.TERM_CODE) AS last_active_year, mcd.most_common_sponsor, mcd.most_common_start_time FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN MostCommonDetails mcd ON isc.IAP_CATEGORY_NAME = mcd.IAP_CATEGORY_NAME GROUP BY isc.IAP_CATEGORY_NAME, mcd.most_common_sponsor, mcd.most_common_start_time) SELECT TYPE, nr_sessions, total_attend, CONCAT(first_active_year, '-', last_active_year) AS active_years, most_common_sponsor, most_common_start_time FROM CategorySummary UNION ALL SELECT 'TOTAL', COUNT(DISTINCT IAP_SUBJECT_SESSION_KEY), FORMAT(SUM(MAX_ENROLLMENT), 0), NULL, NULL, NULL FROM IAP_SUBJECT_DETAIL ORDER BY TYPE;",
    "options": "",
    "oracle_sql": "WITH SponsorAndStartTime AS ( SELECT isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME, COUNT(isp.SPONSOR_NAME) AS sponsor_count, COUNT(iss.SESSION_START_TIME) AS start_time_count FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN IAP_SUBJECT_SESSION iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY LEFT JOIN IAP_SUBJECT_SPONSOR isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY GROUP BY isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME ), MostCommonDetails AS ( SELECT IAP_CATEGORY_NAME, MAX(SPONSOR_NAME) KEEP (DENSE_RANK FIRST ORDER BY sponsor_count DESC) AS most_common_sponsor, MAX(SESSION_START_TIME) KEEP (DENSE_RANK FIRST ORDER BY start_time_count DESC) AS most_common_start_time FROM SponsorAndStartTime GROUP BY IAP_CATEGORY_NAME ), CategorySummary AS ( SELECT isc.IAP_CATEGORY_NAME AS TYPE, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS nr_sessions, TO_CHAR(SUM(isd.MAX_ENROLLMENT), '999,999,999,999') AS total_attend, MIN(isd.TERM_CODE) AS first_active_year, MAX(isd.TERM_CODE) AS last_active_year, mcd.most_common_sponsor, mcd.most_common_start_time FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN MostCommonDetails mcd ON isc.IAP_CATEGORY_NAME = mcd.IAP_CATEGORY_NAME GROUP BY isc.IAP_CATEGORY_NAME, mcd.most_common_sponsor, mcd.most_common_start_time ) SELECT TYPE, nr_sessions, total_attend, first_active_year || '-' || last_active_year AS active_years, most_common_sponsor, most_common_start_time FROM CategorySummary UNION ALL SELECT 'TOTAL', COUNT(DISTINCT IAP_SUBJECT_SESSION_KEY), TO_CHAR(SUM(MAX_ENROLLMENT), '999,999,999,999'), NULL, NULL, NULL FROM IAP_SUBJECT_DETAIL ORDER BY TYPE;",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each mailing list that involves subscribers that work in departments with names starting with 'Computer Science', state the ownership type, the list name, the number of owners, and the number of subscribers. Display the ownership type only if it differs from the previous entry. Include subtotals (the corresponding type field shoud be 'SUBTOTAL') for each ownership type and a grand total (the corresponding type field shoud be 'TOTAL') across all ownership types.",
    "gold-sql": "SELECT CASE WHEN LAG(OWNERSHIP_TYPE) OVER (ORDER BY OWNERSHIP_TYPE_gr DESC, ML) = OWNERSHIP_TYPE THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, ML, nr_owner, nr_member FROM (SELECT CASE WHEN OWNER_TYPE IS NULL AND MOIRA_LIST_NAME IS NOT NULL THEN CONCAT(OWNER_TYPE, '1') ELSE CONCAT(OWNER_TYPE, '2') END AS OWNERSHIP_TYPE_gr, CASE WHEN MOIRA_LIST_NAME IS NULL AND OWNER_TYPE IS NOT NULL THEN 'SUBTOTAL' WHEN MOIRA_LIST_NAME IS NULL AND OWNER_TYPE IS NULL THEN 'TOTAL' ELSE OWNER_TYPE END AS OWNERSHIP_TYPE, MOIRA_LIST_NAME AS ML, COUNT(DISTINCT OWNER) AS nr_owner, COUNT(DISTINCT MOIRA_LIST_MEMBER_MIT_ID) AS nr_member FROM MOIRA_LIST_OWNER mlo JOIN MOIRA_LIST_DETAIL mld ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ON MIT_ID = MOIRA_LIST_MEMBER_MIT_ID WHERE department_name LIKE 'Computer Science%' GROUP BY OWNER_TYPE, MOIRA_LIST_NAME WITH ROLLUP ORDER BY OWNER_TYPE DESC, MOIRA_LIST_NAME) tbltmp;",
    "options": "",
    "oracle_sql": "SELECT CASE WHEN LAG(OWNERSHIP_TYPE) OVER (ORDER BY OWNERSHIP_TYPE_gr DESC, ML) = OWNERSHIP_TYPE THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, ML, nr_owner, nr_member FROM (SELECT CASE WHEN GROUPING(OWNER_TYPE) = 1 AND GROUPING(MOIRA_LIST_NAME) = 0 THEN OWNER_TYPE || '1' ELSE OWNER_TYPE || '2' END AS OWNERSHIP_TYPE_gr, CASE WHEN GROUPING(MOIRA_LIST_NAME) = 1 AND GROUPING(OWNER_TYPE) = 0 THEN 'SUBTOTAL' WHEN GROUPING(MOIRA_LIST_NAME) = 1 AND GROUPING(OWNER_TYPE) = 1 THEN 'TOTAL' ELSE OWNER_TYPE END AS OWNERSHIP_TYPE, MOIRA_LIST_NAME AS ML, COUNT(DISTINCT OWNER) AS nr_owner, COUNT(DISTINCT MOIRA_LIST_MEMBER_MIT_ID) AS nr_member FROM MOIRA_LIST_OWNER mlo JOIN MOIRA_LIST_DETAIL mld ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ON MIT_ID = MOIRA_LIST_MEMBER_MIT_ID WHERE department_name LIKE 'Computer Science%' GROUP BY ROLLUP(OWNER_TYPE, MOIRA_LIST_NAME) ORDER BY OWNER_TYPE DESC, MOIRA_LIST_NAME) tbltmp",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Group sessions by their current term status. For each group, state the status ('CURRENT' if is current term and 'NOT CURRENT' otherwise), name of the session, number of IAP sessions, total IAP session time in days, and average IAP session time in days. Show a subtotal for each current status and a grand total row across all status. Order the results by current status and cluster type. Display the the current status only if it differs from the previous entry.",
    "gold-sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY assign) = assign THEN NULL ELSE assign END AS assign, muse, session_count, total_time, avg_time FROM (SELECT CASE WHEN IS_CURRENT_TERM IS NULL AND IAP_CATEGORY_NAME IS NOT NULL THEN 'SUBTOTAL' WHEN IS_CURRENT_TERM IS NULL AND IAP_CATEGORY_NAME IS NULL THEN 'TOTAL' ELSE CASE WHEN IS_CURRENT_TERM = 'Y' THEN 'CURRENT' ELSE 'NOT CURRENT' END END AS assign, IAP_CATEGORY_NAME AS muse, COUNT(SESSION_DATE) AS session_count, SUM(COALESCE(TIMESTAMPDIFF(HOUR, STR_TO_DATE(CONCAT(LEFT(SESSION_START_TIME, 2), ':', SUBSTRING(SESSION_START_TIME, 3, 2), ' ', RIGHT(SESSION_START_TIME, 2)), '%h:%i %p'), STR_TO_DATE(CONCAT(LEFT(SESSION_END_TIME, 2), ':', SUBSTRING(SESSION_END_TIME, 3, 2), ' ', RIGHT(SESSION_END_TIME, 2)), '%h:%i %p')) / 24.0, 0)) AS total_time, AVG(COALESCE(TIMESTAMPDIFF(HOUR, STR_TO_DATE(CONCAT(LEFT(SESSION_START_TIME, 2), ':', SUBSTRING(SESSION_START_TIME, 3, 2), ' ', RIGHT(SESSION_START_TIME, 2)), '%h:%i %p'), STR_TO_DATE(CONCAT(LEFT(SESSION_END_TIME, 2), ':', SUBSTRING(SESSION_END_TIME, 3, 2), ' ', RIGHT(SESSION_END_TIME, 2)), '%h:%i %p')) / 24.0, 0)) AS avg_time FROM IAP_SUBJECT_DETAIL ss JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ss.TERM_CODE JOIN IAP_SUBJECT_SESSION iss ON iss.IAP_SUBJECT_SESSION_KEY = ss.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_CATEGORY isc ON isc.IAP_SUBJECT_CATEGORY_KEY = ss.IAP_SUBJECT_CATEGORY_KEY GROUP BY IS_CURRENT_TERM, IAP_CATEGORY_NAME WITH ROLLUP HAVING IS_CURRENT_TERM IS NOT NULL OR IAP_CATEGORY_NAME IS NOT NULL) AS tbltmp ORDER BY assign, muse;",
    "options": "",
    "oracle_sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY assign) = assign THEN NULL ELSE assign END AS assign, muse, session_count, total_time, avg_time FROM (SELECT CASE WHEN GROUPING(IAP_CATEGORY_NAME) = 1 AND GROUPING(IS_CURRENT_TERM) = 0 THEN 'SUBTOTAL' WHEN GROUPING(IAP_CATEGORY_NAME) = 1 AND GROUPING(IAP_CATEGORY_NAME) = 1 THEN 'TOTAL' ELSE CASE WHEN IS_CURRENT_TERM = 'Y' THEN 'CURRENT' ELSE 'NOT CURRENT' END END AS assign, IAP_CATEGORY_NAME AS muse, COUNT(SESSION_DATE) AS session_count, SUM(COALESCE(TO_DATE(SESSION_END_TIME, 'HHMIPM') - TO_DATE(SESSION_START_TIME, 'HHMIPM'), 0)) AS total_time, AVG(COALESCE(TO_DATE(SESSION_END_TIME, 'HHMIPM') - TO_DATE(SESSION_START_TIME, 'HHMIPM'), 0)) AS avg_time FROM IAP_SUBJECT_DETAIL ss JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ss.TERM_CODE JOIN IAP_SUBJECT_SESSION iss ON iss.IAP_SUBJECT_SESSION_KEY =ss.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_CATEGORY isc ON isc.IAP_SUBJECT_CATEGORY_KEY=ss.IAP_SUBJECT_CATEGORY_KEY GROUP BY ROLLUP(IS_CURRENT_TERM, IAP_CATEGORY_NAME) ORDER BY assign, muse) tbltmp",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each course, list its name, name of the building of the course location, the start date, the name of the course before it, and the name of the course after it, access level of the building, and the assignable area of the room used for the course, sorted by the ascending order start date and course name.",
    "gold-sql": "SELECT ccso.subject_title, fb.BUILDING_NAME_LONG AS building_name, at.TERM_START_DATE AS term_start_date, lag(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS previous_subject_title, lead(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS next_subject_title, fb.ACCESS_LEVEL_NAME AS access_level, fr.AREA AS room_assignable_area FROM ( SELECT DISTINCT subject_id, subject_title, effective_term_code, meet_place FROM COURSE_CATALOG_SUBJECT_OFFERED ) ccso JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ccso.effective_term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC;",
    "options": "",
    "oracle_sql": "SELECT ccso.subject_title, fb.BUILDING_NAME_LONG AS building_name, at.TERM_START_DATE AS term_start_date, lag(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS previous_subject_title, lead(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS next_subject_title, fb.ACCESS_LEVEL_NAME AS access_level, fr.AREA AS room_assignable_area FROM ( SELECT DISTINCT subject_id, subject_title, effective_term_code, meet_place FROM COURSE_CATALOG_SUBJECT_OFFERED ) ccso JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ccso.effective_term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC;",
    "question": "",
    "sql": "",
    "question_basic": "What are the subject titles, building names, term start dates, previous subject titles, next subject titles, access levels, and room assignable areas for courses offered? The results are ordered by term start date and subject title in ascending order."
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each room, list its associated building name, floor number, room number, ownership type, organization name, number of rooms, area, and percentage of area relative to the building. Include subtotals across floors, subtotals across all floors for each building, and a grand total across all buildings. For the subtotal for each building and the grand total, the percentage of area should be relative to area of all buildings. All numeric values should be rounded to integers and formatted using commas as thousands separators except the relative percentages which should be rounded to two decimal places.",
    "gold-sql": "SELECT Building_Name, FLOOR, Room, OWNERSHIP_TYPE, Organization_Name, FORMAT(Total_Rooms, 0) AS Total_Rooms, FORMAT(Total_Area, 0) AS Total_Area, Percent_Of_Total FROM (SELECT 0 AS SortOrder, NULL AS Building_Name, NULL AS FLOOR, NULL AS Room, NULL AS OWNERSHIP_TYPE, NULL AS Organization_Name, SUM(Total_Rooms) AS Total_Rooms, SUM(Total_Area) AS Total_Area, 100 AS Percent_Of_Total FROM (SELECT b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Total_Rooms, SUM(r.AREA) AS Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name, (SELECT SUM(r2.AREA) FROM FCLT_ROOMS r2 JOIN FCLT_FLOOR f2 ON r2.FCLT_FLOOR_KEY = f2.FCLT_FLOOR_KEY WHERE f2.FCLT_BUILDING_KEY = f.FCLT_BUILDING_KEY) AS Building_Total_Area, (SELECT SUM(r3.AREA) FROM FCLT_ROOMS r3) AS Overall_Total_Area FROM FCLT_FLOOR f LEFT JOIN FCLT_ROOMS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY LEFT JOIN FCLT_BUILDING b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME, f.FCLT_BUILDING_KEY) AS FloorStats WHERE Building_Name IS NOT NULL UNION ALL SELECT 1 AS SortOrder, Building_Name, FLOOR, Room, OWNERSHIP_TYPE, Organization_Name, Total_Rooms, Total_Area, CASE WHEN FLOOR IS NOT NULL AND Building_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Building_Total_Area, 2) WHEN FLOOR IS NULL AND Building_Name IS NOT NULL AND Overall_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Overall_Total_Area, 2) ELSE NULL END AS Percent_Of_Total FROM (SELECT b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Total_Rooms, SUM(r.AREA) AS Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name, (SELECT SUM(r2.AREA) FROM FCLT_ROOMS r2 JOIN FCLT_FLOOR f2 ON r2.FCLT_FLOOR_KEY = f2.FCLT_FLOOR_KEY WHERE f2.FCLT_BUILDING_KEY = f.FCLT_BUILDING_KEY) AS Building_Total_Area, (SELECT SUM(r3.AREA) FROM FCLT_ROOMS r3) AS Overall_Total_Area FROM FCLT_FLOOR f LEFT JOIN FCLT_ROOMS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY LEFT JOIN FCLT_BUILDING b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME, f.FCLT_BUILDING_KEY WITH ROLLUP) AS RollupWithPercentages WHERE Building_Name IS NOT NULL) AS AllData ORDER BY SortOrder, Building_Name, FLOOR, Room;",
    "options": "",
    "oracle_sql": "WITH FloorStats AS (SELECT f.FCLT_BUILDING_KEY, b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Room_Count, SUM(r.AREA) AS Total_Floor_Area, SUM(SUM(r.AREA)) OVER (PARTITION BY f.FCLT_BUILDING_KEY) AS Building_Total_Area, SUM(SUM(r.AREA)) OVER () AS Overall_Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name FROM FCLT_FLOOR f LEFT JOIN FCLT_ROOMS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY LEFT JOIN FCLT_BUILDING b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY f.FCLT_BUILDING_KEY, b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME), RollupWithPercentages AS (SELECT Building_Name, FLOOR, CASE WHEN GROUPING(Room) = 0 THEN Room ELSE NULL END AS Room, CASE WHEN GROUPING_ID(Building_Name, FLOOR, Room) > 0 THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, MAX(Organization_Name) AS Organization_Name, SUM(Room_Count) AS Total_Rooms, SUM(Total_Floor_Area) AS Total_Area, MAX(Building_Total_Area) AS Building_Total_Area, MAX(Overall_Total_Area) AS Overall_Total_Area FROM FloorStats GROUP BY ROLLUP(Building_Name, FLOOR, Room), OWNERSHIP_TYPE, Organization_Name), GrandTotal AS (SELECT NULL AS Building_Name, NULL AS FLOOR, NULL AS Room, NULL AS OWNERSHIP_TYPE, NULL AS Organization_Name, SUM(Total_Rooms) AS Total_Rooms, SUM(Total_Area) AS Total_Area, NULL AS Building_Total_Area, MAX(Overall_Total_Area) AS Overall_Total_Area, 0 AS SortOrder, 100 AS Percent_Of_Total FROM RollupWithPercentages WHERE Building_Name IS NOT NULL), AllData AS (SELECT 0 AS SortOrder, Building_Name, FLOOR, Room, NULL AS OWNERSHIP_TYPE, NULL AS Organization_Name, Total_Rooms, Total_Area, Percent_Of_Total FROM GrandTotal UNION ALL SELECT 1 AS SortOrder, Building_Name, FLOOR, Room, CASE WHEN Building_Name IS NOT NULL THEN OWNERSHIP_TYPE ELSE NULL END AS OWNERSHIP_TYPE, Organization_Name, Total_Rooms, Total_Area, CASE WHEN FLOOR IS NOT NULL AND Building_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Building_Total_Area, 2) WHEN FLOOR IS NULL AND Building_Name IS NOT NULL AND Overall_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Overall_Total_Area, 2) ELSE NULL END AS Percent_Of_Total FROM RollupWithPercentages) SELECT Building_Name, FLOOR, Room, OWNERSHIP_TYPE, Organization_Name, TO_CHAR(Total_Rooms, '999,999') AS Total_Rooms, TO_CHAR(Total_Area, '999,999,999') AS Total_Area, Percent_Of_Total FROM AllData ORDER BY SortOrder, Building_Name, FLOOR, Room;",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each term and department, list the term, department, the number of courses, average number of equivalent subjects, the school name, and department phone number. Include subtotals for each term (the corresponding term field is 'SUBTOTAL') and a grand total across all terms (the corresponding term field is 'TOTAL'). Do not repeat the term if it is the same as the previous row. Sort the table by term and department.",
    "gold-sql": "SELECT CASE WHEN LAG(term) OVER (ORDER BY term_sort, term, dept_sort) = term THEN NULL ELSE term END AS term, dept, subcnt, avgeqisub, sd.SCHOOL_NAME AS school_name, ad.DEPARTMENT_PHONE_NUMBER AS department_phone FROM (SELECT CASE WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE TERM_CODE END AS term_sort, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'TOTAL' ELSE TERM_CODE END AS term, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE DEPARTMENT_NAME END AS dept_sort, DEPARTMENT_NAME AS dept, COUNT(DISTINCT SUBJECT_ID) AS subcnt, MIN(MEET_TIME) AS mintime, AVG(CASE WHEN equivalent_subjects IS NULL THEN 0 ELSE 1 + LENGTH(equivalent_subjects) - LENGTH(REPLACE(equivalent_subjects, ',', '')) END) AS avgeqisub FROM COURSE_CATALOG_SUBJECT_OFFERED GROUP BY TERM_CODE, DEPARTMENT_NAME WITH ROLLUP) tbltmp LEFT JOIN SIS_DEPARTMENT sd ON tbltmp.dept = sd.DEPARTMENT_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON sd.DEPARTMENT_CODE = ad.SIS_ADMIN_DEPARTMENT_CODE ORDER BY term_sort, dept_sort;",
    "options": "",
    "oracle_sql": "SELECT CASE WHEN LAG(term) OVER (ORDER BY term_sort, term, dept_sort) = term THEN NULL ELSE term END AS term, dept, subcnt, avgeqisub, sd.SCHOOL_NAME AS school_name, ad.DEPARTMENT_PHONE_NUMBER AS department_phone FROM ( SELECT CASE WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE TERM_CODE END AS term_sort, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'TOTAL' ELSE TERM_CODE END AS term, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE DEPARTMENT_NAME END AS dept_sort, DEPARTMENT_NAME AS dept, COUNT(DISTINCT SUBJECT_ID) AS subcnt, MIN(MEET_TIME) AS mintime, AVG(CASE WHEN equivalent_subjects IS NULL THEN 0 ELSE 1 + LENGTH(equivalent_subjects) - LENGTH(REPLACE(equivalent_subjects, ',', '')) END) AS avgeqisub FROM COURSE_CATALOG_SUBJECT_OFFERED GROUP BY ROLLUP(TERM_CODE, DEPARTMENT_NAME) ) tbltmp LEFT JOIN SIS_DEPARTMENT sd ON tbltmp.dept = sd.DEPARTMENT_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON sd.DEPARTMENT_CODE = ad.SIS_ADMIN_DEPARTMENT_CODE ORDER BY term_sort, dept_sort;",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": true,
    "comment": "Be aware of the filter statements.",
    "db_id": "dw",
    "gold-question": "What is the room, floor, building key, building street address, city, state, and postal code of Professor Summer Haynes's office?",
    "gold-sql": "SELECT DISTINCT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE FROM (SELECT office_location FROM employee_directory WHERE full_name = 'Haynes, Summer') AS emp_office JOIN fac_rooms ON emp_office.office_location = fac_rooms.fac_room_key JOIN fac_building_address ON fac_rooms.building_key = fac_building_address.BUILDING_KEY JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY WHERE fac_building_address.ADDRESS_PURPOSE = 'STREET';",
    "options": [
      "1. Retrieve the room number, floor, building key, building street address, city, state, and postal code for the office location of the employee named Summer Haynes.",
      "2. Select DISTINCT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE from the employee_directory table for the specified employee's office location.",
      "3. Join the necessary tables fac_rooms, fac_building_address, and BUILDINGS based on the office location and building keys to obtain the required details.",
      "4. Filter the results based on the address purpose being 'STREET' to focus on street addresses specifically.",
      "---",
      "1. What are the room number, floor, building key, building street address, city, state, and postal code associated with the office location of the employee named Summer Haynes?",
      "2. Retrieve DISTINCT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE from the employee_directory table for the specified employee.",
      "3. Join the fac_rooms, fac_building_address, and BUILDINGS tables based on the office location and building keys to gather the necessary information.",
      "4. Apply a filter to only include results where the address purpose is designated as 'STREET' for precise location details.",
      "---",
      "1. Show the room number, floor, building key, building street address, city, state, and postal code for the office location of the employee named Summer Haynes.",
      "2. Retrieve DISTINCT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE from the employee_directory table for the specified employee's office.",
      "3. Join the fac_rooms, fac_building_address, and BUILDINGS tables based on the office location and building keys to extract the relevant details.",
      "4. Filter the results based on the address purpose being 'STREET' to focus on street addresses specifically.",
      "---",
      "1. Provide the room number, floor, building key, building street address, city, state, and postal code for the office location of the employee named Summer Haynes.",
      "2. Select DISTINCT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE from the employee_directory table for the specified employee's office.",
      "3. Join the necessary tables fac_rooms, fac_building_address, and BUILDINGS based on the office location and building keys to obtain the required details accurately.",
      "4. Apply a filter to only include results where the address purpose is 'STREET' to focus on street addresses specifically."
    ],
    "oracle_sql": "SELECT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE FROM (SELECT office_location FROM employee_directory WHERE full_name = 'Haynes, Summer') JOIN fac_rooms on office_location = fac_room_key JOIN fac_building_address on fac_rooms.building_key = fac_building_address.BUILDING_KEY JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY where fac_building_address.ADDRESS_PURPOSE = 'STREET';",
    "question": "1. Retrieve the room number, floor, building key, building street address, city, state, and postal code for the office location of the employee named Summer Haynes.",
    "sql": "",
    "question_basic": "What is the room number, floor, building key, street address, city, state, and postal code for the office location of the employee named 'Haynes, Summer'?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each term code, list the term description, attribute desciption, department name, school name, and the number of subjects in the area of humanities, arts and social sciences.",
    "gold-sql": "SELECT ata.TERM_DESCRIPTION, ccso.HASS_ATTRIBUTE_DESC, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, (SELECT COUNT(DISTINCT ccso2.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED ccso2 JOIN CIS_HASS_ATTRIBUTE cha2 ON ccso2.HASS_ATTRIBUTE = cha2.HASS_ATTRIBUTE WHERE ccso2.TERM_CODE = ata.TERM_CODE AND cha2.CIS_ATTRIBUTE_GROUP = cha.CIS_ATTRIBUTE_GROUP) AS Total_Subjects FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN CIS_HASS_ATTRIBUTE cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE JOIN SIS_DEPARTMENT sd ON ccso.DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN ACADEMIC_TERMS_ALL ata ON ccso.TERM_CODE = ata.TERM_CODE WHERE cha.CIS_ATTRIBUTE_GROUP = 'H';",
    "options": "",
    "oracle_sql": "SELECT ata.TERM_DESCRIPTION, ccso.HASS_ATTRIBUTE_DESC, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY ata.TERM_CODE, cha.CIS_ATTRIBUTE_GROUP) AS Total_Subjects FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN CIS_HASS_ATTRIBUTE cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE JOIN SIS_DEPARTMENT sd ON ccso.DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN ACADEMIC_TERMS_ALL ata ON ccso.TERM_CODE = ata.TERM_CODE WHERE cha.CIS_ATTRIBUTE_GROUP = 'H';",
    "question": "",
    "sql": "",
    "question_basic": "What are the total number of subjects offered in each term for HASS Elective courses, and which departments and schools are they associated with?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "List all buildings with their names, building numbers, building height, street address, city, state, HR department name, assignable square footage, total and average square footage, ordered in descending order of assignable, total, and average square footage.",
    "gold-sql": "SELECT DISTINCT new.BUILDING_NAME, new.BUILDING_NUMBER, fb.BUILDING_HEIGHT, new.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, new.HR_DEPARTMENT_NAME, new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, new.Total_Square_Footage, new.Avg_Square_Footage_Per_Room FROM (SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, SUM(fr.AREA) AS Total_Square_Footage, AVG(fr.AREA) AS Avg_Square_Footage_Per_Room FROM BUILDINGS b JOIN FAC_BUILDING fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE) new JOIN FAC_BUILDING_ADDRESS fba ON new.FAC_BUILDING_KEY = fba.BUILDING_KEY JOIN FAC_BUILDING fb ON new.FAC_BUILDING_KEY = fb.FAC_BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' ORDER BY new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE DESC, new.Total_Square_Footage DESC, new.Avg_Square_Footage_Per_Room DESC;",
    "options": "",
    "oracle_sql": "SELECT DISTINCT new.BUILDING_NAME, new.BUILDING_NUMBER, fb.BUILDING_HEIGHT, new.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, new.HR_DEPARTMENT_NAME, new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, new.Total_Square_Footage, new.Avg_Square_Footage_Per_Room FROM (SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, SUM(fr.AREA) AS Total_Square_Footage, AVG(fr.AREA) AS Avg_Square_Footage_Per_Room FROM BUILDINGS b JOIN FAC_BUILDING fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE) new JOIN FAC_BUILDING_ADDRESS fba ON new.FAC_BUILDING_KEY = fba.BUILDING_KEY JOIN FAC_BUILDING fb ON new.FAC_BUILDING_KEY = fb.FAC_BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' ORDER BY new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE DESC, new.Total_Square_Footage DESC, new.Avg_Square_Footage_Per_Room DESC;",
    "question": "",
    "sql": "",
    "question_basic": "What are the building details, department names, and square footage statistics for buildings with street addresses in Cambridge, MA? The output includes the building name, number, height, street address, city, state, department name, assignable square footage, total square footage, and average square footage per room. The results are sorted by assignable square footage, total square footage, and average square footage per room in descending order."
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "List each academic year, the term code, and the number of newly introduced subjects in this term. Display the academic year only if it differs from the previous entry. Include a grand total (the corresponding year field should be 'TOTAL') stating the total number of subjects across all academic years.",
    "gold-sql": "SELECT CASE WHEN LAG(ACADEMIC_YEAR) OVER (ORDER BY ata.TERM_CODE) = ACADEMIC_YEAR THEN NULL ELSE ACADEMIC_YEAR END AS ACADEMIC_YEAR, ata.TERM_CODE, COUNT(DISTINCT si) AS distinct_subject_count FROM ACADEMIC_TERMS_ALL ata LEFT OUTER JOIN (SELECT CASE WHEN LAG(subject_id) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = subject_id THEN NULL ELSE subject_id END AS si, CASE WHEN LAG(TERM_CODE) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = TERM_CODE THEN NULL ELSE term_code END AS term_code FROM course_catalog_subject_offered) AS a ON ata.TERM_CODE = a.TERM_CODE GROUP BY ata.TERM_CODE, ACADEMIC_YEAR UNION ALL SELECT 'TOTAL', NULL, COUNT(DISTINCT SUBJECT_ID) AS total_distinct_subject_count FROM course_catalog_subject_offered;",
    "options": "",
    "oracle_sql": "select CASE WHEN Lag(ACADEMIC_YEAR)over (order by ata.TERM_CODE) =ACADEMIC_YEAR THEN NULL ELSE ACADEMIC_YEAR end AS ACADEMIC_YEAR,ata.TERM_CODE, COUNT(distinct si) from ACADEMIC_TERMS_ALL ata LEFT OUTER JOIN (select * from (select CASE WHEN LAG(subject_id) over(ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = subject_id then NULL else subject_id end as si, case when LAG(TERM_CODE) over (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) =TERM_CODE then null else term_code end as term_code from course_catalog_subject_offered) where si is not null) a ON ata.TERM_CODE=a.TERM_CODE GROUP BY ata.TERM_CODE, ACADEMIC_YEAR UNION ALL SELECT 'TOTAL', NULL, COUNT(DISTINCT SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED",
    "question": "",
    "sql": "",
    "question_basic": "What is the count of distinct subjects offered in each academic term?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "List each floor key and department name within the Stata building, as well as the number of rooms, total area, and average area per department on each floor. Include subtotals for each floor and a grand total across all floors. Sort the results by floor key and department name in ascending order. Exclude departments without any rooms in the building. Only the first row of each floor group should include the floor key, and the subtotal and grand total rows should not include floor key or department name. Number of rooms and area should be rounded to integers and formatted using commas as thousands separators.",
    "gold-sql": "SELECT CASE WHEN LAG(FLOOR_KEY) OVER (ORDER BY COALESCE(FAC_FLOOR.FLOOR_SORT_SEQUENCE, 999), flsort, orgname) = FLOOR_KEY THEN NULL ELSE FLOOR_KEY END AS flid2, CASE WHEN orgname = 'zzz' THEN NULL ELSE orgname END AS dept, rmcnt, areasum, area_avg FROM (SELECT FLOOR_KEY AS flsort, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'TOTAL' ELSE FLOOR_KEY END AS flid, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE org.ORGANIZATION_NAME END AS orgname, COUNT(rm.FAC_ROOM_KEY) AS rmcnt, SUM(rm.AREA) AS areasum, AVG(rm.AREA) AS area_avg FROM FAC_ROOMS rm JOIN FCLT_ORGANIZATION org ON rm.ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY JOIN BUILDINGS bu ON rm.BUILDING_KEY = bu.BUILDING_KEY WHERE bu.BUILDING_NAME = 'Ray and Maria Stata Center' GROUP BY FLOOR_KEY, org.ORGANIZATION_NAME WITH ROLLUP ORDER BY flsort, orgname) tbltmp LEFT JOIN FAC_FLOOR ON FLOOR_KEY = flsort;",
    "options": "",
    "oracle_sql": "SELECT CASE WHEN LAG(FLOOR_KEY) OVER (ORDER BY NVL(FAC_FLOOR.FLOOR_SORT_SEQUENCE, 999), flsort, orgname) = FLOOR_KEY THEN NULL ELSE FLOOR_KEY END AS flid2, CASE WHEN orgname = 'zzz' THEN NULL ELSE orgname END AS dept, rmcnt, areasum, area_avg FROM ( SELECT CASE WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE FLOOR_KEY END AS flsort, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'TOTAL' ELSE FLOOR_KEY END AS flid, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE org.ORGANIZATION_NAME END AS orgname, TO_CHAR(COUNT(rm.FAC_ROOM_KEY), '999,999,999') AS rmcnt, TO_CHAR(SUM(rm.AREA), '999,999,999') AS areasum, TO_CHAR(AVG(rm.AREA), '999,999,999') AS area_avg FROM FAC_ROOMS rm JOIN FCLT_ORGANIZATION org ON rm.ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY JOIN BUILDINGS bu ON rm.BUILDING_KEY = bu.BUILDING_KEY WHERE bu.BUILDING_NAME = 'Ray and Maria Stata Center' GROUP BY ROLLUP(FLOOR_KEY, org.ORGANIZATION_NAME) ORDER BY flsort, orgname ) tbltmp LEFT JOIN FAC_FLOOR ON FLOOR_KEY = flsort;",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Show the department names, the corresponding SIS subject code, subject code descriptions, graduate level, and the total number of courses per department.",
    "gold-sql": "SELECT sd.DEPARTMENT_NAME, sc.SUBJECT_CODE, sc.SUBJECT_CODE_DESC, scd.GRADUATE_LEVEL, Total_Courses.Total_Courses FROM SIS_DEPARTMENT sd JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE sc ON scd.COURSE = sc.COURSE_NUMBER JOIN (SELECT sd.DEPARTMENT_NAME, COUNT(DISTINCT COURSE_NUMBER) AS Total_Courses FROM SIS_DEPARTMENT sd JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE sc ON scd.COURSE = sc.COURSE_NUMBER GROUP BY DEPARTMENT_NAME) AS Total_Courses ON sd.DEPARTMENT_NAME = Total_Courses.DEPARTMENT_NAME;",
    "options": "",
    "oracle_sql": "SELECT sd.DEPARTMENT_NAME, sc.SUBJECT_CODE, sc.SUBJECT_CODE_DESC, scd.GRADUATE_LEVEL, COUNT(DISTINCT sc.COURSE_NUMBER) OVER (PARTITION BY sd.DEPARTMENT_NAME) AS Total_Courses FROM SIS_DEPARTMENT sd JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE sc ON scd.COURSE = sc.COURSE_NUMBER;",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For building 36, list all space units, their floor and building name, building street address, their space usage, and the number of organizations and space units on the same building and floor.",
    "gold-sql": "SELECT DISTINCT su.SPACE_UNIT, sf.FLOOR, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, su2.SPACE_USAGE, (SELECT COUNT(DISTINCT fo2.FCLT_ORGANIZATION_KEY) FROM SPACE_UNIT su2 JOIN SPACE_DETAIL sd2 ON su2.SPACE_UNIT_KEY = sd2.SPACE_UNIT_KEY JOIN FCLT_ORGANIZATION fo2 ON fo2.FCLT_ORGANIZATION_KEY = su2.FCLT_ORGANIZATION_KEY WHERE sd2.FLOOR_KEY = sd.FLOOR_KEY AND sd2.BUILDING_KEY = sd.BUILDING_KEY) AS Total_Organizations, (SELECT COUNT(DISTINCT su3.SPACE_UNIT) FROM SPACE_UNIT su3 JOIN SPACE_DETAIL sd3 ON su3.SPACE_UNIT_KEY = sd3.SPACE_UNIT_KEY WHERE sd3.FLOOR_KEY = sd.FLOOR_KEY AND sd3.BUILDING_KEY = sd.BUILDING_KEY) AS Total_Space_Units FROM SPACE_UNIT su JOIN SPACE_DETAIL sd ON su.SPACE_UNIT_KEY = sd.SPACE_UNIT_KEY JOIN SPACE_USAGE su2 ON su2.SPACE_USAGE_KEY = sd.SPACE_USAGE_KEY JOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = sd.BUILDING_KEY JOIN FCLT_ORGANIZATION fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = b.BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' AND b.BUILDING_NUMBER = 36;",
    "options": "",
    "oracle_sql": "SELECT DISTINCT su.SPACE_UNIT, sf.FLOOR, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, su2.SPACE_USAGE, COUNT(DISTINCT fo.FCLT_ORGANIZATION_KEY) OVER (PARTITION BY sd.FLOOR_KEY, sd.BUILDING_KEY) AS Total_Organizations, COUNT(DISTINCT su.SPACE_UNIT) OVER (PARTITION BY sd.FLOOR_KEY, sd.BUILDING_KEY) AS Total_Space_Units FROM SPACE_UNIT su JOIN SPACE_DETAIL sd ON su.SPACE_UNIT_KEY = sd.SPACE_UNIT_KEY JOIN SPACE_USAGE su2 ON su2.SPACE_USAGE_KEY = sd.SPACE_USAGE_KEY JOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = sd.BUILDING_KEY JOIN FCLT_ORGANIZATION fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = b.BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' AND b.BUILDING_NUMBER = '36';",
    "question": "",
    "sql": "",
    "question_basic": "What are the different space units, floors, building names, street addresses, space usages, total organizations, and total space units in the Fairchild Buildings located at 50 VASSAR ST with a building number of 36?"
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each course, list its title, name of the building of the course location, duration (in terms of days), and a running average of the duration (in terms of days) using a window of two preceding and two following courses (partitioned by academic year and sorted by course start date).",
    "gold-sql": "select distinct ccso.subject_title, building_name, ccso.duration, avg(duration) over (partition by ccso.academic_year order by ccso.term_start_date rows between 2 preceding and 2 following) from (select distinct subject_title, term_start_date, term_end_date-term_start_date as duration, cis.academic_year, meet_place from academic_terms join COURSE_CATALOG_SUBJECT_OFFERED cis on cis.effective_term_code=academic_terms.term_code) ccso JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY;",
    "options": "",
    "oracle_sql": "select distinct ccso.subject_title, building_name, ccso.duration, avg(duration) over (partition by ccso.academic_year order by ccso.term_start_date rows between 2 preceding and 2 following) from (select distinct subject_title, term_start_date, term_end_date-term_start_date as duration, cis.academic_year, meet_place from academic_terms join COURSE_CATALOG_SUBJECT_OFFERED cis on cis.effective_term_code=academic_terms.term_code) ccso JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY;",
    "question": "",
    "sql": "",
    "question_basic": "What are the subject titles, building names, durations, and the average duration of courses offered in each academic year? The durations represent the length of each course, while the average duration is calculated based on the durations of the current and surrounding courses within the academic year."
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each building use, list the type, the number of distinct buildings (excluding subdivisions) of this use, the total gross square footage of these buildings, and the number of unique organizations associated with the rooms in these buildings. If the building is used as a residence, display the usage type as \"RESIDENTIAL.\" You should also include a row at the end showing the total number of buildings, the gross square footage, and the number of organizations across all types of building use. All numerical values should be rounded to integers and formatted using commas as thousands separators.",
    "gold-sql": "SELECT * FROM (SELECT CASE WHEN FLOOR.BUILDING_USE = 'RESIDENT' THEN 'RESIDENTIAL' ELSE FLOOR.BUILDING_USE END AS TYPE, COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY WHERE FLOOR.BUILDING_USE IS NOT NULL GROUP BY FLOOR.BUILDING_USE) AS derived_table UNION ALL SELECT NULL AS TYPE, COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY;",
    "options": "",
    "oracle_sql": "SELECT * FROM ( SELECT CASE WHEN FLOOR.BUILDING_USE = 'RESIDENT' THEN 'RESIDENTIAL' ELSE FLOOR.BUILDING_USE END AS TYPE, COUNT(DISTINCT NVL(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, TO_CHAR(SUM(FLOOR.EXT_GROSS_AREA), '999,999,999,999,999') AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY WHERE FLOOR.BUILDING_USE IS NOT NULL GROUP BY FLOOR.BUILDING_USE ) UNION ALL SELECT NULL AS TYPE, COUNT(DISTINCT NVL(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, TO_CHAR(SUM(FLOOR.EXT_GROSS_AREA), '999,999,999,999,999') AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY;",
    "question": "",
    "sql": "",
    "question_basic": "What are the different types of building uses present in the facility, and how many buildings, total gross square footage, and number of organizations are associated with each type?"
  },
  {
    "match_basic": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Retrieve the titles of subjects offered in the summer term along with their descriptions, responsible faculty names, email address, building name, room name, floor level, building street address, and the total number of types of courses per departmnet.",
    "gold-sql": "SELECT ccso.SUBJECT_TITLE, ccso.SUBJECT_DESCRIPTION, ccso.RESPONSIBLE_FACULTY_NAME, ed.EMAIL_ADDRESS, b.BUILDING_NAME, fr.ROOM_FULL_NAME, ff.LEVEL_ID, b.BUILDING_STREET_ADDRESS, (SELECT COUNT(DISTINCT ccso2.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED ccso2 WHERE ccso2.DEPARTMENT_CODE = ccso.DEPARTMENT_CODE) AS Total_Courses FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE JOIN FAC_ROOMS fr ON ccso.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_FLOOR ff ON ff.FLOOR_KEY = fr.FLOOR_KEY JOIN BUILDINGS b ON fr.BUILDING_KEY = b.BUILDING_KEY JOIN FAC_BUILDING_ADDRESS fba ON fba.BUILDING_KEY = fr.BUILDING_KEY WHERE at.TERM_CODE LIKE '%SU' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "options": "",
    "oracle_sql": "SELECT ccso.SUBJECT_TITLE, ccso.SUBJECT_DESCRIPTION, ccso.RESPONSIBLE_FACULTY_NAME, ed.EMAIL_ADDRESS, b.BUILDING_NAME, fr.ROOM_FULL_NAME, ff.LEVEL_ID, b.BUILDING_STREET_ADDRESS, COUNT(DISTINCT ccso.SUBJECT_ID) OVER (PARTITION BY ccso.DEPARTMENT_CODE) AS Total_Courses FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE JOIN FAC_ROOMS fr ON ccso.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_FLOOR ff ON ff.FLOOR_KEY = fr.FLOOR_KEY JOIN BUILDINGS b ON fr.BUILDING_KEY = b.BUILDING_KEY JOIN FAC_BUILDING_ADDRESS fba ON fba.BUILDING_KEY = fr.BUILDING_KEY WHERE at.TERM_CODE LIKE '%SU' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "question": "",
    "sql": "",
    "question_basic": "What are the titles, descriptions, responsible faculty names, email addresses, building names, room names, levels, street addresses, and total number of courses offered for subjects in the current summer term? The output includes details such as the course content, faculty information, and location details for courses like \"Introduction to Operations Management,\" \"Corporate Financial Accounting,\" \"Special Seminar in Management,\" and \"Foundations of Modern Finance.\""
  },
  {
    "match_basic": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each TIP material status, list the total number of unique materials associated with the status, the total number of records associated with the status, and the total student enrollment associated with the status. Any material status with null values should be displayed as 'No material status'. Additionally, include a grand total across all material status (the material status for this row should be displayed as 'Grand Total').",
    "gold-sql": "SELECT COALESCE(material_status, 'Grand Total') AS material_status, num_materials, total_record_count, total_enrollment FROM (SELECT CASE WHEN material_status IS NULL THEN 'No material status' ELSE material_status END AS material_status, COUNT(DISTINCT material_title) AS num_materials, SUM(RECORD_COUNT) AS total_record_count, SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment FROM (SELECT tms.TIP_MATERIAL_STATUS AS material_status, tm.TITLE AS material_title, td.RECORD_COUNT, tso.NUM_ENROLLED_STUDENTS FROM TIP_DETAIL td JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY WHERE td.RECORD_COUNT > 0) MaterialStatusDetails GROUP BY material_status WITH ROLLUP) MaterialStatusAggregates ORDER BY CASE WHEN material_status = 'Grand Total' THEN 1 ELSE 0 END, total_record_count DESC, material_status;",
    "options": "",
    "oracle_sql": "WITH MaterialStatusDetails AS ( SELECT tms.TIP_MATERIAL_STATUS AS material_status, tm.TITLE AS material_title, td.RECORD_COUNT, tso.NUM_ENROLLED_STUDENTS FROM TIP_DETAIL td JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY WHERE td.RECORD_COUNT > 0 ), MaterialStatusAggregates AS ( SELECT CASE WHEN GROUPING(material_status) = 1 THEN NULL WHEN material_status IS NULL THEN 'No material status' ELSE material_status END AS material_status, COUNT(DISTINCT material_title) AS num_materials, SUM(RECORD_COUNT) AS total_record_count, SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment FROM MaterialStatusDetails GROUP BY ROLLUP(material_status) ) SELECT COALESCE(material_status, 'Grand Total') AS material_status, num_materials, total_record_count, total_enrollment FROM MaterialStatusAggregates ORDER BY CASE WHEN material_status = 'Grand Total' THEN 1 ELSE 0 END, total_record_count DESC, material_status;",
    "question": "",
    "sql": ""
  },
  {
    "match_basic": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each department in the library system, list the name of the department, total number of courses using library materials, the number of catalog items associated with those courses, and the average enrollment per course. Include a grand total across all departments (the corresponding department field should be 'Grand Total').",
    "gold-sql": "WITH DepartmentLibraryUsage AS ( SELECT lci.DEPARTMENT, lci.COURSE_NAME, COUNT(DISTINCT lrc.LIBRARY_RESERVE_CATALOG_KEY) AS num_catalog_items, SUM(lso.NUM_ENROLLED_STUDENTS) AS total_students FROM LIBRARY_RESERVE_MATRL_DETAIL lrd JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY WHERE lso.NUM_ENROLLED_STUDENTS > 0 GROUP BY lci.DEPARTMENT, lci.COURSE_NAME ), DepartmentAggregates AS ( SELECT DEPARTMENT, COUNT(DISTINCT COURSE_NAME) AS total_courses, SUM(num_catalog_items) AS total_catalog_items, AVG(total_students) AS avg_students_per_course FROM DepartmentLibraryUsage GROUP BY DEPARTMENT ), GrandTotal AS ( SELECT 'Grand Total' AS DEPARTMENT, SUM(total_courses) AS total_courses, SUM(total_catalog_items) AS total_catalog_items, AVG(avg_students_per_course) AS avg_students_per_course FROM DepartmentAggregates ) SELECT * FROM ( SELECT * FROM GrandTotal UNION ALL SELECT * FROM DepartmentAggregates ) CombinedResults ORDER BY CASE WHEN DEPARTMENT = 'Grand Total' THEN 0 ELSE 1 END, DEPARTMENT;",
    "options": "",
    "oracle_sql": "WITH DepartmentLibraryUsage AS ( SELECT lci.DEPARTMENT, lci.COURSE_NAME, COUNT(DISTINCT lrc.LIBRARY_RESERVE_CATALOG_KEY) AS num_catalog_items, SUM(lso.NUM_ENROLLED_STUDENTS) AS total_students FROM LIBRARY_RESERVE_MATRL_DETAIL lrd JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY WHERE lso.NUM_ENROLLED_STUDENTS > 0 GROUP BY lci.DEPARTMENT, lci.COURSE_NAME ), DepartmentAggregates AS ( SELECT DEPARTMENT, COUNT(DISTINCT COURSE_NAME) AS total_courses, SUM(num_catalog_items) AS total_catalog_items, AVG(total_students) AS avg_students_per_course FROM DepartmentLibraryUsage GROUP BY DEPARTMENT ), GrandTotal AS ( SELECT 'Grand Total' AS DEPARTMENT, SUM(total_courses) AS total_courses, SUM(total_catalog_items) AS total_catalog_items, AVG(avg_students_per_course) AS avg_students_per_course FROM DepartmentAggregates ) SELECT * FROM ( SELECT * FROM GrandTotal UNION ALL SELECT * FROM DepartmentAggregates ) CombinedResults ORDER BY CASE WHEN DEPARTMENT = 'Grand Total' THEN 0 ELSE 1 END, DEPARTMENT;",
    "question": "",
    "sql": "",
    "question_basic": "What is the total number of courses, the total number of catalog items, and the average number of students per course across all departments? How many courses are there in the \"Earth, Atmos & Planetary Sci\" department, with 9 catalog items and an average of 117 students per course? In the \"01 - Civil and Environmental Eng\" department, how many courses, catalog items, and what is the average number of students per course (60.5)?"
  }
]
