[
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Among the mailing lists subscribed by people with physical offices in building 24, provide the name of the most subscribed mailing list and the total number of subscribers.",
    "gold-sql": "WITH MailingListStats AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ed ON mld.MOIRA_LIST_MEMBER = ed.KRB_NAME WHERE ed.OFFICE_LOCATION LIKE '24%' GROUP BY ml.MOIRA_LIST_NAME ), Largest AS ( SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank FROM MailingListStats ) SELECT MAX(CASE WHEN Size_Rank = 1 THEN MOIRA_LIST_NAME END) AS Largest_Mailing_List, MAX(CASE WHEN Size_Rank = 1 THEN Total_Members END) AS Member_Count FROM Largest;",
    "options": [
      "Which mailing list, like \"orange-rabbit,\" has the highest number of unique members, totaling 29 individuals?",
      "What is the name of the mailing list with the most members, such as \"orange-rabbit,\" and how many members are part of this list?",
      "Among all the Moira lists, which one has the largest number of members, like \"orange-rabbit,\" and how many individuals are included in this list?",
      "What is the mailing list that ranks first in terms of the total number of members, with \"orange-rabbit\" having the highest count of 29 members?"
    ],
    "oracle_sql": "WITH MailingListStats AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ed ON mld.MOIRA_LIST_MEMBER = ed.KRB_NAME WHERE ed.OFFICE_LOCATION LIKE '24%' GROUP BY ml.MOIRA_LIST_NAME ), Largest AS ( SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank FROM MailingListStats ) SELECT MAX(CASE WHEN Size_Rank = 1 THEN MOIRA_LIST_NAME END) AS Largest_Mailing_List, MAX(CASE WHEN Size_Rank = 1 THEN Total_Members END) AS Member_Count FROM Largest;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH MailingListStats AS (\n    SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members\n    FROM MOIRA_LIST ml\n    JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY\n    JOIN EMPLOYEE_DIRECTORY ed ON mld.MOIRA_LIST_MEMBER = ed.KRB_NAME\n    WHERE ed.OFFICE_LOCATION LIKE '24%'\n    GROUP BY ml.MOIRA_LIST_NAME\n),\nLargest AS (\n    SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank\n    FROM MailingListStats\n)\nSELECT MAX(CASE WHEN Size_Rank = 1 THEN MOIRA_LIST_NAME END) AS Largest_Mailing_List,\n       MAX(CASE WHEN Size_Rank = 1 THEN Total_Members END) AS Member_Count\nFROM Largest;\n",
    "sql_decomposition": [
      {
        "question": "What are the names of the Moira lists and how many unique members do they have in total? Which Moira list has one member each, such as \"amber-beacon,\" \"amber-bear,\" \"amber-candle-goose,\" \"amber-cherry,\" and \"amber-echo\"?",
        "gold-sql": "SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST AS ml JOIN MOIRA_LIST_DETAIL AS mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY AS ed ON mld.MOIRA_LIST_MEMBER = ed.KRB_NAME WHERE ed.OFFICE_LOCATION LIKE '24%' GROUP BY ml.MOIRA_LIST_NAME",
        "title": "MailingListStats",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the names of the Moira lists and how many unique members do they have in total? Which Moira list has one member each, such as \"amber-beacon,\" \"amber-bear,\" \"amber-candle-goose,\" \"amber-cherry,\" and \"amber-echo\"?",
          "B",
          "Can you list the Moira list names along with the count of distinct members they contain? For instance, which Moira lists like \"amber-beacon,\" \"amber-bear,\" \"amber-candle-goose,\" \"amber-cherry,\" and \"amber-echo\" have one member each?",
          "C",
          "Which Moira lists, such as \"amber-beacon,\" \"amber-bear,\" \"amber-candle-goose,\" \"amber-cherry,\" and \"amber-echo,\" have exactly one unique member each? Provide the names of the lists and the total count of their members.",
          "D",
          "Identify the Moira lists and the corresponding total count of distinct members they have. Specifically, which Moira lists like \"amber-beacon,\" \"amber-bear,\" \"amber-candle-goose,\" \"amber-cherry,\" and \"amber-echo\" each have one member?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the names of the mailing lists along with the total number of members in each list? Additionally, what is the rank of each list based on the total number of members, with the list having the highest number of members ranked first?",
        "gold-sql": "SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank FROM MailingListStats",
        "title": "Largest",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "What are the names of the mailing lists along with the total number of members in each list? Additionally, what is the rank of each list based on the total number of members, with the list having the highest number of members ranked first?",
          "Which mailing lists are listed along with the count of total members in each list? Moreover, how are the lists ranked based on the total number of members, with the list having the highest number of members ranked at the top?",
          "Can you provide a list of mailing lists with their respective total member counts? Furthermore, how are these lists ranked in terms of the total number of members, with the list having the most members ranked first?",
          "What are the names of the mailing lists and their corresponding total member counts? Also, how are these lists prioritized based on the total number of members, with the list having the highest number of members ranked first?"
        ],
        "question_ts_and_es": "What are the names of the mailing lists along with the total number of members in each list? Additionally, what is the rank of each list based on the total number of members, with the list having the highest number of members ranked first?"
      },
      {
        "question": "What is the name and total number of members in the largest mailing list?",
        "gold-sql": "SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank\n    FROM MailingListStats\n)\nSELECT MAX(CASE WHEN Size_Rank = 1 THEN MOIRA_LIST_NAME END) AS Largest_Mailing_List,\n       MAX(CASE WHEN Size_Rank = 1 THEN Total_Members END) AS Member_Count\nFROM Largest;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the name and total number of members in the largest mailing list?",
          "B",
          "Which mailing list has the highest number of members, and how many members does it have?",
          "C",
          "Can you provide the name and total member count of the mailing list with the most members?",
          "D",
          "What is the name and the number of members in the mailing list that ranks first in terms of size?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Which mailing list, like \"orange-rabbit,\" has the highest number of unique members, totaling 29 individuals?"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For students with last names starting with H who are subscribed to mailing list 'beacon-date-date', list the names of the students, the phone numbers of departments they belong to, and the size of the mailing list 'beacon-date-date' that they are subscribed to.",
    "gold-sql": "WITH FilteredMoiraLists AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'beacon-date-date' ), FilteredMoiraListDetails AS ( SELECT mld.MOIRA_LIST_MEMBER, mld.MOIRA_LIST_KEY FROM MOIRA_LIST_DETAIL mld JOIN FilteredMoiraLists fml ON mld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY ), MailingListSizes AS ( SELECT fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME, COUNT(fmld.MOIRA_LIST_MEMBER) AS List_Size FROM FilteredMoiraLists fml JOIN FilteredMoiraListDetails fmld ON fml.MOIRA_LIST_KEY = fmld.MOIRA_LIST_KEY GROUP BY fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME ) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, MLS.List_Size AS List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredMoiraListDetails fmld ON UPPER(se.KRB_NAME) = UPPER(fmld.MOIRA_LIST_MEMBER) JOIN FilteredMoiraLists fml ON fmld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON fml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'H%';",
    "options": [
      "Who are the students with last names starting with 'H', their respective department phone numbers, and the size of the Moira list they are part of?",
      "Which students, along with their department phone numbers, are in a Moira list named 'beacon-date-date' and have last names beginning with 'H'?",
      "Can you provide the names and department phone numbers of students whose last names start with 'H', and indicate the number of members in the Moira list they are associated with?",
      "What are the names and contact numbers of students with last names starting with 'H', and how many members are in the Moira list they are linked to?"
    ],
    "oracle_sql": "WITH FilteredMoiraLists AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'beacon-date-date' ), FilteredMoiraListDetails AS ( SELECT mld.MOIRA_LIST_MEMBER, mld.MOIRA_LIST_KEY FROM MOIRA_LIST_DETAIL mld JOIN FilteredMoiraLists fml ON mld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY ), MailingListSizes AS ( SELECT fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME, COUNT(fmld.MOIRA_LIST_MEMBER) AS List_Size FROM FilteredMoiraLists fml JOIN FilteredMoiraListDetails fmld ON fml.MOIRA_LIST_KEY = fmld.MOIRA_LIST_KEY GROUP BY fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME ) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, MLS.List_Size AS List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredMoiraListDetails fmld ON UPPER(se.KRB_NAME) = UPPER(fmld.MOIRA_LIST_MEMBER) JOIN FilteredMoiraLists fml ON fmld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON fml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'H%';",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH FilteredMoiraLists AS (\n    SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME \n    FROM MOIRA_LIST \n    WHERE MOIRA_LIST_NAME = 'beacon-date-date'\n), \nFilteredMoiraListDetails AS (\n    SELECT mld.MOIRA_LIST_MEMBER, mld.MOIRA_LIST_KEY \n    FROM MOIRA_LIST_DETAIL mld \n    JOIN FilteredMoiraLists fml ON mld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY\n), \nMailingListSizes AS (\n    SELECT fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME, COUNT(fmld.MOIRA_LIST_MEMBER) AS List_Size \n    FROM FilteredMoiraLists fml \n    JOIN FilteredMoiraListDetails fmld ON fml.MOIRA_LIST_KEY = fmld.MOIRA_LIST_KEY \n    GROUP BY fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME\n) \nSELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, MLS.List_Size AS List_Size \nFROM MIT_STUDENT_DIRECTORY msd \nJOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE \nJOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE \nJOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME \nJOIN FilteredMoiraListDetails fmld ON UPPER(se.KRB_NAME) = UPPER(fmld.MOIRA_LIST_MEMBER) \nJOIN FilteredMoiraLists fml ON fmld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY \nJOIN MailingListSizes MLS ON fml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY \nWHERE msd.LAST_NAME LIKE 'H%';",
    "sql_decomposition": [
      {
        "question": "What are the key and name of the Moira list where the name is 'beacon-date-date'?",
        "gold-sql": "SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'beacon-date-date'",
        "title": "FilteredMoiraLists",
        "db_id": "dw",
        "adjusted": "",
        "comment": ""
      },
      {
        "question": "What are the `MOIRA_LIST_MEMBER` and `MOIRA_LIST_KEY` values from the `MOIRA_LIST_DETAIL` table that match the `MOIRA_LIST_KEY` values in the `FilteredMoiraLists` table?",
        "gold-sql": "SELECT mld.MOIRA_LIST_MEMBER, mld.MOIRA_LIST_KEY FROM MOIRA_LIST_DETAIL AS mld JOIN FilteredMoiraLists AS fml ON mld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY",
        "title": "FilteredMoiraListDetails",
        "db_id": "dw",
        "adjusted": "",
        "comment": ""
      },
      {
        "question": "What is the key and name of each Moira list along with the number of members in each list?",
        "gold-sql": "SELECT fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME, COUNT(fmld.MOIRA_LIST_MEMBER) AS List_Size FROM FilteredMoiraLists AS fml JOIN FilteredMoiraListDetails AS fmld ON fml.MOIRA_LIST_KEY = fmld.MOIRA_LIST_KEY GROUP BY fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME",
        "title": "MailingListSizes",
        "db_id": "dw",
        "adjusted": "",
        "comment": ""
      },
      {
        "question": "What are the names and phone numbers of students whose last names start with 'H', along with the size of the Moira list they belong to?",
        "gold-sql": "SELECT fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME, COUNT(fmld.MOIRA_LIST_MEMBER) AS List_Size \n    FROM FilteredMoiraLists fml \n    JOIN FilteredMoiraListDetails fmld ON fml.MOIRA_LIST_KEY = fmld.MOIRA_LIST_KEY \n    GROUP BY fml.MOIRA_LIST_KEY, fml.MOIRA_LIST_NAME\n) \nSELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, MLS.List_Size AS List_Size \nFROM MIT_STUDENT_DIRECTORY msd \nJOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE \nJOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE \nJOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME \nJOIN FilteredMoiraListDetails fmld ON UPPER(se.KRB_NAME) = UPPER(fmld.MOIRA_LIST_MEMBER) \nJOIN FilteredMoiraLists fml ON fmld.MOIRA_LIST_KEY = fml.MOIRA_LIST_KEY \nJOIN MailingListSizes MLS ON fml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY \nWHERE msd.LAST_NAME LIKE 'H%';",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": ""
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Who are the students with last names starting with 'H', their respective department phone numbers, and the size of the Moira list they are part of?"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the email list with name 'date-destiny', list the name of the list, department name, the number of students from the Management department, and the percentage of students who are from the Management department, rounded to two decimal places.",
    "gold-sql": "WITH FilteredList AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'date-destiny' ), FilteredListDetails AS ( SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL mld JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY ) SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) AS MANAGEMENT_STUDENT_COUNT, ROUND( COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) * 100.0 / COUNT(fld.MOIRA_LIST_MEMBER), 2 ) AS MANAGEMENT_STUDENT_PERCENTAGE FROM MIT_STUDENT_DIRECTORY msd JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredListDetails fld ON UPPER(se.KRB_NAME) = UPPER(fld.MOIRA_LIST_MEMBER) JOIN FilteredList ml ON fld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE GROUP BY ml.MOIRA_LIST_NAME;",
    "options": [
      "How many students from the 'Management' department are part of the 'date-destiny' Moira list, and what percentage does this represent?",
      "Which Moira list, such as 'date-destiny', has 2 students from the 'Management' department, making up 20% of the list?",
      "For the Moira list named 'date-destiny', how many students from the 'Management' department are included, and what proportion does this group represent?",
      "What is the name of the Moira list that includes 2 students from the 'Management' department, accounting for 20% of the total list members?"
    ],
    "oracle_sql": "WITH FilteredList AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'date-destiny' ), FilteredListDetails AS ( SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL mld JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY ) SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) AS MANAGEMENT_STUDENT_COUNT, ROUND( COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) * 100.0 / COUNT(fld.MOIRA_LIST_MEMBER), 2 ) AS MANAGEMENT_STUDENT_PERCENTAGE FROM MIT_STUDENT_DIRECTORY msd JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN FilteredListDetails fld ON UPPER(se.KRB_NAME) = UPPER(fld.MOIRA_LIST_MEMBER) JOIN FilteredList ml ON fld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE GROUP BY ml.MOIRA_LIST_NAME;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH FilteredList AS (\n    SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME \n    FROM MOIRA_LIST \n    WHERE MOIRA_LIST_NAME = 'date-destiny'\n), \nFilteredListDetails AS (\n    SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER \n    FROM MOIRA_LIST_DETAIL mld \n    JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY\n)\nSELECT ml.MOIRA_LIST_NAME, \n    COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) AS MANAGEMENT_STUDENT_COUNT, \n    ROUND(COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) * 100.0 / COUNT(fld.MOIRA_LIST_MEMBER), 2) AS MANAGEMENT_STUDENT_PERCENTAGE \nFROM MIT_STUDENT_DIRECTORY msd \nJOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME \nJOIN FilteredListDetails fld ON UPPER(se.KRB_NAME) = UPPER(fld.MOIRA_LIST_MEMBER) \nJOIN FilteredList ml ON fld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY \nLEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE \nGROUP BY ml.MOIRA_LIST_NAME;\n",
    "sql_decomposition": [
      {
        "question": "What is the MOIRA_LIST_KEY and MOIRA_LIST_NAME for the entry with the MOIRA_LIST_NAME as 'date-destiny' in the MOIRA_LIST table?",
        "gold-sql": "SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'date-destiny'",
        "title": "FilteredList",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the MOIRA_LIST_KEY and MOIRA_LIST_NAME for the entry with the MOIRA_LIST_NAME as 'date-destiny' in the MOIRA_LIST table?",
          "B",
          "Which MOIRA_LIST_KEY corresponds to the MOIRA_LIST_NAME 'date-destiny' in the MOIRA_LIST table?",
          "C",
          "Can you provide the MOIRA_LIST_KEY and MOIRA_LIST_NAME for the record where MOIRA_LIST_NAME is 'date-destiny' in the MOIRA_LIST table?",
          "D",
          "What are the MOIRA_LIST_KEY and MOIRA_LIST_NAME values for the entry with the name 'date-destiny' in the MOIRA_LIST table?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** values from the **MOIRA_LIST_DETAIL** table that match with the **FilteredList** table?",
        "gold-sql": "SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL AS mld JOIN FilteredList AS fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY",
        "title": "FilteredListDetails",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** values from the **MOIRA_LIST_DETAIL** table that match with the **FilteredList** table?",
          "B",
          "Retrieve the **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** columns from the **MOIRA_LIST_DETAIL** table that correspond to the entries in the **FilteredList** table.",
          "C",
          "Which **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** values from the **MOIRA_LIST_DETAIL** table are linked to the **FilteredList** table?",
          "D",
          "List the **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** values from the **MOIRA_LIST_DETAIL** table that have a matching entry in the **FilteredList** table."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the name of each Moira list along with the count and percentage of students belonging to the 'Management' department in each list?",
        "gold-sql": "SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER \n    FROM MOIRA_LIST_DETAIL mld \n    JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY\n)\nSELECT ml.MOIRA_LIST_NAME, \n    COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) AS MANAGEMENT_STUDENT_COUNT, \n    ROUND(COUNT(CASE WHEN UPPER(ad.SIS_ADMIN_DEPARTMENT_NAME) = 'MANAGEMENT' THEN 1 ELSE NULL END) * 100.0 / COUNT(fld.MOIRA_LIST_MEMBER), 2) AS MANAGEMENT_STUDENT_PERCENTAGE \nFROM MIT_STUDENT_DIRECTORY msd \nJOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME \nJOIN FilteredListDetails fld ON UPPER(se.KRB_NAME) = UPPER(fld.MOIRA_LIST_MEMBER) \nJOIN FilteredList ml ON fld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY \nLEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE \nGROUP BY ml.MOIRA_LIST_NAME;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the name of each Moira list along with the count and percentage of students belonging to the 'Management' department in each list?",
          "B",
          "How many students in each Moira list are from the 'Management' department, and what percentage of the total students in the list do they represent?",
          "C",
          "For each Moira list, what is the count and percentage of students who belong to the 'Management' department?",
          "D",
          "Which Moira lists have students from the 'Management' department, and what is the percentage of these students in each list?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "How many students from the 'Management' department are part of the 'date-destiny' Moira list, and what percentage does this represent?"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "List the name, number, construction date, and type of all buildings, along with the count of addresses associated with each building, the average gross area of the buildings, and the total number of rooms in each building. Sort the results by building name.",
    "gold-sql": "SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE, COUNT(a.BUILDING_ADDRESS_KEY) AS ADDRESS_COUNT, AVG(b.EXT_GROSS_AREA) AS AVG_GROSS_AREA, COUNT(r.FAC_ROOM_KEY) AS TOTAL_ROOMS FROM FAC_BUILDING b JOIN FAC_BUILDING_ADDRESS a ON b.FAC_BUILDING_KEY = a.BUILDING_KEY JOIN FAC_ROOMS r ON b.FAC_BUILDING_KEY = r.BUILDING_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE ORDER BY b.BUILDING_NAME;",
    "options": [
      "A",
      "What are the building details such as name, number, date built, and type along with the count of addresses, average gross area, and total rooms for each building? Can you list the buildings in ascending order by name?",
      "B",
      "Could you provide the building name, number, date built, and type, along with the count of addresses, average gross area, and total rooms for each building? How many rooms are there on average in these buildings, and can you sort the results by building name?",
      "C",
      "How many addresses are associated with each building, and what is the average gross area and total number of rooms for each building? Can you display the buildings sorted alphabetically by name?",
      "D",
      "What is the count of addresses, average gross area, and total rooms for each building, along with their name, number, date built, and type? Is it possible to arrange the output by building name?"
    ],
    "oracle_sql": "SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE, COUNT(a.BUILDING_ADDRESS_KEY) AS ADDRESS_COUNT, AVG(b.EXT_GROSS_AREA) AS AVG_GROSS_AREA, COUNT(r.FAC_ROOM_KEY) AS TOTAL_ROOMS FROM FAC_BUILDING b JOIN FAC_BUILDING_ADDRESS a ON b.FAC_BUILDING_KEY = a.BUILDING_KEY JOIN FAC_ROOMS r ON b.FAC_BUILDING_KEY = r.BUILDING_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.DATE_BUILT, b.BUILDING_TYPE ORDER BY b.BUILDING_NAME;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For subjects offered this year in either the Fall or Spring term, list its department name, school name, subject ID, subject title, course level, total units, the term it is offered ('Spring' for Spring term and 'Fall' for Fall term), term description, the number of distinct instructors teaching in the Fall, and the number of distinct instructors teaching in the Spring.",
    "gold-sql": "WITH SubjectsByTerm AS ( SELECT cc.SUBJECT_ID, cc.SUBJECT_TITLE, cc.TOTAL_UNITS, cc.DEPARTMENT_NAME, CASE WHEN cc.TERM_CODE LIKE '%FA' THEN 'Fall' WHEN cc.TERM_CODE LIKE '%SP' THEN 'Spring' END AS offered_term, at.TERM_DESCRIPTION AS term_description, sd.SCHOOL_NAME, scd.COURSE_LEVEL, cc.FALL_INSTRUCTORS, cc.SPRING_INSTRUCTORS FROM COURSE_CATALOG_SUBJECT_OFFERED cc JOIN ACADEMIC_TERMS at ON cc.TERM_CODE = at.TERM_CODE LEFT JOIN SIS_DEPARTMENT sd ON cc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE LEFT JOIN SIS_COURSE_DESCRIPTION scd ON cc.SUBJECT_CODE = scd.COURSE WHERE cc.IS_OFFERED_THIS_YEAR = 'Y' AND (cc.TERM_CODE LIKE '%FA' OR cc.TERM_CODE LIKE '%SP') ), SubjectsAggregated AS ( SELECT SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors FROM SubjectsByTerm GROUP BY SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description ) SELECT DEPARTMENT_NAME, SCHOOL_NAME, SUBJECT_ID, SUBJECT_TITLE, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, num_fall_instructors, num_spring_instructors FROM SubjectsAggregated ORDER BY DEPARTMENT_NAME, SUBJECT_ID, SUBJECT_TITLE, offered_term;",
    "options": [
      "What are the department names, school names, subject IDs, subject titles, course levels, total units, offered terms, term descriptions, number of fall instructors, and number of spring instructors for each subject, sorted by department name, subject ID, subject title, and offered term?",
      "How many distinct fall and spring instructors are associated with each subject, along with their department names, school names, subject IDs, subject titles, course levels, total units, offered terms, and term descriptions?",
      "Which subjects have been offered in both Fall and Spring terms, and how many fall and spring instructors are associated with each subject, considering their department names, school names, subject IDs, subject titles, course levels, total units, offered terms, and term descriptions?",
      "For courses offered in the Fall or Spring terms, what are the department names, school names, subject IDs, subject titles, course levels, total units, offered terms, term descriptions, number of fall instructors, and number of spring instructors for each subject?"
    ],
    "oracle_sql": "WITH SubjectsByTerm AS ( SELECT cc.SUBJECT_ID, cc.SUBJECT_TITLE, cc.TOTAL_UNITS, cc.DEPARTMENT_NAME, CASE WHEN cc.TERM_CODE LIKE '%FA' THEN 'Fall' WHEN cc.TERM_CODE LIKE '%SP' THEN 'Spring' END AS offered_term, at.TERM_DESCRIPTION AS term_description, sd.SCHOOL_NAME, scd.COURSE_LEVEL, cc.FALL_INSTRUCTORS, cc.SPRING_INSTRUCTORS FROM COURSE_CATALOG_SUBJECT_OFFERED cc JOIN ACADEMIC_TERMS at ON cc.TERM_CODE = at.TERM_CODE LEFT JOIN SIS_DEPARTMENT sd ON cc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE LEFT JOIN SIS_COURSE_DESCRIPTION scd ON cc.SUBJECT_CODE = scd.COURSE WHERE cc.IS_OFFERED_THIS_YEAR = 'Y' AND (cc.TERM_CODE LIKE '%FA' OR cc.TERM_CODE LIKE '%SP') ), SubjectsAggregated AS ( SELECT SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors FROM SubjectsByTerm GROUP BY SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description ) SELECT DEPARTMENT_NAME, SCHOOL_NAME, SUBJECT_ID, SUBJECT_TITLE, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, num_fall_instructors, num_spring_instructors FROM SubjectsAggregated ORDER BY DEPARTMENT_NAME, SUBJECT_ID, SUBJECT_TITLE, offered_term;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "What are the department names, school names, subject IDs, and subject titles of courses offered in the Fall or Spring terms? Include the course level, total units, term description, and the number of instructors for both Fall and Spring terms.",
    "sql_in_cte": "WITH SubjectsByTerm AS (\n    SELECT \n        cc.SUBJECT_ID, \n        cc.SUBJECT_TITLE, \n        cc.TOTAL_UNITS, \n        cc.DEPARTMENT_NAME, \n        CASE \n            WHEN cc.TERM_CODE LIKE '%FA' THEN 'Fall' \n            WHEN cc.TERM_CODE LIKE '%SP' THEN 'Spring' \n        END AS offered_term, \n        at.TERM_DESCRIPTION AS term_description, \n        sd.SCHOOL_NAME, \n        scd.COURSE_LEVEL, \n        cc.FALL_INSTRUCTORS, \n        cc.SPRING_INSTRUCTORS \n    FROM \n        COURSE_CATALOG_SUBJECT_OFFERED cc \n        JOIN ACADEMIC_TERMS at ON cc.TERM_CODE = at.TERM_CODE \n        LEFT JOIN SIS_DEPARTMENT sd ON cc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE \n        LEFT JOIN SIS_COURSE_DESCRIPTION scd ON cc.SUBJECT_CODE = scd.COURSE \n    WHERE \n        cc.IS_OFFERED_THIS_YEAR = 'Y' \n        AND (cc.TERM_CODE LIKE '%FA' OR cc.TERM_CODE LIKE '%SP')\n), \nSubjectsAggregated AS (\n    SELECT \n        SUBJECT_ID, \n        SUBJECT_TITLE, \n        DEPARTMENT_NAME, \n        SCHOOL_NAME, \n        COURSE_LEVEL, \n        TOTAL_UNITS, \n        offered_term, \n        term_description, \n        COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, \n        COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors \n    FROM \n        SubjectsByTerm \n    GROUP BY \n        SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description\n) \nSELECT \n    DEPARTMENT_NAME, \n    SCHOOL_NAME, \n    SUBJECT_ID, \n    SUBJECT_TITLE, \n    COURSE_LEVEL, \n    TOTAL_UNITS, \n    offered_term, \n    term_description, \n    num_fall_instructors, \n    num_spring_instructors \nFROM \n    SubjectsAggregated \nORDER BY \n    DEPARTMENT_NAME, SUBJECT_ID, SUBJECT_TITLE, offered_term;\n",
    "sql_decomposition": [
      {
        "question": "What are the **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors** for courses offered in the **Fall** or **Spring** terms? The output includes details such as the **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors** for each course.",
        "gold-sql": "SELECT cc.SUBJECT_ID, cc.SUBJECT_TITLE, cc.TOTAL_UNITS, cc.DEPARTMENT_NAME, CASE WHEN cc.TERM_CODE LIKE '%FA' THEN 'Fall' WHEN cc.TERM_CODE LIKE '%SP' THEN 'Spring' END AS offered_term, at.TERM_DESCRIPTION AS term_description, sd.SCHOOL_NAME, scd.COURSE_LEVEL, cc.FALL_INSTRUCTORS, cc.SPRING_INSTRUCTORS FROM COURSE_CATALOG_SUBJECT_OFFERED AS cc JOIN ACADEMIC_TERMS AS at ON cc.TERM_CODE = at.TERM_CODE LEFT JOIN SIS_DEPARTMENT AS sd ON cc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE LEFT JOIN SIS_COURSE_DESCRIPTION AS scd ON cc.SUBJECT_CODE = scd.COURSE WHERE cc.IS_OFFERED_THIS_YEAR = 'Y' AND (cc.TERM_CODE LIKE '%FA' OR cc.TERM_CODE LIKE '%SP')",
        "title": "SubjectsByTerm",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors** for courses offered in the **Fall** or **Spring** terms? The output includes details such as the **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors** for each course.",
          "B",
          "Can you provide a list of courses with details like **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors** for courses offered in the **Fall** or **Spring** terms? The output displays information such as the **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors** for each course.",
          "C",
          "Which courses have been offered in the **Fall** or **Spring** terms, and what are their **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors**? The result includes details like the **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors** for each course.",
          "D",
          "Provide a summary of courses offered in the **Fall** or **Spring** terms, including information such as **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors**. The output lists details like the **subject ID**, **subject title**, **total units**, **department name**, **offered term**, **term description**, **school name**, **course level**, **fall instructors**, and **spring instructors** for each course."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique subject IDs, titles, department names, school names, course levels, total units, offered terms, term descriptions, and the number of distinct fall and spring instructors for each subject in the SubjectsByTerm table?",
        "gold-sql": "SELECT SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors FROM SubjectsByTerm GROUP BY SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description",
        "title": "SubjectsAggregated",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique subject IDs, titles, department names, school names, course levels, total units, offered terms, term descriptions, and the number of distinct fall and spring instructors for each subject in the SubjectsByTerm table?",
          "B",
          "How many different fall and spring instructors are associated with each subject, along with their subject ID, title, department name, school name, course level, total units, offered term, and term description in the SubjectsByTerm table?",
          "C",
          "Can you provide a breakdown of the subject IDs, titles, department names, school names, course levels, total units, offered terms, and term descriptions, along with the counts of distinct fall and spring instructors for each subject in the SubjectsByTerm table?",
          "D",
          "What is the distribution of subject IDs, titles, department names, school names, course levels, total units, offered terms, and term descriptions, including the number of unique fall and spring instructors for each subject in the SubjectsByTerm table?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the department name, school name, subject ID, subject title, course level, total units, offered term, term description, number of fall instructors, and number of spring instructors for each subject? The results are sorted by department name, subject ID, subject title, and offered term.",
        "gold-sql": "SELECT \n        SUBJECT_ID, \n        SUBJECT_TITLE, \n        DEPARTMENT_NAME, \n        SCHOOL_NAME, \n        COURSE_LEVEL, \n        TOTAL_UNITS, \n        offered_term, \n        term_description, \n        COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, \n        COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors \n    FROM \n        SubjectsByTerm \n    GROUP BY \n        SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description\n) \nSELECT \n    DEPARTMENT_NAME, \n    SCHOOL_NAME, \n    SUBJECT_ID, \n    SUBJECT_TITLE, \n    COURSE_LEVEL, \n    TOTAL_UNITS, \n    offered_term, \n    term_description, \n    num_fall_instructors, \n    num_spring_instructors \nFROM \n    SubjectsAggregated \nORDER BY \n    DEPARTMENT_NAME, SUBJECT_ID, SUBJECT_TITLE, offered_term;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the department name, school name, subject ID, subject title, course level, total units, offered term, term description, number of fall instructors, and number of spring instructors for each subject? The results are sorted by department name, subject ID, subject title, and offered term.",
          "B",
          "How many fall and spring instructors are associated with each subject, along with details like department name, school name, subject ID, subject title, course level, total units, offered term, and term description? The output is organized by department name, subject ID, subject title, and offered term.",
          "C",
          "Can you provide a list of subjects with their corresponding department name, school name, subject ID, subject title, course level, total units, offered term, term description, number of fall instructors, and number of spring instructors? The results are ordered by department name, subject ID, subject title, and offered term.",
          "D",
          "What is the breakdown of fall and spring instructors for each subject, including details such as department name, school name, subject ID, subject title, course level, total units, offered term, and term description? The data is sorted by department name, subject ID, subject title, and offered term."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "For courses offered in the Fall or Spring terms, what are the department names, school names, subject IDs, subject titles, course levels, total units, offered terms, term descriptions, number of fall instructors, and number of spring instructors for each subject?"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What are the different schools and departments that offer SIS courses? List their school code, school name, department code, department name, the total number of phone numbers, and the most common course level.",
    "gold-sql": "SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME, COUNT(DISTINCT sad.DEPARTMENT_PHONE_NUMBER) AS Total_Phone_Numbers, CASE WHEN SUM(CASE WHEN scd.COURSE_LEVEL = 'U' THEN 1 ELSE 0 END) >= SUM(CASE WHEN scd.COURSE_LEVEL = 'G' THEN 1 ELSE 0 END) THEN 'U' ELSE 'G' END AS Most_Common_Course_Level FROM SIS_ADMIN_DEPARTMENT sad JOIN SIS_DEPARTMENT sd ON sad.SIS_ADMIN_DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME;",
    "options": [
      "A",
      "What are the **school code**, **school name**, **department code**, **SIS admin department name**, **total phone numbers** for each department, and the **most common course level** (undergraduate or graduate) for each school in the output?",
      "B",
      "Can you show me the **school code**, **school name**, **department code**, **SIS admin department name**, **total number of unique phone numbers** for each department, and the **dominant course level** (undergraduate or graduate) for each school?",
      "C",
      "How many **unique phone numbers** are associated with each department, and what is the **most prevalent course level** (undergraduate or graduate) for each school based on the **school code**, **school name**, **department code**, and **SIS admin department name**?",
      "D",
      "Provide a list of **school codes**, **school names**, **department codes**, **SIS admin department names**, the **total count of unique phone numbers** for each department, and the **predominant course level** (undergraduate or graduate) for each school."
    ],
    "oracle_sql": "SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME, COUNT(DISTINCT sad.DEPARTMENT_PHONE_NUMBER) AS Total_Phone_Numbers, CASE WHEN SUM(CASE WHEN scd.COURSE_LEVEL = 'U' THEN 1 ELSE 0 END) >= SUM(CASE WHEN scd.COURSE_LEVEL = 'G' THEN 1 ELSE 0 END) THEN 'U' ELSE 'G' END AS Most_Common_Course_Level FROM SIS_ADMIN_DEPARTMENT sad JOIN SIS_DEPARTMENT sd ON sad.SIS_ADMIN_DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME;",
    "question": "What are the school code, school name, department code, admin department name, total unique phone numbers, and the most common course level among departments based on the SIS admin department, department, course description, and subject code tables?",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What are the academic year, and instructors names for courses offered in the academic year 2022, along with the total number of types of courses per instructor?",
    "gold-sql": "SELECT ata.ACADEMIC_YEAR, ed.FULL_NAME, COUNT(distinct so.COURSE_NUMBER) AS Total_Courses FROM SUBJECT_OFFERED so JOIN ACADEMIC_TERMS_ALL ata ON so.TERM_CODE = ata.TERM_CODE JOIN EMPLOYEE_DIRECTORY ed ON so.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID WHERE ata.ACADEMIC_YEAR = 2022 GROUP BY ata.ACADEMIC_YEAR, ed.FULL_NAME;",
    "options": [
      "A",
      "What is the total number of courses taught by each faculty member for the academic year 2022? Display the academic year, full name of the faculty member, and the total number of distinct course numbers they are responsible for teaching.",
      "B",
      "How many unique courses are assigned to each faculty member for the academic year 2022? List the academic year, full name of the faculty member, and the count of distinct course numbers they are responsible for.",
      "C",
      "Which faculty members are responsible for teaching courses in the academic year 2022, and how many unique courses does each faculty member teach? Provide the academic year, full name of the faculty member, and the total count of distinct course numbers they are responsible for.",
      "D",
      "For the academic year 2022, what is the distribution of unique courses among faculty members? Show the academic year, full name of each faculty member, and the total count of distinct course numbers they teach."
    ],
    "oracle_sql": "SELECT ata.ACADEMIC_YEAR, ed.FULL_NAME, COUNT(distinct so.COURSE_NUMBER) AS Total_Courses FROM SUBJECT_OFFERED so JOIN ACADEMIC_TERMS_ALL ata ON so.TERM_CODE = ata.TERM_CODE JOIN EMPLOYEE_DIRECTORY ed ON so.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID WHERE ata.ACADEMIC_YEAR = 2022 GROUP BY ata.ACADEMIC_YEAR, ed.FULL_NAME;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What is the term description, whether the term is current or not, total number of types of TIP subjects offered and materials needed, the minimum and maximum number of enrolled students, the total number of schools offering subjects, and the total number of records for each term code?",
    "gold-sql": "SELECT at.TERM_DESCRIPTION, at.IS_CURRENT_TERM, COUNT(DISTINCT tso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT tm.ISBN) AS Total_Materials, MIN(tso.NUM_ENROLLED_STUDENTS) AS Min_Enrolled_Students, MAX(tso.NUM_ENROLLED_STUDENTS) AS Max_Enrolled_Students, COUNT(DISTINCT OFFER_SCHOOL_NAME) AS Total_Num_Schools, SUM(td.RECORD_COUNT) AS Total_Records FROM ACADEMIC_TERMS_ALL at LEFT OUTER JOIN TIP_SUBJECT_OFFERED tso ON at.TERM_CODE = tso.TERM_CODE JOIN TIP_DETAIL td ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM;",
    "options": [
      "A",
      "What are the total number of courses, materials, schools, and records for each academic term? Can you provide the term description, current term status, and the range of enrolled students for each term in the output?",
      "B",
      "How many courses, materials, schools, and records are associated with each academic term? Show the term description, current term status, and the minimum and maximum number of enrolled students for each term.",
      "C",
      "Could you display the term description, current term status, and the counts of courses, materials, schools, and records for every academic term? Additionally, include the range of enrolled students (minimum and maximum) for each term.",
      "D",
      "For every academic term, what is the total count of courses, materials, schools, and records? Include details such as term description, current term status, and the minimum and maximum number of enrolled students for each term."
    ],
    "oracle_sql": "SELECT at.TERM_DESCRIPTION, at.IS_CURRENT_TERM, COUNT(DISTINCT tso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT tm.ISBN) AS Total_Materials, MIN(tso.NUM_ENROLLED_STUDENTS) AS Min_Enrolled_Students, MAX(tso.NUM_ENROLLED_STUDENTS) AS Max_Enrolled_Students, COUNT(DISTINCT OFFER_SCHOOL_NAME) AS Total_Num_Schools, SUM(td.RECORD_COUNT) AS Total_Records FROM ACADEMIC_TERMS_ALL at LEFT OUTER JOIN TIP_SUBJECT_OFFERED tso ON at.TERM_CODE = tso.TERM_CODE JOIN TIP_DETAIL td ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": false,
    "comment": "is earliest or latest dat wrong?",
    "db_id": "dw",
    "gold-question": "For each financial aid year and academic year, list the number of fiscal periods, quarters, the start term date, the end term date, and number of distinct department-level term parameters.",
    "gold-sql": "WITH FinancialAidDetails AS ( SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.ACADEMIC_YEAR, at.FINANCIAL_AID_YEAR, td.START_DATE AS Term_Start_Date, td.END_DATE AS Term_End_Date, tm.FISCAL_PERIOD, tm.FISCAL_YEAR, tq.FY_QUARTER_CODE, tp.TERM_PARAMETER AS Dept_Term_Param FROM ACADEMIC_TERMS at JOIN TIME_DAY td ON at.TERM_START_DATE = td.CALENDAR_DATE JOIN TIME_MONTH tm ON td.FISCAL_PERIOD = tm.FISCAL_PERIOD AND td.FISCAL_YEAR = tm.FISCAL_YEAR JOIN TIME_QUARTER tq ON tm.FISCAL_YEAR = tq.FISCAL_YEAR AND tm.FY_QUARTER_CODE = tq.FY_QUARTER_CODE LEFT JOIN ACADEMIC_TERM_PARAMETER tp ON at.TERM_CODE = tp.TERM_CODE WHERE at.FINANCIAL_AID_YEAR IS NOT NULL ) SELECT FINANCIAL_AID_YEAR, ACADEMIC_YEAR, COUNT(DISTINCT FISCAL_PERIOD) AS Total_Fiscal_Periods, COUNT(DISTINCT FY_QUARTER_CODE) AS Total_Quarters, MIN(Term_Start_Date) AS First_Term_Start_Date, MAX(Term_End_Date) AS Last_Term_End_Date, COUNT(DISTINCT Dept_Term_Param) AS Distinct_Term_Params FROM FinancialAidDetails GROUP BY FINANCIAL_AID_YEAR, ACADEMIC_YEAR ORDER BY FINANCIAL_AID_YEAR DESC, ACADEMIC_YEAR ASC;",
    "options": [
      "For each financial aid year and academic year, how many unique fiscal periods are there, how many distinct fiscal year quarter codes exist, what is the earliest term start date, the latest term end date, and how many distinct departmental term parameters are associated with each combination of financial aid and academic years?",
      "What is the count of different fiscal periods, the number of unique fiscal year quarter codes, the earliest start date of a term, the latest end date of a term, and the distinct count of departmental term parameters for each financial aid year and academic year pair?",
      "How many unique fiscal periods, distinct fiscal year quarter codes, earliest term start date, latest term end date, and distinct departmental term parameters are linked to each financial aid year and academic year combination?",
      "Can you provide the total count of fiscal periods, unique fiscal year quarter codes, the earliest term start date, the latest term end date, and the count of distinct departmental term parameters for each financial aid year and academic year pair?"
    ],
    "oracle_sql": "WITH FinancialAidDetails AS ( SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.ACADEMIC_YEAR, at.FINANCIAL_AID_YEAR, td.START_DATE AS Term_Start_Date, td.END_DATE AS Term_End_Date, tm.FISCAL_PERIOD, tm.FISCAL_YEAR, tq.FY_QUARTER_CODE, tp.TERM_PARAMETER AS Dept_Term_Param FROM ACADEMIC_TERMS at JOIN TIME_DAY td ON at.TERM_START_DATE = td.CALENDAR_DATE JOIN TIME_MONTH tm ON td.FISCAL_PERIOD = tm.FISCAL_PERIOD AND td.FISCAL_YEAR = tm.FISCAL_YEAR JOIN TIME_QUARTER tq ON tm.FISCAL_YEAR = tq.FISCAL_YEAR AND tm.FY_QUARTER_CODE = tq.FY_QUARTER_CODE LEFT JOIN ACADEMIC_TERM_PARAMETER tp ON at.TERM_CODE = tp.TERM_CODE WHERE at.FINANCIAL_AID_YEAR IS NOT NULL ) SELECT FINANCIAL_AID_YEAR, ACADEMIC_YEAR, COUNT(DISTINCT FISCAL_PERIOD) AS Total_Fiscal_Periods, COUNT(DISTINCT FY_QUARTER_CODE) AS Total_Quarters, MIN(Term_Start_Date) AS First_Term_Start_Date, MAX(Term_End_Date) AS Last_Term_End_Date, COUNT(DISTINCT Dept_Term_Param) AS Distinct_Term_Params FROM FinancialAidDetails GROUP BY FINANCIAL_AID_YEAR, ACADEMIC_YEAR ORDER BY FINANCIAL_AID_YEAR DESC, ACADEMIC_YEAR ASC;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "What are the financial aid details for each academic year, including the total number of fiscal periods, quarters, and distinct term parameters? Can you provide the financial aid year, academic year, the total fiscal periods, the total quarters, the first term start date, the last term end date, and the distinct term parameters for each academic year?",
    "sql_in_cte": "WITH FinancialAidDetails AS (\n    SELECT \n        at.TERM_CODE, \n        at.TERM_DESCRIPTION, \n        at.ACADEMIC_YEAR, \n        at.FINANCIAL_AID_YEAR, \n        td.START_DATE AS Term_Start_Date, \n        td.END_DATE AS Term_End_Date, \n        tm.FISCAL_PERIOD, \n        tm.FISCAL_YEAR, \n        tq.FY_QUARTER_CODE, \n        tp.TERM_PARAMETER AS Dept_Term_Param \n    FROM \n        ACADEMIC_TERMS at \n        JOIN TIME_DAY td ON at.TERM_START_DATE = td.CALENDAR_DATE \n        JOIN TIME_MONTH tm ON td.FISCAL_PERIOD = tm.FISCAL_PERIOD AND td.FISCAL_YEAR = tm.FISCAL_YEAR \n        JOIN TIME_QUARTER tq ON tm.FISCAL_YEAR = tq.FISCAL_YEAR AND tm.FY_QUARTER_CODE = tq.FY_QUARTER_CODE \n        LEFT JOIN ACADEMIC_TERM_PARAMETER tp ON at.TERM_CODE = tp.TERM_CODE \n    WHERE \n        at.FINANCIAL_AID_YEAR IS NOT NULL\n)\nSELECT \n    FINANCIAL_AID_YEAR, \n    ACADEMIC_YEAR, \n    COUNT(DISTINCT FISCAL_PERIOD) AS Total_Fiscal_Periods, \n    COUNT(DISTINCT FY_QUARTER_CODE) AS Total_Quarters, \n    MIN(Term_Start_Date) AS First_Term_Start_Date, \n    MAX(Term_End_Date) AS Last_Term_End_Date, \n    COUNT(DISTINCT Dept_Term_Param) AS Distinct_Term_Params \nFROM \n    FinancialAidDetails \nGROUP BY \n    FINANCIAL_AID_YEAR, ACADEMIC_YEAR \nORDER BY \n    FINANCIAL_AID_YEAR DESC, ACADEMIC_YEAR ASC;",
    "sql_decomposition": [
      {
        "question": "What are the term details, academic and financial years, start and end dates of each term, fiscal period and year, quarter code, and departmental term parameters for terms with non-null financial aid years?",
        "gold-sql": "SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.ACADEMIC_YEAR, at.FINANCIAL_AID_YEAR, td.START_DATE AS Term_Start_Date, td.END_DATE AS Term_End_Date, tm.FISCAL_PERIOD, tm.FISCAL_YEAR, tq.FY_QUARTER_CODE, tp.TERM_PARAMETER AS Dept_Term_Param FROM ACADEMIC_TERMS AS at JOIN TIME_DAY AS td ON at.TERM_START_DATE = td.CALENDAR_DATE JOIN TIME_MONTH AS tm ON td.FISCAL_PERIOD = tm.FISCAL_PERIOD AND td.FISCAL_YEAR = tm.FISCAL_YEAR JOIN TIME_QUARTER AS tq ON tm.FISCAL_YEAR = tq.FISCAL_YEAR AND tm.FY_QUARTER_CODE = tq.FY_QUARTER_CODE LEFT JOIN ACADEMIC_TERM_PARAMETER AS tp ON at.TERM_CODE = tp.TERM_CODE WHERE NOT at.FINANCIAL_AID_YEAR IS NULL",
        "title": "FinancialAidDetails",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the term details, academic and financial years, start and end dates of each term, fiscal period and year, quarter code, and departmental term parameters for terms with non-null financial aid years?",
          "B",
          "Can you provide the term code, description, academic year, financial aid year, start and end dates of each term, fiscal period and year, quarter code, and departmental term parameters for terms where the financial aid year is not null?",
          "C",
          "How can we list the term code, description, academic year, financial aid year, start and end dates, fiscal period and year, quarter code, and departmental term parameters for terms that have a non-null financial aid year?",
          "D",
          "Which terms have details such as term code, description, academic year, financial aid year, start and end dates, fiscal period and year, quarter code, and departmental term parameters, but only for those terms with a non-null financial aid year?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the count of unique fiscal periods, the count of unique fiscal year quarter codes, the earliest term start date, the latest term end date, and the count of distinct department term parameters for each financial aid year and academic year in the Financial Aid Details table?",
        "gold-sql": "SELECT \n    FINANCIAL_AID_YEAR, \n    ACADEMIC_YEAR, \n    COUNT(DISTINCT FISCAL_PERIOD) AS Total_Fiscal_Periods, \n    COUNT(DISTINCT FY_QUARTER_CODE) AS Total_Quarters, \n    MIN(Term_Start_Date) AS First_Term_Start_Date, \n    MAX(Term_End_Date) AS Last_Term_End_Date, \n    COUNT(DISTINCT Dept_Term_Param) AS Distinct_Term_Params \nFROM \n    FinancialAidDetails \nGROUP BY \n    FINANCIAL_AID_YEAR, ACADEMIC_YEAR \nORDER BY \n    FINANCIAL_AID_YEAR DESC, ACADEMIC_YEAR ASC;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of unique fiscal periods, the count of unique fiscal year quarter codes, the earliest term start date, the latest term end date, and the count of distinct department term parameters for each financial aid year and academic year in the Financial Aid Details table?",
          "B",
          "How many total fiscal periods, unique fiscal year quarter codes, distinct department term parameters, and what are the earliest term start date and latest term end date for each combination of financial aid year and academic year in the Financial Aid Details table?",
          "C",
          "For every financial aid year and academic year pair, what is the total count of unique fiscal periods, the count of unique fiscal year quarter codes, the earliest term start date, the latest term end date, and the count of distinct department term parameters in the Financial Aid Details table?",
          "D",
          "Can you provide the number of unique fiscal periods, unique fiscal year quarter codes, distinct department term parameters, as well as the earliest term start date and latest term end date for each financial aid year and academic year combination in the Financial Aid Details table?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "For each financial aid year and academic year, how many unique fiscal periods are there, how many distinct fiscal year quarter codes exist, what is the earliest term start date, the latest term end date, and how many distinct departmental term parameters are associated with each combination of financial aid and academic years?"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What is the current building key, building street address, city, state, and postal code of the history department?",
    "gold-sql": "SELECT DISTINCT d.FCLT_BUILDING_KEY, e.BUILDING_STREET_ADDRESS, d.CITY, d.STATE, d.POSTAL_CODE FROM FCLT_BUILDING_ADDRESS d JOIN FCLT_ROOMS a ON a.FCLT_BUILDING_KEY = d.FCLT_BUILDING_KEY JOIN FCLT_ORG_DLC_KEY b ON a.FCLT_ORGANIZATION_KEY = b.FCLT_ORGANIZATION_KEY JOIN MASTER_DEPT_HIERARCHY c ON b.DLC_KEY = c.DLC_KEY JOIN BUILDINGS e ON e.BUILDING_KEY = d.FCLT_BUILDING_KEY WHERE lower(c.DLC_NAME) = lower('History') AND d.ADDRESS_PURPOSE = 'STREET';",
    "options": [
      "A",
      "What are the unique facility building keys, building street addresses, cities, states, and postal codes for buildings with the department name 'History' and address purpose 'STREET'? The output includes the facility building key, street address, city, state, and postal code for the relevant building.",
      "B",
      "Which facility building key, building street address, city, state, and postal code are associated with the department 'History' and have the address purpose set to 'STREET'? The result displays the unique facility building key, street address, city, state, and postal code for the specified buildings.",
      "C",
      "Can you provide the facility building key, building street address, city, state, and postal code for buildings linked to the 'History' department with the address purpose as 'STREET'? The output lists the unique facility building key, street address, city, state, and postal code for the identified buildings.",
      "D",
      "What are the distinct facility building keys, building street addresses, cities, states, and postal codes for buildings associated with the 'History' department and having the address purpose specified as 'STREET'? The query output includes details such as the facility building key, street address, city, state, and postal code for the relevant buildings."
    ],
    "oracle_sql": "SELECT DISTINCT d.FCLT_BUILDING_KEY, e.BUILDING_STREET_ADDRESS, d.CITY, d.STATE, d.POSTAL_CODE FROM FCLT_BUILDING_ADDRESS d JOIN FCLT_ROOMS a ON a.FCLT_BUILDING_KEY = d.FCLT_BUILDING_KEY JOIN FCLT_ORG_DLC_KEY b ON a.FCLT_ORGANIZATION_KEY = b.FCLT_ORGANIZATION_KEY JOIN MASTER_DEPT_HIERARCHY c ON b.DLC_KEY = c.DLC_KEY JOIN BUILDINGS e ON e.BUILDING_KEY = d.FCLT_BUILDING_KEY WHERE lower(c.DLC_NAME) = lower('History') AND d.ADDRESS_PURPOSE = 'STREET';",
    "question": "1. Retrieve the distinct building key, street address, city, state, and postal code for buildings associated with the History department, focusing on street addresses.",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What is the department name, total number of types of TIP subjects, total number of enrolled students, the minimum and maximum rental new price for each department?",
    "gold-sql": "SELECT tso.OFFER_DEPT_NAME, COUNT(distinct tso.SUBJECT_ID) AS Total_Subjects, SUM(tso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students, MIN(tm.RENTAL_NEW_PRICE) AS Min_Rental_New_Price, MAX(tm.RENTAL_NEW_PRICE) AS Max_Rental_New_Price FROM TIP_SUBJECT_OFFERED tso JOIN TIP_DETAIL td ON tso.TIP_SUBJECT_OFFERED_KEY = td.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY GROUP BY tso.OFFER_DEPT_NAME;",
    "options": [
      "A",
      "What are the total number of subjects offered, the total number of enrolled students, and the range of rental prices for each department that offers subjects? Can you provide the department name, the count of unique subjects, the sum of enrolled students, the minimum rental price, and the maximum rental price for each department?",
      "B",
      "How many unique subjects are offered, and what is the total number of enrolled students for each department? Could you also display the minimum and maximum rental prices for materials used in each department's subjects?",
      "C",
      "For each department offering subjects, what is the count of unique subjects, the total number of enrolled students, and the range of rental prices for materials used? Show the department name along with the subject count, total enrolled students, minimum rental price, and maximum rental price.",
      "D",
      "What is the breakdown of subjects offered by each department in terms of the count of unique subjects, total enrolled students, and the range of rental prices for materials? Provide the department name, subject count, total enrolled students, minimum rental price, and maximum rental price."
    ],
    "oracle_sql": "SELECT tso.OFFER_DEPT_NAME, COUNT(distinct tso.SUBJECT_ID) AS Total_Subjects, SUM(tso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students, MIN(tm.RENTAL_NEW_PRICE) AS Min_Rental_New_Price, MAX(tm.RENTAL_NEW_PRICE) AS Max_Rental_New_Price FROM TIP_SUBJECT_OFFERED tso JOIN TIP_DETAIL td ON tso.TIP_SUBJECT_OFFERED_KEY = td.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY GROUP BY tso.OFFER_DEPT_NAME;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Show the details of rooms including the full name of the rooms, the building names, floor numbers, the organizations occupying them, name of the departments occupying them, and the percentage of the room area over the assignable floor area and building.",
    "gold-sql": "SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN ff.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/ff.ASSIGNABLE_AREA END AS PERC_OF_ASG_FLOOR, CASE WHEN fb.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/fb.ASSIGNABLE_AREA END AS PERC_OF_ASG_BUILDING FROM FAC_ROOMS fr JOIN FAC_BUILDING fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;",
    "options": [
      "A",
      "What are the room names, building names, floors, organization names, HR department names, percentage of assignable area on each floor, and percentage of assignable area in each building?",
      "B",
      "Can you show me the room names, building names, floors, organization names, and HR department names along with the percentage of assignable area on each floor and in each building?",
      "C",
      "How can I display the room names, building names, floors, organization names, and HR department names, including the calculated percentages of assignable area on each floor and in each building?",
      "D",
      "What are the room names, building names, floors, organization names, HR department names, and the respective percentages of assignable area on each floor and in each building based on the given data?"
    ],
    "oracle_sql": "SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN ff.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/ff.ASSIGNABLE_AREA END AS PERC_OF_ASG_FLOOR, CASE WHEN fb.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/fb.ASSIGNABLE_AREA END AS PERC_OF_ASG_BUILDING FROM FAC_ROOMS fr JOIN FAC_BUILDING fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "Show the unique activity titles, locations, term start date, and supervisor name for all independent activities, sorted by the ascending order of start date.",
    "gold-sql": "SELECT DISTINCT a.activity_title, d.session_location, c.term_start_date, b.person_name AS Leader FROM iap_subject_detail a JOIN iap_subject_person b ON a.iap_subject_person_key = b.iap_subject_person_key JOIN academic_terms_all c ON c.term_code = a.term_code JOIN iap_subject_session d ON a.iap_subject_session_key = d.iap_subject_session_key WHERE b.person_role = 'Activity leader' ORDER BY term_start_date ASC;",
    "options": [
      "A",
      "What are the activity titles, session locations, start dates of terms, and leaders of activities where the person's role is an activity leader? The results are sorted by the start date of the terms.",
      "B",
      "Can you list the unique activity titles, session locations, term start dates, and leaders for activities where individuals serve as activity leaders? The list is ordered based on the start dates of the terms.",
      "C",
      "Which activities have distinct titles, session locations, term start dates, and leaders who are designated as activity leaders? The results are arranged by the start dates of the terms.",
      "D",
      "How can we display the activity titles, session locations, term start dates, and leaders for activities where individuals act as activity leaders? The output is organized by the start dates of the terms."
    ],
    "oracle_sql": "SELECT DISTINCT a.activity_title, d.session_location, c.term_start_date, b.person_name AS Leader FROM iap_subject_detail a JOIN iap_subject_person b ON a.iap_subject_person_key = b.iap_subject_person_key JOIN academic_terms_all c ON c.term_code = a.term_code JOIN iap_subject_session d ON a.iap_subject_session_key = d.iap_subject_session_key WHERE b.person_role = 'Activity leader' ORDER BY term_start_date ASC;",
    "question": "What are the activity titles, session locations, term start dates, and names of individuals serving as leaders for activities in the IAP subject details, sorted by the start date of the academic terms?",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the mailing list with owner key LIST69.377-keeper-xenon, list the owner, total number of mailing lists, and total number of members across all these mailing lists.",
    "gold-sql": "SELECT mlo.OWNER, COUNT(DISTINCT ml.MOIRA_LIST_KEY) AS Total_Lists, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE mlo.MOIRA_LIST_OWNER_KEY = 'LIST69.377-keeper-xenon' GROUP BY mlo.OWNER;",
    "options": [
      "A",
      "What is the total number of lists and members associated with the owner '69.377-keeper-xenon' in the Moira system?",
      "B",
      "How many lists and members are linked to the owner '69.377-keeper-xenon' in the Moira system?",
      "C",
      "For the owner '69.377-keeper-xenon' in the Moira system, how many lists and members are there?",
      "D",
      "In the Moira system, what is the count of lists and members under the owner '69.377-keeper-xenon'?"
    ],
    "oracle_sql": "SELECT mlo.OWNER, COUNT(DISTINCT ml.MOIRA_LIST_KEY) AS Total_Lists, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE mlo.MOIRA_LIST_OWNER_KEY = 'LIST69.377-keeper-xenon' GROUP BY mlo.OWNER;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the email lists subscribed by faculty members with last names begin with Y, list the names of the lists, the total number of subjects managed by faculty in those mailing lists, and the number of such faculty in the lists.",
    "gold-sql": "SELECT DISTINCT ml.MOIRA_LIST_NAME, COUNT(ccso.SUBJECT_ID) AS course_count, COUNT(DISTINCT ccso.RESPONSIBLE_FACULTY_NAME) AS distinct_faculty_count FROM COURSE_CATALOG_SUBJECT_OFFERED CCSO JOIN EMPLOYEE_DIRECTORY E ON ccso.RESPONSIBLE_FACULTY_MIT_ID = E.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON upper(e.KRB_NAME_UPPERCASE) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ccso.RESPONSIBLE_FACULTY_NAME LIKE 'Y%' GROUP BY ML.MOIRA_LIST_NAME",
    "options": [
      "A",
      "What are the names of the Moira lists along with the count of courses offered and the number of distinct faculty members responsible for courses starting with 'Y'? The output includes the Moira list name, the total number of courses offered, and the count of unique faculty members associated with each Moira list.",
      "B",
      "Which Moira lists have courses with faculty names starting with 'Y'? Provide the Moira list names, the total count of courses offered, and the distinct number of faculty members responsible for these courses.",
      "C",
      "List the Moira list names that have courses taught by faculty members whose names start with 'Y'. Include the total count of courses offered and the unique count of faculty members associated with each Moira list.",
      "D",
      "Can you show the Moira list names, the total number of courses offered, and the distinct count of faculty members responsible for courses with faculty names starting with 'Y'?"
    ],
    "oracle_sql": "SELECT DISTINCT ml.MOIRA_LIST_NAME, COUNT(ccso.SUBJECT_ID) AS course_count, COUNT(DISTINCT ccso.RESPONSIBLE_FACULTY_NAME) AS distinct_faculty_count FROM COURSE_CATALOG_SUBJECT_OFFERED CCSO JOIN EMPLOYEE_DIRECTORY E ON ccso.RESPONSIBLE_FACULTY_MIT_ID = E.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON upper(e.KRB_NAME_UPPERCASE) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ccso.RESPONSIBLE_FACULTY_NAME LIKE 'Y%' GROUP BY ML.MOIRA_LIST_NAME",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each mailing list with a name beginning with R (case insensitive), and that Professor Ayden Hopkins is subscribed to, list its name, description, owner, number of people in the list, and number of tenured faculty in the list.",
    "gold-sql": "WITH FilteredLists AS ( SELECT DISTINCT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, ml.MOIRA_LIST_DESCRIPTION, mlo.OWNER FROM SE_PERSON se JOIN MOIRA_LIST_DETAIL mld ON UPPER(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE se.FULL_NAME = 'Hopkins, Ayden' AND UPPER(ml.MOIRA_LIST_NAME) LIKE 'R%' ), MemberCounts AS ( SELECT fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, fl.MOIRA_LIST_DESCRIPTION, fl.OWNER, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Member_Count FROM FilteredLists fl JOIN MOIRA_LIST_DETAIL mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, fl.MOIRA_LIST_DESCRIPTION, fl.OWNER ), FacultyTenuredCounts AS ( SELECT fl.MOIRA_LIST_KEY, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Faculty_Tenured_Count FROM FilteredLists fl JOIN MOIRA_LIST_DETAIL mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) WHERE se.PAYROLL_RANK = 'Faculty Tenured' GROUP BY fl.MOIRA_LIST_KEY ) SELECT DISTINCT mc.MOIRA_LIST_NAME, mc.MOIRA_LIST_DESCRIPTION, mc.OWNER, mc.Member_Count, COALESCE(ftc.Faculty_Tenured_Count, 0) AS Faculty_Tenured_Count FROM MemberCounts mc LEFT JOIN FacultyTenuredCounts ftc ON mc.MOIRA_LIST_KEY = ftc.MOIRA_LIST_KEY ORDER BY mc.Member_Count DESC;",
    "options": [
      "What are the Moira list names, descriptions, and owners for lists with the most members, along with the count of faculty members who are tenured in each list?",
      "Which Moira lists have the highest number of members, and how many faculty members in those lists are tenured?",
      "Can you provide a list of Moira lists sorted by the total number of members, including the count of faculty members who are tenured in each list?",
      "How many faculty members in each Moira list with the most members are classified as tenured, and what are the respective list names, descriptions, and owners?"
    ],
    "oracle_sql": "WITH MemberCounts AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Member_Count FROM SE_PERSON se JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ml.MOIRA_LIST_NAME IN ( SELECT DISTINCT ml_sub.MOIRA_LIST_NAME FROM SE_PERSON se_sub JOIN MOIRA_LIST_DETAIL mld_sub ON upper(se_sub.KRB_NAME) = upper(mld_sub.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml_sub ON mld_sub.MOIRA_LIST_KEY = ml_sub.MOIRA_LIST_KEY WHERE se_sub.FULL_NAME = 'Hopkins, Ayden' ) GROUP BY ml.MOIRA_LIST_NAME ), FacultyTenuredCounts AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Faculty_Tenured_Count FROM SE_PERSON se JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ml.MOIRA_LIST_NAME IN ( SELECT DISTINCT ml_sub.MOIRA_LIST_NAME FROM SE_PERSON se_sub JOIN MOIRA_LIST_DETAIL mld_sub ON upper(se_sub.KRB_NAME) = upper(mld_sub.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml_sub ON mld_sub.MOIRA_LIST_KEY = ml_sub.MOIRA_LIST_KEY WHERE se_sub.FULL_NAME = 'Hopkins, Ayden' ) AND se.PAYROLL_RANK = 'Faculty Tenured' GROUP BY ml.MOIRA_LIST_NAME ) SELECT DISTINCT mc.MOIRA_LIST_NAME, ml.MOIRA_LIST_DESCRIPTION, mlo.OWNER, mc.Member_Count, COALESCE(ftc.Faculty_Tenured_Count, 0) AS Faculty_Tenured_Count FROM MemberCounts mc LEFT JOIN FacultyTenuredCounts ftc ON mc.MOIRA_LIST_NAME = ftc.MOIRA_LIST_NAME JOIN MOIRA_LIST ml ON mc.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL mld ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON MLD.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'C%' ORDER BY mc.Member_Count DESC;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH FilteredLists AS (\n    SELECT DISTINCT \n        ml.MOIRA_LIST_KEY, \n        ml.MOIRA_LIST_NAME, \n        ml.MOIRA_LIST_DESCRIPTION, \n        mlo.OWNER \n    FROM \n        SE_PERSON se \n        JOIN MOIRA_LIST_DETAIL mld ON UPPER(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) \n        JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY \n        JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY \n    WHERE \n        se.FULL_NAME = 'Hopkins, Ayden' \n        AND UPPER(ml.MOIRA_LIST_NAME) LIKE 'R%'\n), \nMemberCounts AS (\n    SELECT \n        fl.MOIRA_LIST_KEY, \n        fl.MOIRA_LIST_NAME, \n        fl.MOIRA_LIST_DESCRIPTION, \n        fl.OWNER, \n        COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Member_Count \n    FROM \n        FilteredLists fl \n        JOIN MOIRA_LIST_DETAIL mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n    GROUP BY \n        fl.MOIRA_LIST_KEY, \n        fl.MOIRA_LIST_NAME, \n        fl.MOIRA_LIST_DESCRIPTION, \n        fl.OWNER\n), \nFacultyTenuredCounts AS (\n    SELECT \n        fl.MOIRA_LIST_KEY, \n        COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Faculty_Tenured_Count \n    FROM \n        FilteredLists fl \n        JOIN MOIRA_LIST_DETAIL mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n        JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) \n    WHERE \n        se.PAYROLL_RANK = 'Faculty Tenured' \n    GROUP BY \n        fl.MOIRA_LIST_KEY\n) \nSELECT DISTINCT \n    mc.MOIRA_LIST_NAME, \n    mc.MOIRA_LIST_DESCRIPTION, \n    mc.OWNER, \n    mc.Member_Count, \n    COALESCE(ftc.Faculty_Tenured_Count, 0) AS Faculty_Tenured_Count \nFROM \n    MemberCounts mc \n    LEFT JOIN FacultyTenuredCounts ftc ON mc.MOIRA_LIST_KEY = ftc.MOIRA_LIST_KEY \nORDER BY \n    mc.Member_Count DESC;\n",
    "sql_decomposition": [
      {
        "question": "What are the unique Moira list key, name, description, and owner for employees with the full name 'Hopkins, Ayden' whose Moira list name starts with 'R'?",
        "gold-sql": "SELECT DISTINCT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, ml.MOIRA_LIST_DESCRIPTION, mlo.OWNER FROM SE_PERSON AS se JOIN MOIRA_LIST_DETAIL AS mld ON UPPER(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST AS ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER AS mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE se.FULL_NAME = 'Hopkins, Ayden' AND UPPER(ml.MOIRA_LIST_NAME) LIKE 'R%'",
        "title": "FilteredLists",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique Moira list key, name, description, and owner for employees with the full name 'Hopkins, Ayden' whose Moira list name starts with 'R'?",
          "B",
          "Can you provide the Moira list key, name, description, and owner for employees named 'Hopkins, Ayden' and Moira list names beginning with 'R'?",
          "C",
          "Which Moira lists, identified by their key, name, and description, are owned by individuals associated with the employee 'Hopkins, Ayden' and have names starting with 'R'?",
          "D",
          "List the Moira list key, name, description, and owner for employees with the full name 'Hopkins, Ayden' and Moira list names that have a prefix 'R'."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique Moira list key, name, description, owner, and the count of distinct members in each filtered list?",
        "gold-sql": "SELECT fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, fl.MOIRA_LIST_DESCRIPTION, fl.OWNER, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Member_Count FROM FilteredLists AS fl JOIN MOIRA_LIST_DETAIL AS mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, fl.MOIRA_LIST_DESCRIPTION, fl.OWNER",
        "title": "MemberCounts",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique Moira list key, name, description, owner, and the count of distinct members in each filtered list?",
          "B",
          "How many distinct members are there in each filtered list, along with the corresponding Moira list key, name, description, and owner?",
          "C",
          "Can you provide a summary of the Moira list key, name, description, owner, and the count of unique members for each filtered list?",
          "D",
          "For each filtered list, what is the Moira list key, name, description, owner, and the total number of distinct members?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the count of distinct faculty members who are tenured in each filtered list? The output includes the Moira List Key and the Faculty Tenured Count.",
        "gold-sql": "SELECT fl.MOIRA_LIST_KEY, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Faculty_Tenured_Count FROM FilteredLists AS fl JOIN MOIRA_LIST_DETAIL AS mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON AS se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) WHERE se.PAYROLL_RANK = 'Faculty Tenured' GROUP BY fl.MOIRA_LIST_KEY",
        "title": "FacultyTenuredCounts",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of distinct faculty members who are tenured in each filtered list? The output includes the Moira List Key and the Faculty Tenured Count.",
          "B",
          "How many tenured faculty members are there in each filtered list? The result displays the Moira List Key along with the count of distinct faculty members.",
          "C",
          "Can you provide the number of tenured faculty members in each filtered list? The query shows the Moira List Key and the count of unique faculty members who are tenured.",
          "D",
          "What is the count of faculty members with a tenured status in each filtered list? The output consists of the Moira List Key and the total number of distinct faculty members who are tenured."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the names, descriptions, owners, total member counts, and tenured faculty counts for each filtered list, sorted by the total member count in descending order?",
        "gold-sql": "SELECT \n        fl.MOIRA_LIST_KEY, \n        fl.MOIRA_LIST_NAME, \n        fl.MOIRA_LIST_DESCRIPTION, \n        fl.OWNER, \n        COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Member_Count \n    FROM \n        FilteredLists fl \n        JOIN MOIRA_LIST_DETAIL mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n    GROUP BY \n        fl.MOIRA_LIST_KEY, \n        fl.MOIRA_LIST_NAME, \n        fl.MOIRA_LIST_DESCRIPTION, \n        fl.OWNER\n), \nFacultyTenuredCounts AS (\n    SELECT \n        fl.MOIRA_LIST_KEY, \n        COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Faculty_Tenured_Count \n    FROM \n        FilteredLists fl \n        JOIN MOIRA_LIST_DETAIL mld ON fl.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n        JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) \n    WHERE \n        se.PAYROLL_RANK = 'Faculty Tenured' \n    GROUP BY \n        fl.MOIRA_LIST_KEY\n) \nSELECT DISTINCT \n    mc.MOIRA_LIST_NAME, \n    mc.MOIRA_LIST_DESCRIPTION, \n    mc.OWNER, \n    mc.Member_Count, \n    COALESCE(ftc.Faculty_Tenured_Count, 0) AS Faculty_Tenured_Count \nFROM \n    MemberCounts mc \n    LEFT JOIN FacultyTenuredCounts ftc ON mc.MOIRA_LIST_KEY = ftc.MOIRA_LIST_KEY \nORDER BY \n    mc.Member_Count DESC;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the names, descriptions, owners, total member counts, and tenured faculty counts for each filtered list, sorted by the total member count in descending order?",
          "B",
          "How many members are there in each filtered list, and how many of them are faculty members with a tenured status? Show the names, descriptions, and owners of the filtered lists along with these counts.",
          "C",
          "Can you provide a list of filtered lists along with their names, descriptions, owners, total member counts, and counts of faculty members with a tenured status, sorted by the total member count in descending order?",
          "D",
          "Which filtered lists have the highest number of members, and how many of these members are faculty members with a tenured status? Display the names, descriptions, and owners of these lists along with the respective counts."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "What are the Moira list names, descriptions, and owners for lists with the most members, along with the count of faculty members who are tenured in each list?"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For students with last names starting with K, list their names, the phone numbers of departments they belong to, total number of mailing lists each student is in, and the average size of the mailing lists each student is in.",
    "gold-sql": "WITH MailingListSizes AS (SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, COUNT(mld.MOIRA_LIST_MEMBER) AS List_Size FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, COUNT(ml.MOIRA_LIST_KEY) AS Total_Lists, AVG(MLS.List_Size) AS Avg_List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON ml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'K%' GROUP BY msd.FULL_NAME, sad.DEPARTMENT_PHONE_NUMBER;",
    "options": [
      "Which students with last names starting with 'K' are associated with specific department phone numbers, and how many Moira lists are linked to each student, on average, how many members are in these lists?",
      "Who are the students with last names beginning with 'K', what are their respective department phone numbers, how many Moira lists are they part of, and what is the average size of these lists?",
      "Can you provide the names of students whose last names start with 'K', along with their department phone numbers, the total number of Moira lists they are in, and the average size of these lists?",
      "What are the names of students with last names starting with 'K', their department phone numbers, the total number of Moira lists they belong to, and the average size of these lists?"
    ],
    "oracle_sql": "WITH MailingListSizes AS (SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, COUNT(mld.MOIRA_LIST_MEMBER) AS List_Size FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, COUNT(ml.MOIRA_LIST_KEY) AS Total_Lists, AVG(MLS.List_Size) AS Avg_List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON ml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'K%' GROUP BY msd.FULL_NAME, sad.DEPARTMENT_PHONE_NUMBER;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH MailingListSizes AS (\n    SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, COUNT(mld.MOIRA_LIST_MEMBER) AS List_Size \n    FROM MOIRA_LIST ml \n    JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n    GROUP BY ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME\n)\nSELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, COUNT(ml.MOIRA_LIST_KEY) AS Total_Lists, AVG(MLS.List_Size) AS Avg_List_Size \nFROM MIT_STUDENT_DIRECTORY msd \nJOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE \nJOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE \nJOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME \nJOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) \nJOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY \nJOIN MailingListSizes MLS ON ml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY \nWHERE msd.LAST_NAME LIKE 'K%' \nGROUP BY msd.FULL_NAME, sad.DEPARTMENT_PHONE_NUMBER;\n",
    "sql_decomposition": [
      {
        "question": "What are the unique keys and names of the Moira lists along with the number of members in each list?",
        "gold-sql": "SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, COUNT(mld.MOIRA_LIST_MEMBER) AS List_Size FROM MOIRA_LIST AS ml JOIN MOIRA_LIST_DETAIL AS mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME",
        "title": "MailingListSizes",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique keys and names of the Moira lists along with the number of members in each list?",
          "B",
          "Can you provide a list of Moira lists with their respective keys and names, along with the count of members in each list?",
          "C",
          "Which Moira lists are there, and how many members do they contain? Display the list keys and names alongside the corresponding member counts.",
          "D",
          "How many members are in each Moira list, and what are the keys and names of these lists?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the names of students whose last names start with 'K', along with their respective department phone numbers? Additionally, how many lists are associated with each student, and what is the average size of these lists?",
        "gold-sql": "SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, COUNT(ml.MOIRA_LIST_KEY) AS Total_Lists, AVG(MLS.List_Size) AS Avg_List_Size \nFROM MIT_STUDENT_DIRECTORY msd \nJOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE \nJOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE \nJOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME \nJOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) \nJOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY \nJOIN MailingListSizes MLS ON ml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY \nWHERE msd.LAST_NAME LIKE 'K%' \nGROUP BY msd.FULL_NAME, sad.DEPARTMENT_PHONE_NUMBER;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the names of students whose last names start with 'K', along with their respective department phone numbers? Additionally, how many lists are associated with each student, and what is the average size of these lists?",
          "B",
          "Retrieve the student names and their corresponding department phone numbers for students with last names starting with 'K'. Calculate the total number of lists each student is a part of and the average size of these lists.",
          "C",
          "List the full names of students with last names beginning with 'K' and their department phone numbers. Include the total number of lists each student is associated with and the average size of these lists.",
          "D",
          "Which students, with last names starting with 'K', are linked to department phone numbers? How many lists are they part of on average, and what is the average size of these lists?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Who are the students with last names beginning with 'K', what are their respective department phone numbers, how many Moira lists are they part of, and what is the average size of these lists?"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For subjects offered in the summer term, list the subject titles, number of instructors, and the length of the longest instructor name.",
    "gold-sql": "SELECT ccso.SUBJECT_TITLE, COUNT(DISTINCT e.FULL_NAME) AS Num_Instructors, MAX(LENGTH(e.FULL_NAME)) AS Longest_Instructor_Name FROM EMPLOYEE_DIRECTORY e JOIN COURSE_CATALOG_SUBJECT_OFFERED ccso ON ccso.RESPONSIBLE_FACULTY_MIT_ID = e.MIT_ID JOIN ACADEMIC_TERMS_ALL at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' GROUP BY ccso.SUBJECT_TITLE;",
    "options": [
      "A",
      "What are the subject titles offered in the summer term, along with the number of instructors teaching each subject and the length of the longest instructor name? Can you provide the subject title, the count of unique instructors, and the length of the longest instructor name for each subject?",
      "B",
      "Which subjects are being offered in the summer term, and how many instructors are teaching each subject? Additionally, what is the length of the longest instructor name for each subject? Please list the subject titles, the number of instructors, and the longest instructor name length.",
      "C",
      "For courses offered in the summer term, what are the subject titles, the count of instructors teaching each subject, and the length of the longest instructor name? Could you display the subject titles, the number of instructors per subject, and the longest instructor name's length?",
      "D",
      "Can you show me the subject titles offered in the summer term, the number of instructors teaching each subject, and the length of the longest instructor name? I would like to see the subject titles, the count of instructors, and the longest instructor name's length for each subject."
    ],
    "oracle_sql": "SELECT ccso.SUBJECT_TITLE, COUNT(DISTINCT e.FULL_NAME) AS Num_Instructors, MAX(LENGTH(e.FULL_NAME)) AS Longest_Instructor_Name FROM EMPLOYEE_DIRECTORY e JOIN COURSE_CATALOG_SUBJECT_OFFERED ccso ON ccso.RESPONSIBLE_FACULTY_MIT_ID = e.MIT_ID JOIN ACADEMIC_TERMS_ALL at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' GROUP BY ccso.SUBJECT_TITLE;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": false,
    "comment": "it is not the current academic term",
    "db_id": "dw",
    "gold-question": "For each IAP category and academic year, list the category name, academic year, total fee collected, total number of IAP subjects, and the minimum and maximum enrollment.",
    "gold-sql": "SELECT isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR, SUM(isd.FEE) AS Total_Fee, COUNT(distinct isd.ACTIVITY_TITLE) AS Total_Subjects, MIN(isd.MAX_ENROLLMENT) AS Min_Attendance, MAX(isd.MAX_ENROLLMENT) AS Max_Attendance FROM IAP_SUBJECT_DETAIL isd JOIN IAP_SUBJECT_CATEGORY isc ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY JOIN TIME_DAY td ON isd.TERM_CODE = td.ACADEMIC_TERM_CODE GROUP BY isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR;",
    "options": [
      "What are the total fees, number of subjects, and attendance details for different categories in the IAP program during the academic year 2021? Which categories have the highest and lowest attendance rates?",
      "How many subjects were offered, and what were the attendance ranges for various categories like A.I. and Robotics, Academic Skills and Resources, Art and Architecture, Athletics and Exercise, and Boston and Cambridge in the academic year 2021?",
      "In the academic year 2021, what are the total fees, number of subjects, and attendance statistics for categories such as A.I. and Robotics, Academic Skills and Resources, Art and Architecture, Athletics and Exercise, and Boston and Cambridge in the IAP program?",
      "For the academic year 2021, can you provide insights into the IAP program categories like A.I. and Robotics, Academic Skills and Resources, Art and Architecture, Athletics and Exercise, and Boston and Cambridge? Include details on total fees, subjects offered, and attendance variations."
    ],
    "oracle_sql": "SELECT isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR, SUM(isd.FEE) AS Total_Fee, COUNT(distinct isd.ACTIVITY_TITLE) AS Total_Subjects, MIN(isd.MAX_ENROLLMENT) AS Min_Attendance, MAX(isd.MAX_ENROLLMENT) AS Max_Attendance FROM IAP_SUBJECT_DETAIL isd JOIN IAP_SUBJECT_CATEGORY isc ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY JOIN TIME_DAY td ON isd.TERM_CODE = td.ACADEMIC_TERM_CODE GROUP BY isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR;",
    "question": "What are the IAP category names, the years they occur, the total fee, number of subjects, minimum and maximum attendance, for each IAP category and academic year?",
    "sql": "",
    "question_ts_and_es": "What are the total fees, number of subjects, and attendance details for different categories in the IAP program during the academic year 2021? Which categories have the highest and lowest attendance rates?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the 2023 Fall term, what are the unique term descriptions, subject titles along with their prerequisites, total number of types of subjects per term code, instructor of this course, and the number of types of courses ever taught by the instructor?",
    "gold-sql": "WITH SubjectCounts AS (SELECT TERM_CODE, FALL_INSTRUCTORS, SUBJECT_ID, COUNT(*) OVER (PARTITION BY TERM_CODE) AS Total_Subjects, COUNT(*) OVER (PARTITION BY FALL_INSTRUCTORS) AS Experience FROM COURSE_CATALOG_SUBJECT_OFFERED WHERE TERM_CODE = '2023FA') SELECT DISTINCT at.TERM_DESCRIPTION, ccso.SUBJECT_TITLE, ccso.PREREQUISITES, sc.Total_Subjects, ccso.FALL_INSTRUCTORS, sc.Experience FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE JOIN SubjectCounts sc ON ccso.TERM_CODE = sc.TERM_CODE AND ccso.SUBJECT_ID = sc.SUBJECT_ID WHERE ccso.TERM_CODE = '2023FA';",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT DISTINCT at.TERM_DESCRIPTION, ccso.SUBJECT_TITLE, ccso.PREREQUISITES, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY at.TERM_CODE) AS Total_Subjects, ccso.FALL_INSTRUCTORS, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY ccso.FALL_INSTRUCTORS) AS Experience FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE WHERE ccso.TERM_CODE = '2023FA';",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH SubjectCounts AS (\n    SELECT \n        TERM_CODE, \n        FALL_INSTRUCTORS, \n        SUBJECT_ID, \n        COUNT(*) OVER (PARTITION BY TERM_CODE) AS Total_Subjects, \n        COUNT(*) OVER (PARTITION BY FALL_INSTRUCTORS) AS Experience \n    FROM COURSE_CATALOG_SUBJECT_OFFERED \n    WHERE TERM_CODE = '2023FA'\n)\n\nSELECT DISTINCT \n    at.TERM_DESCRIPTION, \n    ccso.SUBJECT_TITLE, \n    ccso.PREREQUISITES, \n    sc.Total_Subjects, \n    ccso.FALL_INSTRUCTORS, \n    sc.Experience \nFROM COURSE_CATALOG_SUBJECT_OFFERED ccso \nJOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE \nJOIN SubjectCounts sc ON ccso.TERM_CODE = sc.TERM_CODE AND ccso.SUBJECT_ID = sc.SUBJECT_ID \nWHERE ccso.TERM_CODE = '2023FA';\n",
    "sql_decomposition": [
      {
        "question": "Retrieve the **term code**, **fall instructors**, and **subject ID** for courses offered in the term '2023FA'. The output includes the **total number of subjects** offered in the term and the **experience count** for each fall instructor. The **total subjects** count is calculated based on the number of subjects offered in the '2023FA' term.The query displays the term code, fall instructors, subject IDs, total subjects count, and experience count for each instructor.",
        "gold-sql": "SELECT TERM_CODE, FALL_INSTRUCTORS, SUBJECT_ID, COUNT(*) OVER (PARTITION BY TERM_CODE) AS Total_Subjects, COUNT(*) OVER (PARTITION BY FALL_INSTRUCTORS) AS Experience FROM COURSE_CATALOG_SUBJECT_OFFERED WHERE TERM_CODE = '2023FA'",
        "title": "SubjectCounts",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "Retrieve the **term code**, **fall instructors**, and **subject ID** for courses offered in the term '2023FA'.",
          "The output includes the **total number of subjects** offered in the term and the **experience count** for each fall instructor.",
          "The **total subjects** count is calculated based on the number of subjects offered in the '2023FA' term.",
          "The query displays the term code, fall instructors, subject IDs, total subjects count, and experience count for each instructor.",
          "B",
          "What are the **term code**, **fall instructors**, and **subject IDs** for courses offered in the term '2023FA'?",
          "The result also shows the **total number of subjects** offered in the term and the **experience count** for each fall instructor.",
          "The **total subjects** count is determined by the number of subjects offered in the '2023FA' term.",
          "The output lists the term code, fall instructors, subject IDs, total subjects count, and experience count for each instructor.",
          "C",
          "List the **term code**, **fall instructors**, and **subject IDs** for courses available in the '2023FA' term.",
          "The query provides the **total number of subjects** offered in the term and the **experience count** for each fall instructor.",
          "The **total subjects** count is calculated based on the subjects available in the '2023FA' term.",
          "The output showcases the term code, fall instructors, subject IDs, total subjects count, and experience count for each instructor.",
          "D",
          "Which **term code**, **fall instructors**, and **subject IDs** are associated with courses in the '2023FA' term?",
          "The result includes the **total number of subjects** offered in the term and the **experience count** for each fall instructor.",
          "The **total subjects** count is derived from the subjects available in the '2023FA' term.",
          "Displayed are the term code, fall instructors, subject IDs, total subjects count, and experience count for each instructor."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the term description, subject title, prerequisites, total number of subjects, fall instructors, and experience for courses offered in the Fall term of 2023?",
        "gold-sql": "SELECT DISTINCT \n    at.TERM_DESCRIPTION, \n    ccso.SUBJECT_TITLE, \n    ccso.PREREQUISITES, \n    sc.Total_Subjects, \n    ccso.FALL_INSTRUCTORS, \n    sc.Experience \nFROM COURSE_CATALOG_SUBJECT_OFFERED ccso \nJOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE \nJOIN SubjectCounts sc ON ccso.TERM_CODE = sc.TERM_CODE AND ccso.SUBJECT_ID = sc.SUBJECT_ID \nWHERE ccso.TERM_CODE = '2023FA';\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the term description, subject title, prerequisites, total number of subjects, fall instructors, and experience for courses offered in the Fall term of 2023?",
          "B",
          "Can you provide the term description, subject title, prerequisites, total number of subjects, fall instructors, and experience for courses offered in the Fall term of 2023?",
          "C",
          "How many subjects are there in total, and what are the term description, subject title, prerequisites, fall instructors, and experience for courses offered in the Fall term of 2023?",
          "D",
          "For the Fall term of 2023, what are the term description, subject title, prerequisites, total number of subjects, fall instructors, and experience for the courses offered?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": false,
    "comment": "all options into one",
    "db_id": "dw",
    "gold-question": "For email lists with names starting with e (case insensitive), containing 10 to 20 members inclusive, and where over 75% are computer science students, provide the list name, owner, and member count.",
    "gold-sql": "WITH FilteredLists AS ( SELECT ml.MOIRA_LIST_NAME, mlo.OWNER, COUNT(mld.MOIRA_LIST_MEMBER) AS TOTAL_MEMBER_COUNT FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'E%' GROUP BY ml.MOIRA_LIST_NAME, mlo.OWNER HAVING COUNT(mld.MOIRA_LIST_MEMBER) BETWEEN 10 AND 20 ), CSStudentCounts AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE NULL END) AS CS_STUDENT_COUNT FROM FilteredLists fl JOIN MOIRA_LIST ml ON fl.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME GROUP BY ml.MOIRA_LIST_NAME ) SELECT fl.MOIRA_LIST_NAME, fl.OWNER, fl.TOTAL_MEMBER_COUNT FROM FilteredLists fl JOIN CSStudentCounts cs ON fl.MOIRA_LIST_NAME = cs.MOIRA_LIST_NAME WHERE cs.CS_STUDENT_COUNT > 0.75 * fl.TOTAL_MEMBER_COUNT;",
    "options": [
      "Which Moira lists starting with 'E' have between 10 and 20 members, and what are the names of their respective owners?",
      "How many Computer Science students are in each Moira list that meets the criteria of having member counts between 10 and 20?",
      "For Moira lists where more than 75% of the members are Computer Science students, what are the names of the lists, their owners, and the total number of members?",
      "Can you provide the names of Moira lists, their owners, and the total member count for lists where the majority of members are Computer Science students?"
    ],
    "oracle_sql": "WITH FilteredLists AS (SELECT ml.MOIRA_LIST_NAME, mlo.OWNER, COUNT(mld.MOIRA_LIST_MEMBER) AS TOTAL_MEMBER_COUNT FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'E%' GROUP BY ml.MOIRA_LIST_NAME, mlo.OWNER HAVING COUNT(mld.MOIRA_LIST_MEMBER) BETWEEN 10 AND 20), CSStudentCounts AS (SELECT ml.MOIRA_LIST_NAME, COUNT(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE NULL END) AS CS_STUDENT_COUNT FROM FilteredLists fl JOIN MOIRA_LIST ml ON fl.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME GROUP BY ml.MOIRA_LIST_NAME) SELECT fl.MOIRA_LIST_NAME, fl.OWNER, fl.TOTAL_MEMBER_COUNT FROM FilteredLists fl JOIN CSStudentCounts cs ON fl.MOIRA_LIST_NAME = cs.MOIRA_LIST_NAME WHERE cs.CS_STUDENT_COUNT > 0.75 * fl.TOTAL_MEMBER_COUNT;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH FilteredLists AS (\n    SELECT \n        ml.MOIRA_LIST_NAME, \n        mlo.OWNER, \n        COUNT(mld.MOIRA_LIST_MEMBER) AS TOTAL_MEMBER_COUNT \n    FROM \n        MOIRA_LIST ml \n        JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n        JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY \n    WHERE \n        UPPER(ml.MOIRA_LIST_NAME) LIKE 'E%' \n    GROUP BY \n        ml.MOIRA_LIST_NAME, mlo.OWNER \n    HAVING \n        COUNT(mld.MOIRA_LIST_MEMBER) BETWEEN 10 AND 20\n), \nCSStudentCounts AS (\n    SELECT \n        fl.MOIRA_LIST_NAME, \n        COUNT(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE NULL END) AS CS_STUDENT_COUNT \n    FROM \n        FilteredLists fl \n        JOIN MOIRA_LIST ml ON fl.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME \n        JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n        JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) \n        JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME \n    GROUP BY \n        fl.MOIRA_LIST_NAME\n)\nSELECT \n    fl.MOIRA_LIST_NAME, \n    fl.OWNER, \n    fl.TOTAL_MEMBER_COUNT \nFROM \n    FilteredLists fl \n    JOIN CSStudentCounts cs ON fl.MOIRA_LIST_NAME = cs.MOIRA_LIST_NAME \nWHERE \n    cs.CS_STUDENT_COUNT > 0.75 * fl.TOTAL_MEMBER_COUNT;\n",
    "sql_decomposition": [
      {
        "question": "What are the names of the Moira lists starting with 'E', their respective owners, and the total number of members in each list? Show only those lists with member counts between 10 and 20.",
        "gold-sql": "SELECT ml.MOIRA_LIST_NAME, mlo.OWNER, COUNT(mld.MOIRA_LIST_MEMBER) AS TOTAL_MEMBER_COUNT FROM MOIRA_LIST AS ml JOIN MOIRA_LIST_DETAIL AS mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER AS mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'E%' GROUP BY ml.MOIRA_LIST_NAME, mlo.OWNER HAVING COUNT(mld.MOIRA_LIST_MEMBER) BETWEEN 10 AND 20",
        "title": "FilteredLists",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the names of the Moira lists starting with 'E', their respective owners, and the total number of members in each list? Show only those lists with member counts between 10 and 20.",
          "B",
          "List the Moira list names beginning with 'E', along with their owners and the total count of members in each list. Include only those lists with member counts ranging from 10 to 20.",
          "C",
          "Which Moira lists, starting with 'E', have owners and a total member count falling between 10 and 20? Display the names of these lists, their owners, and the corresponding member counts.",
          "D",
          "Provide a list of Moira lists that start with 'E', showing the owners and the total number of members in each list. Include only those lists with member counts between 10 and 20."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the count of Computer Science students in each filtered list?",
        "gold-sql": "SELECT fl.MOIRA_LIST_NAME, COUNT(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE NULL END) AS CS_STUDENT_COUNT FROM FilteredLists AS fl JOIN MOIRA_LIST AS ml ON fl.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL AS mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON AS se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY AS msd ON se.FULL_NAME = msd.FULL_NAME GROUP BY fl.MOIRA_LIST_NAME",
        "title": "CSStudentCounts",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of Computer Science students in each filtered list?",
          "B",
          "How many students in each filtered list are majoring in Computer Science?",
          "C",
          "Can you provide the number of students studying Computer Science for each filtered list?",
          "D",
          "For each filtered list, how many students are enrolled in the Computer Science department?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the name of the Moira list, the owner of the list, and the total number of members for Moira lists where more than 75% of the members are Computer Science students?",
        "gold-sql": "SELECT \n        fl.MOIRA_LIST_NAME, \n        COUNT(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE NULL END) AS CS_STUDENT_COUNT \n    FROM \n        FilteredLists fl \n        JOIN MOIRA_LIST ml ON fl.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME \n        JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n        JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) \n        JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME \n    GROUP BY \n        fl.MOIRA_LIST_NAME\n)\nSELECT \n    fl.MOIRA_LIST_NAME, \n    fl.OWNER, \n    fl.TOTAL_MEMBER_COUNT \nFROM \n    FilteredLists fl \n    JOIN CSStudentCounts cs ON fl.MOIRA_LIST_NAME = cs.MOIRA_LIST_NAME \nWHERE \n    cs.CS_STUDENT_COUNT > 0.75 * fl.TOTAL_MEMBER_COUNT;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the name of the Moira list, the owner of the list, and the total number of members for Moira lists where more than 75% of the members are Computer Science students?",
          "B",
          "Which Moira lists have a high percentage of Computer Science students as members, and who are the owners of these lists along with the total number of members?",
          "C",
          "List the Moira lists, their owners, and the total number of members where the majority of members are Computer Science students.",
          "D",
          "For which Moira lists do Computer Science students make up more than 75% of the total members, and who are the owners of these lists?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Which Moira lists starting with 'E' have between 10 and 20 members, and what are the names of their respective owners?"
  },
  {
    "adjusted": false,
    "comment": "try to incoporate all filters",
    "db_id": "dw",
    "gold-question": "List the unique full room names, their corresponding building names, street addresses, cities, states, postal codes, and building heights for rooms associated with subjects that Computer Science students can enroll in.",
    "gold-sql": "SELECT DISTINCT fr.ROOM_FULL_NAME, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, fb.BUILDING_HEIGHT FROM COURSE_CATALOG_SUBJECT_OFFERED JOIN FCLT_ROOMS fr ON MEET_PLACE = FCLT_ROOM_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = fr.FCLT_BUILDING_KEY WHERE DEPARTMENT_NAME = 'Electrical Eng & Computer Sci' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "options": [
      "A",
      "What are the room names, building names, street addresses, city, state, postal codes, and building heights for rooms where courses in the 'Electrical Eng & Computer Sci' department are offered on the street?",
      "B",
      "Which buildings in Cambridge, MA, have rooms where courses for the 'Electrical Eng & Computer Sci' department are offered on the street, and what are their respective room names, street addresses, postal codes, and building heights?",
      "C",
      "List the names of rooms, building names, street addresses, cities, states, postal codes, and building heights for buildings in Cambridge, MA, offering courses in the 'Electrical Eng & Computer Sci' department on the street.",
      "D",
      "Show the room names, building names, street addresses, cities, states, postal codes, and building heights for buildings in Cambridge, MA, where courses for the 'Electrical Eng & Computer Sci' department are offered on the street."
    ],
    "oracle_sql": "SELECT DISTINCT fr.ROOM_FULL_NAME, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, fb.BUILDING_HEIGHT FROM COURSE_CATALOG_SUBJECT_OFFERED JOIN FCLT_ROOMS fr ON MEET_PLACE = FCLT_ROOM_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = fr.FCLT_BUILDING_KEY WHERE DEPARTMENT_NAME = 'Electrical Eng & Computer Sci' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "question": "1. Retrieve the unique room full names, building names, building street addresses, cities, states, postal codes, and building heights for courses offered in the Electrical Engineering & Computer Science department.",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For the 'ocean-apple' mailing list, identify the department with the highest student count. Provide the department name, phone number, and the total number of students subscribed to the mailing list from that department. If multiple departments have the same highest count, list each one separately.",
    "gold-sql": "WITH FilteredList AS ( SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'ocean-apple' ), FilteredListDetails AS ( SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL mld JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY ), StudentMemberCounts AS ( SELECT fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER AS department_phone, ad.SIS_ADMIN_DEPARTMENT_NAME AS department_name, COUNT(DISTINCT msd.FULL_NAME) AS student_members FROM FilteredList fl JOIN FilteredListDetails fld ON fl.MOIRA_LIST_KEY = fld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(fld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE GROUP BY fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER, ad.SIS_ADMIN_DEPARTMENT_NAME ), RankedDepartments AS ( SELECT department_name, department_phone, SUM(student_members) AS total_student_members, RANK() OVER (ORDER BY SUM(student_members) DESC) AS department_rank FROM StudentMemberCounts GROUP BY department_name, department_phone ) SELECT department_name AS most_prominent_dpt, department_phone AS most_prominent_dpt_phone, total_student_members FROM RankedDepartments WHERE department_rank = 1;",
    "options": [
      "Which department has the highest number of unique student members, and what is the total count of student members in that department?",
      "What is the name and phone number of the department with the most student members, and how many student members are in that department?",
      "Among all departments, which one has the highest number of student members, and what is the total count of student members in that department?",
      "What is the department name, phone number, and total count of student members for the department with the most student members?"
    ],
    "oracle_sql": "WITH StudentMemberCounts AS (SELECT mld.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, mo.OWNER AS list_owner, ad.DEPARTMENT_PHONE_NUMBER AS department_phone, ad.SIS_ADMIN_DEPARTMENT_NAME AS department_name, COUNT(DISTINCT msd.FULL_NAME) AS student_members FROM MOIRA_LIST_DETAIL mld JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mo ON mld.MOIRA_LIST_OWNER_KEY = mo.MOIRA_LIST_OWNER_KEY JOIN SE_PERSON se ON upper(mld.MOIRA_LIST_MEMBER) = upper(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE WHERE ml.MOIRA_LIST_NAME = 'ocean-apple' GROUP BY mld.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, mo.OWNER, ad.DEPARTMENT_PHONE_NUMBER, ad.SIS_ADMIN_DEPARTMENT_NAME), RankedDepartments AS (SELECT list_owner, department_name, department_phone, SUM(student_members) AS total_student_members, RANK() OVER (PARTITION BY list_owner ORDER BY SUM(student_members) DESC) AS department_rank FROM StudentMemberCounts GROUP BY list_owner, department_name, department_phone) SELECT list_owner, department_name AS most_prominent_dpt, department_phone AS most_prominent_dpt_phone, total_student_members FROM RankedDepartments WHERE department_rank = 1 ORDER BY list_owner;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH FilteredList AS (\n    SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME \n    FROM MOIRA_LIST \n    WHERE MOIRA_LIST_NAME = 'ocean-apple'\n), \nFilteredListDetails AS (\n    SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER \n    FROM MOIRA_LIST_DETAIL mld \n    JOIN FilteredList fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY\n), \nStudentMemberCounts AS (\n    SELECT fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER AS department_phone, ad.SIS_ADMIN_DEPARTMENT_NAME AS department_name, COUNT(DISTINCT msd.FULL_NAME) AS student_members \n    FROM FilteredList fl \n    JOIN FilteredListDetails fld ON fl.MOIRA_LIST_KEY = fld.MOIRA_LIST_KEY \n    JOIN SE_PERSON se ON UPPER(fld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) \n    JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME \n    LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE \n    GROUP BY fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER, ad.SIS_ADMIN_DEPARTMENT_NAME\n), \nRankedDepartments AS (\n    SELECT department_name, department_phone, SUM(student_members) AS total_student_members, RANK() OVER (ORDER BY SUM(student_members) DESC) AS department_rank \n    FROM StudentMemberCounts \n    GROUP BY department_name, department_phone\n) \nSELECT department_name AS most_prominent_dpt, department_phone AS most_prominent_dpt_phone, total_student_members \nFROM RankedDepartments \nWHERE department_rank = 1;\n",
    "sql_decomposition": [
      {
        "question": "What are the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` for records where `MOIRA_LIST_NAME` is 'ocean-apple' in the `MOIRA_LIST` table?",
        "gold-sql": "SELECT MOIRA_LIST_KEY, MOIRA_LIST_NAME FROM MOIRA_LIST WHERE MOIRA_LIST_NAME = 'ocean-apple'",
        "title": "FilteredList",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` for records where `MOIRA_LIST_NAME` is 'ocean-apple' in the `MOIRA_LIST` table?",
          "B",
          "Can you provide the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` for all entries with the name 'ocean-apple' in the `MOIRA_LIST` table?",
          "C",
          "Which records in the `MOIRA_LIST` table have the name 'ocean-apple', and what are their corresponding `MOIRA_LIST_KEY` values?",
          "D",
          "How many entries in the `MOIRA_LIST` table have the name 'ocean-apple', and what are the associated `MOIRA_LIST_KEY` values for each entry?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** for records that match between the **MOIRA_LIST_DETAIL** table and the **FilteredList** table?",
        "gold-sql": "SELECT mld.MOIRA_LIST_KEY, mld.MOIRA_LIST_MEMBER FROM MOIRA_LIST_DETAIL AS mld JOIN FilteredList AS fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY",
        "title": "FilteredListDetails",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** for records that match between the **MOIRA_LIST_DETAIL** table and the **FilteredList** table?",
          "B",
          "Retrieve the **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** columns from the **MOIRA_LIST_DETAIL** table for entries that have a corresponding **MOIRA_LIST_KEY** in the **FilteredList** table.",
          "C",
          "Which **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** values are common between the **MOIRA_LIST_DETAIL** and **FilteredList** tables?",
          "D",
          "List the **MOIRA_LIST_KEY** and **MOIRA_LIST_MEMBER** values that are shared between the **MOIRA_LIST_DETAIL** and **FilteredList** tables."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the total count of unique student members in each filtered list along with their corresponding department phone number and name?",
        "gold-sql": "SELECT fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER AS department_phone, ad.SIS_ADMIN_DEPARTMENT_NAME AS department_name, COUNT(DISTINCT msd.FULL_NAME) AS student_members FROM FilteredList AS fl JOIN FilteredListDetails AS fld ON fl.MOIRA_LIST_KEY = fld.MOIRA_LIST_KEY JOIN SE_PERSON AS se ON UPPER(fld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY AS msd ON se.FULL_NAME = msd.FULL_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT AS ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE GROUP BY fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER, ad.SIS_ADMIN_DEPARTMENT_NAME",
        "title": "StudentMemberCounts",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the total count of unique student members in each filtered list along with their corresponding department phone number and name?",
          "B",
          "How many distinct student members are there in each filtered list, and what are their associated department phone numbers and names?",
          "C",
          "Can you provide a breakdown of the unique student members in each filtered list, including the department phone number and name for reference?",
          "D",
          "For every filtered list, what is the total number of unique student members, and what are the respective department phone numbers and names associated with them?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the total number of student members in each department, along with their respective department names and phone numbers? Additionally, what is the ranking of each department based on the total number of student members they have?",
        "gold-sql": "SELECT department_name, department_phone, SUM(student_members) AS total_student_members, RANK() OVER (ORDER BY SUM(student_members) DESC) AS department_rank FROM StudentMemberCounts GROUP BY department_name, department_phone",
        "title": "RankedDepartments",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the total number of student members in each department, along with their respective department names and phone numbers? Additionally, what is the ranking of each department based on the total number of student members they have?",
          "B",
          "Can you provide a list of departments with their corresponding phone numbers and the total number of student members in each department? How are the departments ranked based on the total number of student members they have?",
          "C",
          "How many student members are there in each department, and what is the ranking of each department based on the total number of student members? The output includes the department names and phone numbers.",
          "D",
          "For each department, what is the total count of student members, and how do the departments rank in terms of the total number of student members they have? The results also display the department names and phone numbers."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the department with the highest number of student members? Show the department name, department phone number, and the total number of student members in that department.",
        "gold-sql": "SELECT fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER AS department_phone, ad.SIS_ADMIN_DEPARTMENT_NAME AS department_name, COUNT(DISTINCT msd.FULL_NAME) AS student_members \n    FROM FilteredList fl \n    JOIN FilteredListDetails fld ON fl.MOIRA_LIST_KEY = fld.MOIRA_LIST_KEY \n    JOIN SE_PERSON se ON UPPER(fld.MOIRA_LIST_MEMBER) = UPPER(se.KRB_NAME) \n    JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME \n    LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE \n    GROUP BY fl.MOIRA_LIST_KEY, fl.MOIRA_LIST_NAME, ad.DEPARTMENT_PHONE_NUMBER, ad.SIS_ADMIN_DEPARTMENT_NAME\n), \nRankedDepartments AS (\n    SELECT department_name, department_phone, SUM(student_members) AS total_student_members, RANK() OVER (ORDER BY SUM(student_members) DESC) AS department_rank \n    FROM StudentMemberCounts \n    GROUP BY department_name, department_phone\n) \nSELECT department_name AS most_prominent_dpt, department_phone AS most_prominent_dpt_phone, total_student_members \nFROM RankedDepartments \nWHERE department_rank = 1;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the department with the highest number of student members? Show the department name, department phone number, and the total number of student members in that department.",
          "B",
          "Which department has the most student members, and what is their contact phone number? Provide the department name, phone number, and the total count of student members in that department.",
          "C",
          "Can you identify the department with the highest student membership count? Display the department name, phone number, and the total number of student members in that department.",
          "D",
          "What is the department that boasts the highest student membership count? Include the department name, phone number, and the total number of student members in that department."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Which department has the highest number of unique student members, and what is the total count of student members in that department?"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "What is the name of the building, total number of subjects, total fee, and shortest and longest sessions for each physical IAP session location?",
    "gold-sql": "SELECT b.BUILDING_NAME, COUNT(DISTINCT isd.ACTIVITY_TITLE) AS Total_Subjects, SUM(isd.FEE) AS Total_Fee, MIN(TIMESTAMPDIFF(MINUTE, STR_TO_DATE(iss.SESSION_START_TIME, '%h%i%p'), CASE WHEN STR_TO_DATE(iss.SESSION_START_TIME, '%h%i%p') > STR_TO_DATE(iss.SESSION_END_TIME, '%h%i%p') THEN STR_TO_DATE('1200PM', '%h%i%p') ELSE STR_TO_DATE(iss.SESSION_END_TIME, '%h%i%p') END)) AS Min_Sessions, MAX(TIMESTAMPDIFF(MINUTE, STR_TO_DATE(iss.SESSION_START_TIME, '%h%i%p'), CASE WHEN STR_TO_DATE(iss.SESSION_START_TIME, '%h%i%p') > STR_TO_DATE(iss.SESSION_END_TIME, '%h%i%p') THEN STR_TO_DATE('1200PM', '%h%i%p') ELSE STR_TO_DATE(iss.SESSION_END_TIME, '%h%i%p') END)) AS Max_Sessions FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN BUILDINGS b ON b.BUILDING_NUMBER = iss.SESSION_LOCATION GROUP BY b.BUILDING_NAME;",
    "options": [
      "What are the total number of subjects, total fee collected, minimum session duration, and maximum session duration for each building based on the Independent Activities Program?",
      "Retrieve the building names along with the count of unique activity titles, total fee generated, shortest session duration, and longest session duration for each building where Independent Activities Program sessions are held.",
      "How many different subjects are offered, what is the total fee earned, and what are the shortest and longest session durations for each building where Independent Activities Program sessions take place?",
      "List the building names, total number of unique subjects, total fee collected, minimum session duration, and maximum session duration for each building hosting sessions of the Independent Activities Program."
    ],
    "oracle_sql": "SELECT b.BUILDING_NAME, COUNT(Distinct isd.ACTIVITY_TITLE) AS Total_Subjects, SUM(isd.FEE) AS Total_Fee, MIN((CASE WHEN TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') > TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM') THEN TO_DATE('12:00PM', 'HH12:MIAM') ELSE TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM')END) - TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') ) * 24 * 60 AS Min_Sessions, MAX((CASE WHEN TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') > TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM') THEN TO_DATE('12:00PM', 'HH12:MIAM') ELSE TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM')END) - TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') ) * 24 * 60 AS Max_Sessions FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN BUILDINGS b on b.BUILDING_NUMBER = iss.SESSION_LOCATION GROUP BY b.BUILDING_NAME;",
    "question": "Retrieve the building names along with the count of unique activity titles, total fee generated, shortest session duration, and longest session duration for each building where Independent Activities Program sessions are held.",
    "sql": ""
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each course, list its name, name of the building of the course location, and the cumulative number of courses, including the course itself, held in the same year or preceding years (partitioned by academic year and sorted in the ascending order of course start date).",
    "gold-sql": "select distinct subject_title, building_name, count(ccso.subject_id) over (partition by ccso.academic_year order by term_start_date asc range between unbounded preceding and current row) from COURSE_CATALOG_SUBJECT_OFFERED ccso join academic_terms on ccso.effective_term_code =academic_terms.term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY",
    "options": [
      "A",
      "What are the subject titles, building names, and the running count of subject IDs partitioned by academic year and ordered by term start date in ascending order?",
      "B",
      "Can you show me the subject titles, building names, and the cumulative count of subject IDs for each academic year, sorted by term start date in ascending order?",
      "C",
      "How many subject titles, along with their corresponding building names, have a running count of subject IDs partitioned by academic year and ordered by term start date in ascending order?",
      "D",
      "Which subject titles and building names have a count of subject IDs that increases over time within each academic year, based on the term start date?"
    ],
    "oracle_sql": "select distinct subject_title, building_name, count(ccso.subject_id) over (partition by ccso.academic_year order by term_start_date asc range between unbounded preceding and current row) from COURSE_CATALOG_SUBJECT_OFFERED ccso join academic_terms on ccso.effective_term_code =academic_terms.term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": true,
    "comment": "missing coalesce",
    "db_id": "dw",
    "gold-question": "For each course, provide the room number of course location, building name, building number, building city, building state, area, organization name, room usage, term code, course level, the total number of subjects, unique meeting times, and total units. Do not include meet place or meet times with NULL values.",
    "gold-sql": "WITH MeetingPlaceDetails AS ( SELECT c.MEET_PLACE AS room_number, c.MEET_TIME, c.TERM_CODE, c.SUBJECT_ID, c.TOTAL_UNITS, b.BUILDING_NAME, b.BUILDING_NUMBER, ba.CITY AS building_city, ba.STATE AS building_state, fr.AREA, fr.ORGANIZATION_NAME, fmu.MAJOR_USE, scd.COURSE_LEVEL AS course_level, scd.COURSE_DESCRIPTION AS course_description FROM COURSE_CATALOG_SUBJECT_OFFERED c JOIN FAC_ROOMS fr ON c.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_BUILDING b ON fr.BUILDING_KEY = b.FAC_BUILDING_KEY JOIN FAC_MAJOR_USE fmu ON fr.MAJOR_USE_KEY = fmu.MAJOR_USE_KEY LEFT JOIN FAC_BUILDING_ADDRESS ba ON b.FAC_BUILDING_KEY = ba.BUILDING_KEY LEFT JOIN SIS_COURSE_DESCRIPTION scd ON c.SUBJECT_ID = scd.COURSE WHERE c.MEET_PLACE IS NOT NULL AND c.MEET_TIME IS NOT NULL ), MeetingPlaceAggregates AS ( SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, COUNT(DISTINCT SUBJECT_ID) AS num_subjects, COUNT(DISTINCT MEET_TIME) AS unique_meet_times, SUM(TOTAL_UNITS) AS total_units FROM MeetingPlaceDetails GROUP BY room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level ) SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, num_subjects, unique_meet_times, total_units FROM MeetingPlaceAggregates ORDER BY TERM_CODE, total_units DESC, room_number;",
    "options": [
      "What are the room numbers, building names, building numbers, cities, states, areas, organization names, major uses, term codes, course levels, number of subjects, unique meeting times, and total units for courses with assigned meeting places and times?",
      "Can you list the room numbers, building names, building numbers, cities, states, areas, organization names, major uses, term codes, course levels, number of subjects, unique meeting times, and total units for each room where courses are scheduled with non-null meeting places and times?",
      "Which rooms in the dataset have unique combinations of building details, organization names, major uses, term codes, and course levels, along with the count of subjects, distinct meeting times, and total units for each room?",
      "How are the room numbers, building details, organization names, major uses, term codes, course levels, number of subjects, unique meeting times, and total units structured for courses with specified meeting places and times, sorted by term code, total units, and room number?"
    ],
    "oracle_sql": "WITH MeetingPlaceDetails AS ( SELECT c.MEET_PLACE AS room_number, c.MEET_TIME, c.TERM_CODE, c.SUBJECT_ID, c.TOTAL_UNITS, b.BUILDING_NAME, b.BUILDING_NUMBER, ba.CITY AS building_city, ba.STATE AS building_state, fr.AREA, fr.ORGANIZATION_NAME, fmu.MAJOR_USE, scd.COURSE_LEVEL AS course_level, scd.COURSE_DESCRIPTION AS course_description FROM COURSE_CATALOG_SUBJECT_OFFERED c JOIN FAC_ROOMS fr ON c.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_BUILDING b ON fr.BUILDING_KEY = b.FAC_BUILDING_KEY JOIN FAC_MAJOR_USE fmu ON fr.MAJOR_USE_KEY = fmu.MAJOR_USE_KEY LEFT JOIN FAC_BUILDING_ADDRESS ba ON b.FAC_BUILDING_KEY = ba.BUILDING_KEY LEFT JOIN SIS_COURSE_DESCRIPTION scd ON c.SUBJECT_ID = scd.COURSE WHERE c.MEET_PLACE IS NOT NULL AND c.MEET_TIME IS NOT NULL ), MeetingPlaceAggregates AS ( SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, COUNT(DISTINCT SUBJECT_ID) AS num_subjects, COUNT(DISTINCT MEET_TIME) AS unique_meet_times, SUM(TOTAL_UNITS) AS total_units FROM MeetingPlaceDetails GROUP BY room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level ) SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, num_subjects, unique_meet_times, total_units FROM MeetingPlaceAggregates ORDER BY TERM_CODE, total_units DESC, room_number;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH MeetingPlaceDetails AS (\n    SELECT \n        c.MEET_PLACE AS room_number, \n        c.MEET_TIME, \n        c.TERM_CODE, \n        c.SUBJECT_ID, \n        c.TOTAL_UNITS, \n        b.BUILDING_NAME, \n        b.BUILDING_NUMBER, \n        ba.CITY AS building_city, \n        ba.STATE AS building_state, \n        fr.AREA, \n        fr.ORGANIZATION_NAME, \n        fmu.MAJOR_USE, \n        scd.COURSE_LEVEL AS course_level, \n        scd.COURSE_DESCRIPTION AS course_description \n    FROM \n        COURSE_CATALOG_SUBJECT_OFFERED c \n        JOIN FAC_ROOMS fr ON c.MEET_PLACE = fr.FAC_ROOM_KEY \n        JOIN FAC_BUILDING b ON fr.BUILDING_KEY = b.FAC_BUILDING_KEY \n        JOIN FAC_MAJOR_USE fmu ON fr.MAJOR_USE_KEY = fmu.MAJOR_USE_KEY \n        LEFT JOIN FAC_BUILDING_ADDRESS ba ON b.FAC_BUILDING_KEY = ba.BUILDING_KEY \n        LEFT JOIN SIS_COURSE_DESCRIPTION scd ON c.SUBJECT_ID = scd.COURSE \n    WHERE \n        c.MEET_PLACE IS NOT NULL \n        AND c.MEET_TIME IS NOT NULL\n), \nMeetingPlaceAggregates AS (\n    SELECT \n        room_number, \n        BUILDING_NAME, \n        BUILDING_NUMBER, \n        building_city, \n        building_state, \n        AREA, \n        ORGANIZATION_NAME, \n        MAJOR_USE, \n        TERM_CODE, \n        course_level, \n        COUNT(DISTINCT SUBJECT_ID) AS num_subjects, \n        COUNT(DISTINCT MEET_TIME) AS unique_meet_times, \n        SUM(TOTAL_UNITS) AS total_units \n    FROM \n        MeetingPlaceDetails \n    GROUP BY \n        room_number, \n        BUILDING_NAME, \n        BUILDING_NUMBER, \n        building_city, \n        building_state, \n        AREA, \n        ORGANIZATION_NAME, \n        MAJOR_USE, \n        TERM_CODE, \n        course_level\n) \nSELECT \n    room_number, \n    BUILDING_NAME, \n    BUILDING_NUMBER, \n    building_city, \n    building_state, \n    AREA, \n    ORGANIZATION_NAME, \n    MAJOR_USE, \n    TERM_CODE, \n    course_level, \n    num_subjects, \n    unique_meet_times, \n    total_units \nFROM \n    MeetingPlaceAggregates \nORDER BY \n    TERM_CODE, \n    total_units DESC, \n    room_number;",
    "sql_decomposition": [
      {
        "question": "What are the room numbers, meeting times, term codes, subject IDs, total units, building names, building numbers, building cities, building states, areas, organization names, major uses, course levels, and course descriptions for all courses offered with non-null meeting places and meeting times?",
        "gold-sql": "SELECT c.MEET_PLACE AS room_number, c.MEET_TIME, c.TERM_CODE, c.SUBJECT_ID, c.TOTAL_UNITS, b.BUILDING_NAME, b.BUILDING_NUMBER, ba.CITY AS building_city, ba.STATE AS building_state, fr.AREA, fr.ORGANIZATION_NAME, fmu.MAJOR_USE, scd.COURSE_LEVEL AS course_level, scd.COURSE_DESCRIPTION AS course_description FROM COURSE_CATALOG_SUBJECT_OFFERED AS c JOIN FAC_ROOMS AS fr ON c.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_BUILDING AS b ON fr.BUILDING_KEY = b.FAC_BUILDING_KEY JOIN FAC_MAJOR_USE AS fmu ON fr.MAJOR_USE_KEY = fmu.MAJOR_USE_KEY LEFT JOIN FAC_BUILDING_ADDRESS AS ba ON b.FAC_BUILDING_KEY = ba.BUILDING_KEY LEFT JOIN SIS_COURSE_DESCRIPTION AS scd ON c.SUBJECT_ID = scd.COURSE WHERE NOT c.MEET_PLACE IS NULL AND NOT c.MEET_TIME IS NULL",
        "title": "MeetingPlaceDetails",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the room numbers, meeting times, term codes, subject IDs, total units, building names, building numbers, building cities, building states, areas, organization names, major uses, course levels, and course descriptions for all courses offered with non-null meeting places and meeting times?",
          "B",
          "Can you provide a list of room numbers, meeting times, term codes, subject IDs, total units, building names, building numbers, building cities, building states, areas, organization names, major uses, course levels, and course descriptions for courses with valid meeting places and times?",
          "C",
          "Which courses have room numbers, meeting times, term codes, subject IDs, total units, building names, building numbers, building cities, building states, areas, organization names, major uses, course levels, and course descriptions available, excluding those with null meeting places or times?",
          "D",
          "How can we retrieve the room numbers, meeting times, term codes, subject IDs, total units, building names, building numbers, building cities, building states, areas, organization names, major uses, course levels, and course descriptions for courses that have valid meeting places and times?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the total number of unique subjects, unique meeting times, and total units for each room in the MeetingPlaceDetails table? Can you provide the room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of subjects, unique meeting times, and total units for each room?",
        "gold-sql": "SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, COUNT(DISTINCT SUBJECT_ID) AS num_subjects, COUNT(DISTINCT MEET_TIME) AS unique_meet_times, SUM(TOTAL_UNITS) AS total_units FROM MeetingPlaceDetails GROUP BY room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level",
        "title": "MeetingPlaceAggregates",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the total number of unique subjects, unique meeting times, and total units for each room in the MeetingPlaceDetails table? Can you provide the room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of subjects, unique meeting times, and total units for each room?",
          "B",
          "Could you list the room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of unique subjects, number of unique meeting times, and total units for each room in the MeetingPlaceDetails table?",
          "C",
          "How many unique subjects, unique meeting times, and total units are associated with each room in the MeetingPlaceDetails table? Please provide the room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of subjects, unique meeting times, and total units for each room.",
          "D",
          "For each room in the MeetingPlaceDetails table, can you show the room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of unique subjects, number of unique meeting times, and total units?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "This query aims to aggregate meeting place details by various attributes such as room number, building name, building number, city, state, area, organization name, major use, term code, and course level. It calculates the number of distinct subject IDs, unique meeting times, and total units for each group. The output includes room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of subjects, unique meeting times, and total units. The query calculates the number of distinct subject IDs, unique meeting times, and sums the total units for each group based on the specified attributes. The final result displays the aggregated meeting place details with the specified calculations, sorted by term code, total units in descending order, and room number.",
        "gold-sql": "SELECT \n        room_number, \n        BUILDING_NAME, \n        BUILDING_NUMBER, \n        building_city, \n        building_state, \n        AREA, \n        ORGANIZATION_NAME, \n        MAJOR_USE, \n        TERM_CODE, \n        course_level, \n        COUNT(DISTINCT SUBJECT_ID) AS num_subjects, \n        COUNT(DISTINCT MEET_TIME) AS unique_meet_times, \n        SUM(TOTAL_UNITS) AS total_units \n    FROM \n        MeetingPlaceDetails \n    GROUP BY \n        room_number, \n        BUILDING_NAME, \n        BUILDING_NUMBER, \n        building_city, \n        building_state, \n        AREA, \n        ORGANIZATION_NAME, \n        MAJOR_USE, \n        TERM_CODE, \n        course_level\n) \nSELECT \n    room_number, \n    BUILDING_NAME, \n    BUILDING_NUMBER, \n    building_city, \n    building_state, \n    AREA, \n    ORGANIZATION_NAME, \n    MAJOR_USE, \n    TERM_CODE, \n    course_level, \n    num_subjects, \n    unique_meet_times, \n    total_units \nFROM \n    MeetingPlaceAggregates \nORDER BY \n    TERM_CODE, \n    total_units DESC, \n    room_number;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "This query aims to aggregate meeting place details by various attributes such as room number, building name, building number, city, state, area, organization name, major use, term code, and course level. It calculates the number of distinct subject IDs, unique meeting times, and total units for each group.",
          "The output includes room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of subjects, unique meeting times, and total units.",
          "The query calculates the number of distinct subject IDs, unique meeting times, and sums the total units for each group based on the specified attributes.",
          "The final result displays the aggregated meeting place details with the specified calculations, sorted by term code, total units in descending order, and room number.",
          "B",
          "What are the aggregated meeting place details including room number, building name, building number, city, state, area, organization name, major use, term code, and course level? The query also calculates the number of distinct subject IDs, unique meeting times, and total units for each group.",
          "The output consists of room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of subjects, unique meeting times, and total units.",
          "By grouping the meeting place details, the query computes the count of distinct subject IDs, unique meeting times, and the sum of total units for each group.",
          "The final result presents the aggregated meeting place details with the specified calculations, ordered by term code, total units in descending order, and room number.",
          "C",
          "How many distinct subject IDs, unique meeting times, and total units are associated with each aggregated meeting place detail, including room number, building name, building number, city, state, area, organization name, major use, term code, and course level?",
          "The columns in the output include room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of subjects, unique meeting times, and total units.",
          "The query groups meeting place details and calculates the count of distinct subject IDs, unique meeting times, and the sum of total units for each group.",
          "The final result showcases the aggregated meeting place details with the specified calculations, sorted by term code, total units in descending order, and room number.",
          "D",
          "What is the summary of meeting place details grouped by room number, building name, building number, city, state, area, organization name, major use, term code, and course level, including the count of distinct subject IDs, unique meeting times, and total units?",
          "The result set includes room number, building name, building number, city, state, area, organization name, major use, term code, course level, number of subjects, unique meeting times, and total units.",
          "By grouping the data, the query calculates the number of distinct subject IDs, unique meeting times, and sums the total units for each group.",
          "The final output displays the aggregated meeting place details with the specified calculations, ordered by term code, total units in descending order, and room number."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "What are the room numbers, building names, building numbers, cities, states, areas, organization names, major uses, term codes, course levels, number of subjects, unique meeting times, and total units for courses with assigned meeting places and times?"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each publication year, list the year, the total number of reserved materials, the average length of their titles, distinct number of status, and number of courses, sorted by publication year in descending order.",
    "gold-sql": "SELECT lrc.CATALOG_YEAR AS PUBLICATION_YEAR, COUNT(distinct lrc.LIBRARY_RESERVE_CATALOG_KEY) AS TOTAL_MATERIALS, AVG(LENGTH(lrc.CATALOG_TITLE)) AS AVG_TITLE_LENGTH, COUNT(DISTINCT lms.LIBRARY_MATERIAL_STATUS) AS STATUS_COUNT, COUNT(DISTINCT lci.COURSE_NAME) AS COURSE_COUNT FROM LIBRARY_RESERVE_CATALOG lrc JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lrc.LIBRARY_RESERVE_CATALOG_KEY = lrmd.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY GROUP BY lrc.CATALOG_YEAR ORDER BY PUBLICATION_YEAR DESC;",
    "options": [
      "A",
      "What is the publication year, total number of materials, average title length, status count, and course count for each year in the library reserve catalog? Can you provide the data sorted by publication year in descending order?",
      "B",
      "How many materials were published in each year in the library reserve catalog, and what is the average title length for those materials? Additionally, how many unique statuses and courses are associated with these materials? Please display the results sorted by publication year, starting from the most recent year.",
      "C",
      "Could you show the publication year, total count of materials, average title length, number of unique statuses, and the count of distinct courses for each year in the library reserve catalog? The results should be ordered by publication year in a descending fashion.",
      "D",
      "What are the publication years, total number of materials, average title length, status count, and course count for the library reserve catalog? How is this information distributed across different years, and can you present it in descending order of publication year?"
    ],
    "oracle_sql": "SELECT lrc.CATALOG_YEAR AS PUBLICATION_YEAR, COUNT(distinct lrc.LIBRARY_RESERVE_CATALOG_KEY) AS TOTAL_MATERIALS, AVG(LENGTH(lrc.CATALOG_TITLE)) AS AVG_TITLE_LENGTH, COUNT(DISTINCT lms.LIBRARY_MATERIAL_STATUS) AS STATUS_COUNT, COUNT(DISTINCT lci.COURSE_NAME) AS COURSE_COUNT FROM LIBRARY_RESERVE_CATALOG lrc JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lrc.LIBRARY_RESERVE_CATALOG_KEY = lrmd.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY GROUP BY lrc.CATALOG_YEAR ORDER BY PUBLICATION_YEAR DESC;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each sponsor, list the sponsor name, the number of IAP sessions hosted, and the number of unique subjects organized.",
    "gold-sql": "SELECT iss.SPONSOR_NAME, COUNT(issp.IAP_SUBJECT_SESSION_KEY) AS SESSION_COUNT, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS UNIQUE_SUBJECTS FROM IAP_SUBJECT_SESSION issp JOIN IAP_SUBJECT_DETAIL isd ON issp.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR iss ON isd.IAP_SUBJECT_SPONSOR_KEY = iss.IAP_SUBJECT_SPONSOR_KEY GROUP BY iss.SPONSOR_NAME ORDER BY SESSION_COUNT DESC;",
    "options": [
      "A",
      "What are the sponsor names along with the count of sessions and the number of unique subjects for each sponsor? The results are sorted based on the session count in descending order. Can you identify the sponsor with the highest number of sessions and unique subjects?",
      "B",
      "Which sponsors have the most sessions, and how many unique subjects are associated with each sponsor? The table displays the sponsor names, the total session count, and the count of unique subjects. Are there any sponsors that stand out in terms of session frequency and subject diversity?",
      "C",
      "How many sessions were conducted by each sponsor, and how many unique subjects were covered in these sessions? The output lists sponsor names alongside the session count and the number of unique subjects, sorted by the session count. Which sponsor has the highest session count and how many unique subjects do they have?",
      "D",
      "Can you determine the sponsors with the highest session counts and the corresponding number of unique subjects? The table shows sponsor names, session counts, and the count of unique subjects. Which sponsor leads in both session frequency and subject variety based on the results?"
    ],
    "oracle_sql": "SELECT iss.SPONSOR_NAME, COUNT(issp.IAP_SUBJECT_SESSION_KEY) AS SESSION_COUNT, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS UNIQUE_SUBJECTS FROM IAP_SUBJECT_SESSION issp JOIN IAP_SUBJECT_DETAIL isd ON issp.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR iss ON isd.IAP_SUBJECT_SPONSOR_KEY = iss.IAP_SUBJECT_SPONSOR_KEY GROUP BY iss.SPONSOR_NAME ORDER BY SESSION_COUNT DESC;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each sponsor of the independent activity periods, list the sponsor name, number of sessions held, the total number of enrollment, the minimum and maximum fee, the number of sessions with info, and the number of sessions without info.",
    "gold-sql": "SELECT issr.SPONSOR_NAME, COUNT(DISTINCT iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions, SUM(isd.MAX_ENROLLMENT), MIN(isd.FEE) AS Min_Fee, MAX(isd.FEE) AS Max_Fee, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'Y' THEN 1 ELSE 0 END) AS Num_Sessions_With_Info, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'N' THEN 1 ELSE 0 END) AS Num_Sessions_Without_Info FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR issr ON isd.IAP_SUBJECT_SPONSOR_KEY = issr.IAP_SUBJECT_SPONSOR_KEY GROUP BY issr.SPONSOR_NAME;",
    "options": [
      "A",
      "What are the total number of sessions, maximum enrollment, minimum fee, maximum fee, number of sessions with information, and number of sessions without information for each sponsor? Can you provide the sponsor name along with these details?",
      "B",
      "How many sessions does each sponsor have in total? What is the sum of the maximum enrollment, minimum fee, and maximum fee for these sessions? Additionally, how many sessions have information and how many do not for each sponsor?",
      "C",
      "Which sponsors are associated with the sessions, and how many sessions do they each have? What are the total maximum enrollment, minimum fee, and maximum fee for these sessions? Also, how many sessions have information versus those without information for each sponsor?",
      "D",
      "Could you list the sponsors along with the total number of sessions they have organized? What is the combined maximum enrollment, minimum fee, and maximum fee for these sessions? Furthermore, how many sessions have information and how many do not for each sponsor?"
    ],
    "oracle_sql": "SELECT issr.SPONSOR_NAME, COUNT(DISTINCT iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions, SUM(isd.MAX_ENROLLMENT), MIN(isd.FEE) AS Min_Fee, MAX(isd.FEE) AS Max_Fee, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'Y' THEN 1 ELSE 0 END) AS Num_Sessions_With_Info, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'N' THEN 1 ELSE 0 END) AS Num_Sessions_Without_Info FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR issr ON isd.IAP_SUBJECT_SPONSOR_KEY = issr.IAP_SUBJECT_SPONSOR_KEY GROUP BY issr.SPONSOR_NAME;",
    "question": "Show the sponsor names along with the total count of unique sessions, the sum of maximum enrollments, the minimum fee, the maximum fee, the count of sessions with information, and the count of sessions without information for each sponsor in the IAP subject sessions.",
    "sql": "",
    "question_ts_and_es": "A"
  },
  {
    "adjusted": true,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For email lists with names starting with C (case insensitive) and containing faculty who teach courses in the summer in financial aid years after 2001, provide the name of the list, the number of people in the list, and the number of faculty in the list.",
    "gold-sql": "WITH FilteredLists AS ( SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME FROM MOIRA_LIST ml WHERE upper(ml.MOIRA_LIST_NAME) LIKE 'C%' ) SELECT DISTINCT fl.MOIRA_LIST_NAME AS Moira_List_Name, COUNT(mld.MOIRA_LIST_MEMBER) AS Member_Count, COUNT(DISTINCT ed.MIT_ID) AS Distinct_Faculty_Count FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON UPPER(ed.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN FilteredLists fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' AND CAST(at.FINANCIAL_AID_YEAR AS UNSIGNED) > 2001 GROUP BY fl.MOIRA_LIST_NAME;",
    "options": [
      "How many members are there in each Moira list that starts with the letter 'C', and how many distinct faculty members are associated with each of these lists? The output includes the Moira list names, the total member count, and the count of distinct faculty members for each list.",
      "Which Moira lists, starting with the letter 'C', have a specific academic term code ending in 'SU' and a financial aid year greater than 2001? For each of these lists, how many members are there, and how many distinct faculty members are associated with them?",
      "What are the names of Moira lists that have academic terms ending in 'SU' and financial aid years after 2001? For each of these lists, how many members are there, and how many distinct faculty members are associated with them?",
      "How many members and distinct faculty members are associated with Moira lists that have academic terms ending in 'SU' and financial aid years greater than 2001? The output includes the Moira list names, total member count, and count of distinct faculty members for each list."
    ],
    "oracle_sql": "WITH FilteredLists AS ( SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME FROM MOIRA_LIST ml WHERE upper(ml.MOIRA_LIST_NAME) LIKE 'C%' ) SELECT DISTINCT fl.MOIRA_LIST_NAME AS Moira_List_Name, COUNT(mld.MOIRA_LIST_MEMBER) AS Member_Count, COUNT(DISTINCT ed.MIT_ID) AS Distinct_Faculty_Count FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON UPPER(ed.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN FilteredLists fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' AND CAST(at.FINANCIAL_AID_YEAR AS UNSIGNED) > 2001 GROUP BY fl.MOIRA_LIST_NAME;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH FilteredLists AS (\n    SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME \n    FROM MOIRA_LIST ml \n    WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'C%'\n)\n\nSELECT DISTINCT fl.MOIRA_LIST_NAME AS Moira_List_Name, \n    COUNT(mld.MOIRA_LIST_MEMBER) AS Member_Count, \n    COUNT(DISTINCT ed.MIT_ID) AS Distinct_Faculty_Count \nFROM COURSE_CATALOG_SUBJECT_OFFERED ccso \nJOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID \nJOIN MOIRA_LIST_DETAIL mld ON UPPER(ed.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) \nJOIN FilteredLists fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY \nJOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE \nWHERE at.TERM_CODE LIKE '%SU' \n    AND CAST(at.FINANCIAL_AID_YEAR AS UNSIGNED) > 2001 \nGROUP BY fl.MOIRA_LIST_NAME;",
    "sql_decomposition": [
      {
        "question": "What are the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` for entries in the `MOIRA_LIST` table where the `MOIRA_LIST_NAME` starts with the letter 'C'? The output includes the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` columns for these entries.",
        "gold-sql": "SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME FROM MOIRA_LIST AS ml WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'C%'",
        "title": "FilteredLists",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` for entries in the `MOIRA_LIST` table where the `MOIRA_LIST_NAME` starts with the letter 'C'? The output includes the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` columns for these entries.",
          "B",
          "Can you provide the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` for records in the `MOIRA_LIST` table where the `MOIRA_LIST_NAME` begins with 'C'? The result displays the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` columns for these specific entries.",
          "C",
          "Which `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` are listed in the `MOIRA_LIST` table with names starting with 'C'? The output shows the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` columns for these records.",
          "D",
          "List the `MOIRA_LIST_KEY` and `MOIRA_LIST_NAME` from the `MOIRA_LIST` table where the names start with 'C'. The result includes these columns for the relevant entries."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the names of Moira lists, the total number of members in each list, and the count of distinct faculty members associated with each list? The query combines data from multiple tables to calculate these values, filtering by specific academic terms and financial aid years. The final result groups the output by Moira list names.",
        "gold-sql": "SELECT DISTINCT fl.MOIRA_LIST_NAME AS Moira_List_Name, \n    COUNT(mld.MOIRA_LIST_MEMBER) AS Member_Count, \n    COUNT(DISTINCT ed.MIT_ID) AS Distinct_Faculty_Count \nFROM COURSE_CATALOG_SUBJECT_OFFERED ccso \nJOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID \nJOIN MOIRA_LIST_DETAIL mld ON UPPER(ed.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) \nJOIN FilteredLists fl ON mld.MOIRA_LIST_KEY = fl.MOIRA_LIST_KEY \nJOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE \nWHERE at.TERM_CODE LIKE '%SU' \n    AND CAST(at.FINANCIAL_AID_YEAR AS UNSIGNED) > 2001 \nGROUP BY fl.MOIRA_LIST_NAME;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the names of Moira lists, the total number of members in each list, and the count of distinct faculty members associated with each list? The query combines data from multiple tables to calculate these values, filtering by specific academic terms and financial aid years. The final result groups the output by Moira list names.",
          "B",
          "Which Moira lists have been filtered based on specific academic terms for summer sessions with financial aid years greater than 2001? The query counts the total members in each list and the distinct faculty members associated with them. The results are grouped by Moira list names.",
          "C",
          "How many members are in each Moira list, and how many distinct faculty members are linked to each list for summer terms after the year 2001? By joining various tables and applying filters, the query calculates these values and presents the results grouped by Moira list names.",
          "D",
          "What are the Moira list names, the total count of members in each list, and the number of unique faculty members associated with those lists for summer terms post the year 2001? The query combines data from different tables, filtering by specific academic terms and financial aid years, and then groups the output by Moira list names."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Which Moira lists, starting with the letter 'C', have a specific academic term code ending in 'SU' and a financial aid year greater than 2001? For each of these lists, how many members are there, and how many distinct faculty members are associated with them?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each department and material status, list the name of the department, the material status, the number of TIP materials associated with this department and status, the number of library materials associated with this department and status, the total number of TIP and library materials associated with this department and status. Include a subtotal for each department and a grand total across all departments.",
    "gold-sql": "WITH TIPMaterialStatuses AS ( SELECT tso.OFFER_DEPT_NAME AS Department, tms.TIP_MATERIAL_STATUS AS Status, COUNT(td.TIP_MATERIAL_KEY) AS Total_TIP_Materials FROM TIP_DETAIL td JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY tso.OFFER_DEPT_NAME, tms.TIP_MATERIAL_STATUS ), LibraryMaterialStatuses AS ( SELECT lso.OFFER_DEPT_NAME AS Department, lms.LIBRARY_MATERIAL_STATUS AS Status, COUNT(lrmd.LIBRARY_RESERVE_CATALOG_KEY) AS Total_Library_Materials FROM LIBRARY_RESERVE_MATRL_DETAIL lrmd JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lso.OFFER_DEPT_NAME, lms.LIBRARY_MATERIAL_STATUS ), CombinedStatuses AS ( SELECT Department, Status, Total_TIP_Materials, 0 AS Total_Library_Materials FROM TIPMaterialStatuses UNION ALL SELECT Department, Status, 0 AS Total_TIP_Materials, Total_Library_Materials FROM LibraryMaterialStatuses ) SELECT Department, Status, SUM(Total_TIP_Materials) AS Total_TIP_Materials, SUM(Total_Library_Materials) AS Total_Library_Materials, SUM(Total_TIP_Materials + Total_Library_Materials) AS Total_All_Materials FROM CombinedStatuses GROUP BY Department, Status WITH ROLLUP ORDER BY Department, Status;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "WITH TIPMaterialStatuses AS ( SELECT tso.OFFER_DEPT_NAME AS Department, tms.TIP_MATERIAL_STATUS AS Status, COUNT(td.TIP_MATERIAL_KEY) AS Total_TIP_Materials FROM TIP_DETAIL td JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY tso.OFFER_DEPT_NAME, tms.TIP_MATERIAL_STATUS ), LibraryMaterialStatuses AS ( SELECT lso.OFFER_DEPT_NAME AS Department, lms.LIBRARY_MATERIAL_STATUS AS Status, COUNT(lrmd.LIBRARY_RESERVE_CATALOG_KEY) AS Total_Library_Materials FROM LIBRARY_RESERVE_MATRL_DETAIL lrmd JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lso.OFFER_DEPT_NAME, lms.LIBRARY_MATERIAL_STATUS ), CombinedStatuses AS ( SELECT COALESCE(tms.Department, lms.Department) AS Department, COALESCE(tms.Status, lms.Status) AS Status, COALESCE(tms.Total_TIP_Materials, 0) AS Total_TIP_Materials, COALESCE(lms.Total_Library_Materials, 0) AS Total_Library_Materials FROM TIPMaterialStatuses tms FULL OUTER JOIN LibraryMaterialStatuses lms ON tms.Department = lms.Department AND tms.Status = lms.Status ) SELECT Department, Status, SUM(Total_TIP_Materials) AS Total_TIP_Materials, SUM(Total_Library_Materials) AS Total_Library_Materials, SUM(Total_TIP_Materials + Total_Library_Materials) AS Total_All_Materials FROM CombinedStatuses GROUP BY ROLLUP(Department, Status) ORDER BY Department, Status;",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH TIPMaterialStatuses AS ( SELECT tso.OFFER_DEPT_NAME AS Department, tms.TIP_MATERIAL_STATUS AS Status, COUNT(td.TIP_MATERIAL_KEY) AS Total_TIP_Materials FROM TIP_DETAIL td JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY tso.OFFER_DEPT_NAME, tms.TIP_MATERIAL_STATUS ), LibraryMaterialStatuses AS ( SELECT lso.OFFER_DEPT_NAME AS Department, lms.LIBRARY_MATERIAL_STATUS AS Status, COUNT(lrmd.LIBRARY_RESERVE_CATALOG_KEY) AS Total_Library_Materials FROM LIBRARY_RESERVE_MATRL_DETAIL lrmd JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lso.OFFER_DEPT_NAME, lms.LIBRARY_MATERIAL_STATUS ) SELECT Department, Status, Total_TIP_Materials, 0 AS Total_Library_Materials FROM TIPMaterialStatuses UNION ALL SELECT Department, Status, 0 AS Total_TIP_Materials, Total_Library_Materials FROM LibraryMaterialStatuses;",
    "sql_decomposition": [
      {
        "question": "What are the total TIP materials available for each department along with their status? The output includes the department name, material status, and the total count of TIP materials for each combination of department and status.",
        "gold-sql": "SELECT tso.OFFER_DEPT_NAME AS Department, tms.TIP_MATERIAL_STATUS AS Status, COUNT(td.TIP_MATERIAL_KEY) AS Total_TIP_Materials FROM TIP_DETAIL AS td JOIN TIP_SUBJECT_OFFERED AS tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL_STATUS AS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY tso.OFFER_DEPT_NAME, tms.TIP_MATERIAL_STATUS",
        "title": "TIPMaterialStatuses",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the total TIP materials available for each department along with their status? The output includes the department name, material status, and the total count of TIP materials for each combination of department and status.",
          "B",
          "How many TIP materials are there for each department, categorized by their status? The result displays the department name, material status, and the total count of TIP materials for each unique combination of department and status.",
          "C",
          "Can you provide a breakdown of TIP materials by department and their respective status? The output lists the department name, material status, and the total count of TIP materials for each department and status combination.",
          "D",
          "What is the distribution of TIP materials across different departments based on their status? The result shows the department name, material status, and the total count of TIP materials for each department and status combination."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the total library materials for each department based on their status? Show the department name, the status of the library materials, and the total count of library materials. Which department has the highest count of unknown status library materials?",
        "gold-sql": "SELECT lso.OFFER_DEPT_NAME AS Department, lms.LIBRARY_MATERIAL_STATUS AS Status, COUNT(lrmd.LIBRARY_RESERVE_CATALOG_KEY) AS Total_Library_Materials FROM LIBRARY_RESERVE_MATRL_DETAIL AS lrmd JOIN LIBRARY_SUBJECT_OFFERED AS lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_MATERIAL_STATUS AS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lso.OFFER_DEPT_NAME, lms.LIBRARY_MATERIAL_STATUS",
        "title": "LibraryMaterialStatuses",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the total library materials for each department based on their status? Show the department name, the status of the library materials, and the total count of library materials. Which department has the highest count of unknown status library materials?",
          "B",
          "How many library materials are there for each department, categorized by their status? List the department name, the status of the library materials, and the total number of library materials. Can you identify the department with the most required course materials?",
          "C",
          "Which departments have the highest number of library materials, and how are they classified based on their status? Display the department name, the status of the library materials, and the total count of library materials. Which department has the most reserve-only materials?",
          "D",
          "Can you provide a breakdown of the total library materials for each department according to their status? Include the department name, the status of the materials, and the overall count of library materials. Is there a department with a significant number of non-required course materials?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the combined list of departments along with their statuses and the total TIP materials available in each department? The output includes a column for total TIP materials and another column for total library materials, with the latter being zero for all rows.",
        "gold-sql": "SELECT Department, Status, Total_TIP_Materials, 0 AS Total_Library_Materials FROM TIPMaterialStatuses UNION ALL SELECT Department, Status, 0 AS Total_TIP_Materials, Total_Library_Materials FROM LibraryMaterialStatuses;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the combined list of departments along with their statuses and the total TIP materials available in each department? The output includes a column for total TIP materials and another column for total library materials, with the latter being zero for all rows.",
          "B",
          "How can we display the departments and their corresponding statuses, along with the total TIP materials available in each department? The query also includes a column for total library materials, which is populated with zeros for all rows.",
          "C",
          "In what way can we show the departments and their statuses, along with the total TIP materials available in each department? The query appends a column for total library materials, with all values set to zero.",
          "D",
          "What is the comprehensive list of departments and their statuses, including the total TIP materials available in each department? The output also includes a column for total library materials, with values set to zero."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "List the name and floor of the building with the largest floor number.",
    "gold-sql": "SELECT DISTINCT B.BUILDING_NAME, A.FLOOR FROM FAC_FLOOR A JOIN FAC_BUILDING B ON A.BUILDING_KEY = B.FAC_BUILDING_KEY JOIN (SELECT MAX(f) AS highest_floor FROM (SELECT CASE WHEN FLOOR REGEXP '^[0-9]+$' THEN CAST(FLOOR AS UNSIGNED) ELSE NULL END AS f FROM FAC_FLOOR) AS subquery1) AS subquery2 ON (CASE WHEN A.FLOOR REGEXP '^[0-9]+$' THEN CAST(A.FLOOR AS UNSIGNED) ELSE NULL END) = subquery2.highest_floor;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT DISTINCT B.BUILDING_NAME, A.FLOOR FROM FAC_FLOOR A JOIN FAC_BUILDING B ON A.BUILDING_KEY = B.FAC_BUILDING_KEY JOIN (SELECT max(f) as highest_floor FROM (SELECT CASE WHEN REGEXP_LIKE(FLOOR, '^\\d+$') THEN TO_NUMBER(FLOOR) ELSE NULL END AS f FROM fac_floor)) ON (CASE WHEN REGEXP_LIKE(A.FLOOR, '^\\d+$') THEN TO_NUMBER(FLOOR) ELSE NULL END) = highest_floor;",
    "question": "4. Show the unique names of buildings and their respective floor numbers for the highest floor in each building, utilizing the floor data to identify the topmost floor levels effectively.",
    "sql": "",
    "sql_in_cte": "WITH subquery1 AS (\n    SELECT CASE WHEN FLOOR REGEXP '^[0-9]+$' THEN CAST(FLOOR AS UNSIGNED) ELSE NULL END AS f \n    FROM FAC_FLOOR\n)\nSELECT DISTINCT B.BUILDING_NAME, A.FLOOR \nFROM FAC_FLOOR A \nJOIN FAC_BUILDING B ON A.BUILDING_KEY = B.FAC_BUILDING_KEY \nJOIN (\n    SELECT MAX(f) AS highest_floor \n    FROM subquery1\n) AS subquery2 ON (CASE WHEN A.FLOOR REGEXP '^[0-9]+$' THEN CAST(A.FLOOR AS UNSIGNED) ELSE NULL END) = subquery2.highest_floor;",
    "sql_decomposition": [
      {
        "question": "What are the numeric values extracted from the 'FLOOR' column in the 'FAC_FLOOR' table? If the 'FLOOR' column contains non-numeric values, what is displayed instead?",
        "gold-sql": "SELECT CASE WHEN REGEXP_LIKE(FLOOR, '^[0-9]+$') THEN CAST(FLOOR AS UNSIGNED) ELSE NULL END AS f FROM FAC_FLOOR",
        "title": "subquery1",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the numeric values extracted from the 'FLOOR' column in the 'FAC_FLOOR' table? If the 'FLOOR' column contains non-numeric values, what is displayed instead?",
          "B",
          "How can we convert the 'FLOOR' column values in the 'FAC_FLOOR' table to unsigned integers if they are numeric? What is displayed for non-numeric values?",
          "C",
          "In the 'FAC_FLOOR' table, how can we identify and extract only the numeric values from the 'FLOOR' column? What is displayed for non-numeric values in the 'FLOOR' column?",
          "D",
          "What does the 'f' column represent after converting the 'FLOOR' column values to unsigned integers in the 'FAC_FLOOR' table? How are non-numeric values handled in this conversion process?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique building names and their corresponding floors where the floor number matches the highest floor number across all buildings? The output includes the building name and floor number.",
        "gold-sql": "SELECT DISTINCT B.BUILDING_NAME, A.FLOOR \nFROM FAC_FLOOR A \nJOIN FAC_BUILDING B ON A.BUILDING_KEY = B.FAC_BUILDING_KEY \nJOIN (\n    SELECT MAX(f) AS highest_floor \n    FROM subquery1\n) AS subquery2 ON (CASE WHEN A.FLOOR REGEXP '^[0-9]+$' THEN CAST(A.FLOOR AS UNSIGNED) ELSE NULL END) = subquery2.highest_floor;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique building names and their corresponding floors where the floor number matches the highest floor number across all buildings? The output includes the building name and floor number.",
          "B",
          "Which building names are associated with the floor number that matches the highest floor number across all buildings? The result displays the unique building names along with their respective floor numbers.",
          "C",
          "Can you provide a list of building names and their corresponding floor numbers where the floor number matches the highest floor number among all buildings? The query returns distinct building names and floor numbers.",
          "D",
          "How can we identify the building names and their respective floor numbers that align with the highest floor number across all buildings? The output consists of unique building names and their corresponding floor numbers."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each IAP category, list its name, number of unique sessions, total number of attendees, active period (in the format of 'beginning term code-end term code'), the most common sponsor name, and the most common session start time. Include a grand total row showing the total number of sessions and attendees across all categories in the format of ('TOTAL', number of sessions, number of attendees, null, null, null).",
    "gold-sql": "WITH SponsorAndStartTime AS (SELECT isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME, COUNT(isp.SPONSOR_NAME) AS sponsor_count, COUNT(iss.SESSION_START_TIME) AS start_time_count FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN IAP_SUBJECT_SESSION iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY LEFT JOIN IAP_SUBJECT_SPONSOR isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY GROUP BY isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME), MostCommonDetails AS (SELECT IAP_CATEGORY_NAME, (SELECT SPONSOR_NAME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SPONSOR_NAME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_sponsor, (SELECT SESSION_START_TIME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SESSION_START_TIME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_start_time FROM SponsorAndStartTime sast GROUP BY IAP_CATEGORY_NAME), CategorySummary AS (SELECT isc.IAP_CATEGORY_NAME AS TYPE, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS nr_sessions, FORMAT(SUM(isd.MAX_ENROLLMENT), 0) AS total_attend, MIN(isd.TERM_CODE) AS first_active_year, MAX(isd.TERM_CODE) AS last_active_year, mcd.most_common_sponsor, mcd.most_common_start_time FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN MostCommonDetails mcd ON isc.IAP_CATEGORY_NAME = mcd.IAP_CATEGORY_NAME GROUP BY isc.IAP_CATEGORY_NAME, mcd.most_common_sponsor, mcd.most_common_start_time) SELECT TYPE, nr_sessions, total_attend, CONCAT(first_active_year, '-', last_active_year) AS active_years, most_common_sponsor, most_common_start_time FROM CategorySummary UNION ALL SELECT 'TOTAL', COUNT(DISTINCT IAP_SUBJECT_SESSION_KEY), FORMAT(SUM(MAX_ENROLLMENT), 0), NULL, NULL, NULL FROM IAP_SUBJECT_DETAIL ORDER BY TYPE;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "WITH SponsorAndStartTime AS ( SELECT isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME, COUNT(isp.SPONSOR_NAME) AS sponsor_count, COUNT(iss.SESSION_START_TIME) AS start_time_count FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN IAP_SUBJECT_SESSION iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY LEFT JOIN IAP_SUBJECT_SPONSOR isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY GROUP BY isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME ), MostCommonDetails AS ( SELECT IAP_CATEGORY_NAME, MAX(SPONSOR_NAME) KEEP (DENSE_RANK FIRST ORDER BY sponsor_count DESC) AS most_common_sponsor, MAX(SESSION_START_TIME) KEEP (DENSE_RANK FIRST ORDER BY start_time_count DESC) AS most_common_start_time FROM SponsorAndStartTime GROUP BY IAP_CATEGORY_NAME ), CategorySummary AS ( SELECT isc.IAP_CATEGORY_NAME AS TYPE, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS nr_sessions, TO_CHAR(SUM(isd.MAX_ENROLLMENT), '999,999,999,999') AS total_attend, MIN(isd.TERM_CODE) AS first_active_year, MAX(isd.TERM_CODE) AS last_active_year, mcd.most_common_sponsor, mcd.most_common_start_time FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN MostCommonDetails mcd ON isc.IAP_CATEGORY_NAME = mcd.IAP_CATEGORY_NAME GROUP BY isc.IAP_CATEGORY_NAME, mcd.most_common_sponsor, mcd.most_common_start_time ) SELECT TYPE, nr_sessions, total_attend, first_active_year || '-' || last_active_year AS active_years, most_common_sponsor, most_common_start_time FROM CategorySummary UNION ALL SELECT 'TOTAL', COUNT(DISTINCT IAP_SUBJECT_SESSION_KEY), TO_CHAR(SUM(MAX_ENROLLMENT), '999,999,999,999'), NULL, NULL, NULL FROM IAP_SUBJECT_DETAIL ORDER BY TYPE;",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH SponsorAndStartTime AS (\n    SELECT isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME, \n           COUNT(isp.SPONSOR_NAME) AS sponsor_count, COUNT(iss.SESSION_START_TIME) AS start_time_count \n    FROM IAP_SUBJECT_CATEGORY isc \n    JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY \n    LEFT JOIN IAP_SUBJECT_SESSION iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY \n    LEFT JOIN IAP_SUBJECT_SPONSOR isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY \n    GROUP BY isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME\n), MostCommonDetails AS (\n    SELECT IAP_CATEGORY_NAME, \n           (SELECT SPONSOR_NAME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SPONSOR_NAME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_sponsor, \n           (SELECT SESSION_START_TIME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SESSION_START_TIME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_start_time \n    FROM SponsorAndStartTime sast \n    GROUP BY IAP_CATEGORY_NAME\n), CategorySummary AS (\n    SELECT isc.IAP_CATEGORY_NAME AS TYPE, \n           COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS nr_sessions, \n           TOTAL(SUM(isd.MAX_ENROLLMENT), 0) AS total_attend, \n           MIN(isd.TERM_CODE) AS first_active_year, \n           MAX(isd.TERM_CODE) AS last_active_year, \n           mcd.most_common_sponsor, \n           mcd.most_common_start_time \n    FROM IAP_SUBJECT_CATEGORY isc \n    JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY \n    LEFT JOIN MostCommonDetails mcd ON isc.IAP_CATEGORY_NAME = mcd.IAP_CATEGORY_NAME \n    GROUP BY isc.IAP_CATEGORY_NAME, mcd.most_common_sponsor, mcd.most_common_start_time\n)\nSELECT TYPE, nr_sessions, total_attend, \n       first_active_year || '-' || last_active_year AS active_years, \n       most_common_sponsor, most_common_start_time \nFROM CategorySummary \nUNION ALL \nSELECT 'TOTAL', COUNT(DISTINCT IAP_SUBJECT_SESSION_KEY), TOTAL(SUM(MAX_ENROLLMENT), 0), NULL, NULL, NULL \nFROM IAP_SUBJECT_DETAIL \nORDER BY TYPE;",
    "sql_decomposition": [
      {
        "question": "This query retrieves the **count of sponsors and session start times** for each **IAP category**. The output includes the **IAP category name**, **sponsor name**, **session start time**, **sponsor count**, and **start time count**. It calculates the **number of sponsors** and **session start times** for each category by counting occurrences. The result shows the **sponsor count** and **start time count** for different sponsors and session start times within each IAP category.",
        "gold-sql": "SELECT isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME, COUNT(isp.SPONSOR_NAME) AS sponsor_count, COUNT(iss.SESSION_START_TIME) AS start_time_count FROM IAP_SUBJECT_CATEGORY AS isc JOIN IAP_SUBJECT_DETAIL AS isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN IAP_SUBJECT_SESSION AS iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY LEFT JOIN IAP_SUBJECT_SPONSOR AS isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY GROUP BY isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME",
        "title": "SponsorAndStartTime",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "This query retrieves the **count of sponsors and session start times** for each **IAP category**.",
          "The output includes the **IAP category name**, **sponsor name**, **session start time**, **sponsor count**, and **start time count**.",
          "It calculates the **number of sponsors** and **session start times** for each category by counting occurrences.",
          "The result shows the **sponsor count** and **start time count** for different sponsors and session start times within each IAP category.",
          "B",
          "What are the **sponsor count** and **start time count** for each **IAP category** along with the **sponsor name** and **session start time**?",
          "The output lists the **IAP category name**, **sponsor name**, **session start time**, **sponsor count**, and **start time count**.",
          "It computes the **number of sponsors** and **session start times** for each category by tallying occurrences.",
          "The summary displays the **sponsor count** and **start time count** for various sponsors and session start times within each IAP category.",
          "C",
          "How many sponsors and session start times are associated with each **IAP category**?",
          "The columns in the result include **IAP category name**, **sponsor name**, **session start time**, **sponsor count**, and **start time count**.",
          "It determines the **count of sponsors** and **session start times** for each category by tallying occurrences.",
          "The outcome showcases the **sponsor count** and **start time count** for different sponsors and session start times within each IAP category.",
          "D",
          "What is the distribution of **sponsor count** and **start time count** across various **IAP categories**?",
          "The output presents the **IAP category name**, **sponsor name**, **session start time**, **sponsor count**, and **start time count**.",
          "It calculates the **number of sponsors** and **session start times** for each category by counting instances.",
          "The final data illustrates the **sponsor count** and **start time count** for different sponsors and session start times within each IAP category."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the most common sponsor and start time for each IAP category in the SponsorAndStartTime table?",
        "gold-sql": "SELECT IAP_CATEGORY_NAME, (SELECT SPONSOR_NAME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SPONSOR_NAME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_sponsor, (SELECT SESSION_START_TIME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SESSION_START_TIME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_start_time FROM SponsorAndStartTime AS sast GROUP BY IAP_CATEGORY_NAME",
        "title": "MostCommonDetails",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the most common sponsor and start time for each IAP category in the SponsorAndStartTime table?",
          "B",
          "For each IAP category, which sponsor and start time occur most frequently in the SponsorAndStartTime table?",
          "C",
          "How can we determine the most common sponsor and start time for each IAP category based on the data in the SponsorAndStartTime table?",
          "D",
          "Which sponsor and start time are most frequently associated with each IAP category in the SponsorAndStartTime table?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the different types of IAP categories along with the number of unique sessions, total attendance, first active year, last active year, most common sponsor, and most common start time for each category?",
        "gold-sql": "SELECT isc.IAP_CATEGORY_NAME AS TYPE, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS nr_sessions, TOTAL(SUM(isd.MAX_ENROLLMENT), 0) AS total_attend, MIN(isd.TERM_CODE) AS first_active_year, MAX(isd.TERM_CODE) AS last_active_year, mcd.most_common_sponsor, mcd.most_common_start_time FROM IAP_SUBJECT_CATEGORY AS isc JOIN IAP_SUBJECT_DETAIL AS isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN MostCommonDetails AS mcd ON isc.IAP_CATEGORY_NAME = mcd.IAP_CATEGORY_NAME GROUP BY isc.IAP_CATEGORY_NAME, mcd.most_common_sponsor, mcd.most_common_start_time",
        "title": "CategorySummary",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the different types of IAP categories along with the number of unique sessions, total attendance, first active year, last active year, most common sponsor, and most common start time for each category?",
          "B",
          "How many unique sessions, total attendance, first active year, last active year, most common sponsor, and most common start time are associated with each IAP category?",
          "C",
          "Which IAP categories have the highest number of unique sessions, and what is the total attendance, first active year, last active year, most common sponsor, and most common start time for each of these categories?",
          "D",
          "For each IAP category, what is the count of unique sessions, total attendance, first active year, last active year, most common sponsor, and most common start time?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the different types of IAP categories along with the number of sessions, total attendance, active years, most common sponsor, and most common start time for each category?",
        "gold-sql": "SELECT IAP_CATEGORY_NAME, \n           (SELECT SPONSOR_NAME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SPONSOR_NAME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_sponsor, \n           (SELECT SESSION_START_TIME FROM SponsorAndStartTime WHERE IAP_CATEGORY_NAME = sast.IAP_CATEGORY_NAME GROUP BY SESSION_START_TIME ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_start_time \n    FROM SponsorAndStartTime sast \n    GROUP BY IAP_CATEGORY_NAME\n), CategorySummary AS (\n    SELECT isc.IAP_CATEGORY_NAME AS TYPE, \n           COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS nr_sessions, \n           TOTAL(SUM(isd.MAX_ENROLLMENT), 0) AS total_attend, \n           MIN(isd.TERM_CODE) AS first_active_year, \n           MAX(isd.TERM_CODE) AS last_active_year, \n           mcd.most_common_sponsor, \n           mcd.most_common_start_time \n    FROM IAP_SUBJECT_CATEGORY isc \n    JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY \n    LEFT JOIN MostCommonDetails mcd ON isc.IAP_CATEGORY_NAME = mcd.IAP_CATEGORY_NAME \n    GROUP BY isc.IAP_CATEGORY_NAME, mcd.most_common_sponsor, mcd.most_common_start_time\n)\nSELECT TYPE, nr_sessions, total_attend, \n       first_active_year || '-' || last_active_year AS active_years, \n       most_common_sponsor, most_common_start_time \nFROM CategorySummary \nUNION ALL \nSELECT 'TOTAL', COUNT(DISTINCT IAP_SUBJECT_SESSION_KEY), TOTAL(SUM(MAX_ENROLLMENT), 0), NULL, NULL, NULL \nFROM IAP_SUBJECT_DETAIL \nORDER BY TYPE;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the different types of IAP categories along with the number of sessions, total attendance, active years, most common sponsor, and most common start time for each category?",
          "B",
          "Can you provide a summary of IAP categories including the number of sessions, total attendance, active years, most common sponsor, and most common start time for each category?",
          "C",
          "How many sessions were held, what was the total attendance, and what were the active years for each type of IAP category? Additionally, who were the most common sponsors and what were the most common start times for these categories?",
          "D",
          "For each IAP category, could you list the number of sessions, total attendance, active years, most common sponsor, and most common start time? Additionally, provide a total count of sessions and attendance across all categories."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each mailing list that involves subscribers that work in departments with names starting with 'Computer Science', state the ownership type, the list name, the number of owners, and the number of subscribers. Display the ownership type only if it differs from the previous entry. Include subtotals (the corresponding type field shoud be 'SUBTOTAL') for each ownership type and a grand total (the corresponding type field shoud be 'TOTAL') across all ownership types.",
    "gold-sql": "SELECT CASE WHEN LAG(OWNERSHIP_TYPE) OVER (ORDER BY OWNERSHIP_TYPE_gr DESC, ML) = OWNERSHIP_TYPE THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, ML, nr_owner, nr_member FROM (SELECT CASE WHEN OWNER_TYPE IS NULL AND MOIRA_LIST_NAME IS NOT NULL THEN CONCAT(OWNER_TYPE, '1') ELSE CONCAT(OWNER_TYPE, '2') END AS OWNERSHIP_TYPE_gr, CASE WHEN MOIRA_LIST_NAME IS NULL AND OWNER_TYPE IS NOT NULL THEN 'SUBTOTAL' WHEN MOIRA_LIST_NAME IS NULL AND OWNER_TYPE IS NULL THEN 'TOTAL' ELSE OWNER_TYPE END AS OWNERSHIP_TYPE, MOIRA_LIST_NAME AS ML, COUNT(DISTINCT OWNER) AS nr_owner, COUNT(DISTINCT MOIRA_LIST_MEMBER_MIT_ID) AS nr_member FROM MOIRA_LIST_OWNER mlo JOIN MOIRA_LIST_DETAIL mld ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ON MIT_ID = MOIRA_LIST_MEMBER_MIT_ID WHERE department_name LIKE 'Computer Science%' GROUP BY OWNER_TYPE, MOIRA_LIST_NAME WITH ROLLUP ORDER BY OWNER_TYPE DESC, MOIRA_LIST_NAME) tbltmp;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT CASE WHEN LAG(OWNERSHIP_TYPE) OVER (ORDER BY OWNERSHIP_TYPE_gr DESC, ML) = OWNERSHIP_TYPE THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, ML, nr_owner, nr_member FROM (SELECT CASE WHEN GROUPING(OWNER_TYPE) = 1 AND GROUPING(MOIRA_LIST_NAME) = 0 THEN OWNER_TYPE || '1' ELSE OWNER_TYPE || '2' END AS OWNERSHIP_TYPE_gr, CASE WHEN GROUPING(MOIRA_LIST_NAME) = 1 AND GROUPING(OWNER_TYPE) = 0 THEN 'SUBTOTAL' WHEN GROUPING(MOIRA_LIST_NAME) = 1 AND GROUPING(OWNER_TYPE) = 1 THEN 'TOTAL' ELSE OWNER_TYPE END AS OWNERSHIP_TYPE, MOIRA_LIST_NAME AS ML, COUNT(DISTINCT OWNER) AS nr_owner, COUNT(DISTINCT MOIRA_LIST_MEMBER_MIT_ID) AS nr_member FROM MOIRA_LIST_OWNER mlo JOIN MOIRA_LIST_DETAIL mld ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ON MIT_ID = MOIRA_LIST_MEMBER_MIT_ID WHERE department_name LIKE 'Computer Science%' GROUP BY ROLLUP(OWNER_TYPE, MOIRA_LIST_NAME) ORDER BY OWNER_TYPE DESC, MOIRA_LIST_NAME) tbltmp",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH ownership_data AS (\n    SELECT CASE WHEN OWNER_TYPE IS NULL AND NOT MOIRA_LIST_NAME IS NULL THEN CONCAT(OWNER_TYPE, '1') ELSE CONCAT(OWNER_TYPE, '2') END AS OWNERSHIP_TYPE_gr, \n           CASE WHEN MOIRA_LIST_NAME IS NULL AND NOT OWNER_TYPE IS NULL THEN 'SUBTOTAL' \n                WHEN MOIRA_LIST_NAME IS NULL AND OWNER_TYPE IS NULL THEN 'TOTAL' \n                ELSE OWNER_TYPE END AS OWNERSHIP_TYPE, \n           MOIRA_LIST_NAME AS ML, \n           COUNT(DISTINCT OWNER) AS nr_owner, \n           COUNT(DISTINCT MOIRA_LIST_MEMBER_MIT_ID) AS nr_member \n    FROM MOIRA_LIST_OWNER AS mlo \n    JOIN MOIRA_LIST_DETAIL AS mld ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY \n    JOIN MOIRA_LIST AS ml ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY \n    JOIN EMPLOYEE_DIRECTORY ON MIT_ID = MOIRA_LIST_MEMBER_MIT_ID \n    WHERE department_name LIKE 'Computer Science%' \n    GROUP BY OWNER_TYPE, MOIRA_LIST_NAME \n    WITH ROLLUP\n)\nSELECT CASE WHEN LAG(OWNERSHIP_TYPE) OVER (ORDER BY OWNERSHIP_TYPE_gr DESC, ML) = OWNERSHIP_TYPE THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, ML, nr_owner, nr_member \nFROM ownership_data;",
    "sql_decomposition": [
      {
        "question": "",
        "gold-sql": "SELECT CASE WHEN OWNER_TYPE IS NULL AND NOT MOIRA_LIST_NAME IS NULL THEN CONCAT(OWNER_TYPE, '1') ELSE CONCAT(OWNER_TYPE, '2') END AS OWNERSHIP_TYPE_gr, CASE WHEN MOIRA_LIST_NAME IS NULL AND NOT OWNER_TYPE IS NULL THEN 'SUBTOTAL' WHEN MOIRA_LIST_NAME IS NULL AND OWNER_TYPE IS NULL THEN 'TOTAL' ELSE OWNER_TYPE END AS OWNERSHIP_TYPE, MOIRA_LIST_NAME AS ML, COUNT(DISTINCT OWNER) AS nr_owner, COUNT(DISTINCT MOIRA_LIST_MEMBER_MIT_ID) AS nr_member FROM MOIRA_LIST_OWNER AS mlo JOIN MOIRA_LIST_DETAIL AS mld ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST AS ml ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ON MIT_ID = MOIRA_LIST_MEMBER_MIT_ID WHERE department_name LIKE 'Computer Science%' GROUP BY OWNER_TYPE, MOIRA_LIST_NAME WITH ROLLUP",
        "title": "ownership_data",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the different ownership types and their corresponding counts for the members in the Computer Science department? Include a breakdown of the ownership types, such as 'SUBTOTAL' and 'TOTAL', along with the respective member counts.",
          "B",
          "How many owners and members are there for each ownership type within the Computer Science department? The query provides a summary of the ownership types, including 'SUBTOTAL' and 'TOTAL', and their corresponding counts.",
          "C",
          "Can you list the ownership types and their member counts for the Computer Science department? The output includes a breakdown of ownership types, distinguishing between 'SUBTOTAL' and 'TOTAL', and the number of members associated with each type.",
          "D",
          "What is the distribution of ownership types and their member counts in the Computer Science department? The query summarizes the different ownership types, including 'SUBTOTAL' and 'TOTAL', and the corresponding member counts for each type."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the distinct values of the `OWNERSHIP_TYPE` column in the `ownership_data` table? Include the `ML`, `nr_owner`, and `nr_member` columns in the output as well.",
        "gold-sql": "SELECT CASE WHEN LAG(OWNERSHIP_TYPE) OVER (ORDER BY OWNERSHIP_TYPE_gr DESC, ML) = OWNERSHIP_TYPE THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, ML, nr_owner, nr_member \nFROM ownership_data;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the distinct values of the `OWNERSHIP_TYPE` column in the `ownership_data` table? Include the `ML`, `nr_owner`, and `nr_member` columns in the output as well.",
          "B",
          "Can you show me the `OWNERSHIP_TYPE`, `ML`, `nr_owner`, and `nr_member` columns from the `ownership_data` table, where the `OWNERSHIP_TYPE` changes compared to the previous row based on the descending order of `OWNERSHIP_TYPE_gr` and `ML` columns?",
          "C",
          "How does the `OWNERSHIP_TYPE` column change when ordered by the descending values of `OWNERSHIP_TYPE_gr` and `ML` columns in the `ownership_data` table? Include the `ML`, `nr_owner`, and `nr_member` columns in the result.",
          "D",
          "Show me the `OWNERSHIP_TYPE`, `ML`, `nr_owner`, and `nr_member` columns from the `ownership_data` table, but only display the `OWNERSHIP_TYPE` values that are different from the previous row when sorted by `OWNERSHIP_TYPE_gr` and `ML` in descending order."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "Group sessions by their current term status. For each group, state the status ('CURRENT' if is current term and 'NOT CURRENT' otherwise), name of the session, number of IAP sessions, total IAP session time in days, and average IAP session time in days. Show a subtotal for each current status and a grand total row across all status. Order the results by current status and cluster type. Display the the current status only if it differs from the previous entry.",
    "gold-sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY assign) = assign THEN NULL ELSE assign END AS assign, muse, session_count, total_time, avg_time FROM (SELECT CASE WHEN IS_CURRENT_TERM IS NULL AND IAP_CATEGORY_NAME IS NOT NULL THEN 'SUBTOTAL' WHEN IS_CURRENT_TERM IS NULL AND IAP_CATEGORY_NAME IS NULL THEN 'TOTAL' ELSE CASE WHEN IS_CURRENT_TERM = 'Y' THEN 'CURRENT' ELSE 'NOT CURRENT' END END AS assign, IAP_CATEGORY_NAME AS muse, COUNT(SESSION_DATE) AS session_count, SUM(COALESCE(TIMESTAMPDIFF(HOUR, STR_TO_DATE(CONCAT(LEFT(SESSION_START_TIME, 2), ':', SUBSTRING(SESSION_START_TIME, 3, 2), ' ', RIGHT(SESSION_START_TIME, 2)), '%h:%i %p'), STR_TO_DATE(CONCAT(LEFT(SESSION_END_TIME, 2), ':', SUBSTRING(SESSION_END_TIME, 3, 2), ' ', RIGHT(SESSION_END_TIME, 2)), '%h:%i %p')) / 24.0, 0)) AS total_time, AVG(COALESCE(TIMESTAMPDIFF(HOUR, STR_TO_DATE(CONCAT(LEFT(SESSION_START_TIME, 2), ':', SUBSTRING(SESSION_START_TIME, 3, 2), ' ', RIGHT(SESSION_START_TIME, 2)), '%h:%i %p'), STR_TO_DATE(CONCAT(LEFT(SESSION_END_TIME, 2), ':', SUBSTRING(SESSION_END_TIME, 3, 2), ' ', RIGHT(SESSION_END_TIME, 2)), '%h:%i %p')) / 24.0, 0)) AS avg_time FROM IAP_SUBJECT_DETAIL ss JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ss.TERM_CODE JOIN IAP_SUBJECT_SESSION iss ON iss.IAP_SUBJECT_SESSION_KEY = ss.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_CATEGORY isc ON isc.IAP_SUBJECT_CATEGORY_KEY = ss.IAP_SUBJECT_CATEGORY_KEY GROUP BY IS_CURRENT_TERM, IAP_CATEGORY_NAME WITH ROLLUP HAVING IS_CURRENT_TERM IS NOT NULL OR IAP_CATEGORY_NAME IS NOT NULL) AS tbltmp ORDER BY assign, muse;",
    "options": "",
    "oracle_sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY assign) = assign THEN NULL ELSE assign END AS assign, muse, session_count, total_time, avg_time FROM (SELECT CASE WHEN GROUPING(IAP_CATEGORY_NAME) = 1 AND GROUPING(IS_CURRENT_TERM) = 0 THEN 'SUBTOTAL' WHEN GROUPING(IAP_CATEGORY_NAME) = 1 AND GROUPING(IAP_CATEGORY_NAME) = 1 THEN 'TOTAL' ELSE CASE WHEN IS_CURRENT_TERM = 'Y' THEN 'CURRENT' ELSE 'NOT CURRENT' END END AS assign, IAP_CATEGORY_NAME AS muse, COUNT(SESSION_DATE) AS session_count, SUM(COALESCE(TO_DATE(SESSION_END_TIME, 'HHMIPM') - TO_DATE(SESSION_START_TIME, 'HHMIPM'), 0)) AS total_time, AVG(COALESCE(TO_DATE(SESSION_END_TIME, 'HHMIPM') - TO_DATE(SESSION_START_TIME, 'HHMIPM'), 0)) AS avg_time FROM IAP_SUBJECT_DETAIL ss JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ss.TERM_CODE JOIN IAP_SUBJECT_SESSION iss ON iss.IAP_SUBJECT_SESSION_KEY =ss.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_CATEGORY isc ON isc.IAP_SUBJECT_CATEGORY_KEY=ss.IAP_SUBJECT_CATEGORY_KEY GROUP BY ROLLUP(IS_CURRENT_TERM, IAP_CATEGORY_NAME) ORDER BY assign, muse) tbltmp",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH cte_assignments AS (\n    SELECT \n        CASE \n            WHEN IS_CURRENT_TERM IS NULL AND NOT IAP_CATEGORY_NAME IS NULL THEN 'SUBTOTAL' \n            WHEN IS_CURRENT_TERM IS NULL AND IAP_CATEGORY_NAME IS NULL THEN 'TOTAL' \n            ELSE CASE WHEN IS_CURRENT_TERM = 'Y' THEN 'CURRENT' ELSE 'NOT CURRENT' END \n        END AS assign, \n        IAP_CATEGORY_NAME AS muse, \n        COUNT(SESSION_DATE) AS session_count, \n        SUM(COALESCE(TIMESTAMPDIFF(HOUR, STR_TO_DATE(CONCAT(LEFT(SESSION_START_TIME, 2), ':', SUBSTRING(SESSION_START_TIME, 3, 2), ' ', RIGHT(SESSION_START_TIME, 2)), '%H:%i %p'), STR_TO_DATE(CONCAT(LEFT(SESSION_END_TIME, 2), ':', SUBSTRING(SESSION_END_TIME, 3, 2), ' ', RIGHT(SESSION_END_TIME, 2)), '%H:%i %p')) / 24.0, 0) AS total_time, \n        AVG(COALESCE(TIMESTAMPDIFF(HOUR, STR_TO_DATE(CONCAT(LEFT(SESSION_START_TIME, 2), ':', SUBSTRING(SESSION_START_TIME, 3, 2), ' ', RIGHT(SESSION_START_TIME, 2)), '%H:%i %p'), STR_TO_DATE(CONCAT(LEFT(SESSION_END_TIME, 2), ':', SUBSTRING(SESSION_END_TIME, 3, 2), ' ', RIGHT(SESSION_END_TIME, 2)), '%H:%i %p')) / 24.0, 0) AS avg_time \n    FROM \n        IAP_SUBJECT_DETAIL AS ss \n        JOIN ACADEMIC_TERMS AS at ON at.TERM_CODE = ss.TERM_CODE \n        JOIN IAP_SUBJECT_SESSION AS iss ON iss.IAP_SUBJECT_SESSION_KEY = ss.IAP_SUBJECT_SESSION_KEY \n        JOIN IAP_SUBJECT_CATEGORY AS isc ON isc.IAP_SUBJECT_CATEGORY_KEY = ss.IAP_SUBJECT_CATEGORY_KEY \n    GROUP BY IS_CURRENT_TERM, IAP_CATEGORY_NAME \n    WITH ROLLUP \n    HAVING NOT IS_CURRENT_TERM IS NULL OR NOT IAP_CATEGORY_NAME IS NULL\n)\n\nSELECT * FROM cte_assignments;"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each course, list its name, name of the building of the course location, the start date, the name of the course before it, and the name of the course after it, access level of the building, and the assignable area of the room used for the course, sorted by the ascending order start date and course name.",
    "gold-sql": "SELECT ccso.subject_title, fb.BUILDING_NAME_LONG AS building_name, at.TERM_START_DATE AS term_start_date, lag(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS previous_subject_title, lead(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS next_subject_title, fb.ACCESS_LEVEL_NAME AS access_level, fr.AREA AS room_assignable_area FROM ( SELECT DISTINCT subject_id, subject_title, effective_term_code, meet_place FROM COURSE_CATALOG_SUBJECT_OFFERED ) ccso JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ccso.effective_term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC;",
    "options": [
      "What are the subject titles, building names, and term start dates for academic terms, along with the previous and next subject titles, access levels, and room assignable areas? How are these details ordered in the final result?",
      "Can you provide the subject titles, building names, and term start dates for academic terms, including the previous and next subject titles, access levels, and room assignable areas? How is this information structured in the output?",
      "Which subject titles, building names, and term start dates are listed for academic terms, along with the previous and next subject titles, access levels, and room assignable areas? How is the ordering of this information determined in the final result?",
      "What details are included in the final output regarding subject titles, building names, term start dates, previous and next subject titles, access levels, and room assignable areas for academic terms, facilities, and buildings? How is this information organized and presented in the result set?"
    ],
    "oracle_sql": "SELECT ccso.subject_title, fb.BUILDING_NAME_LONG AS building_name, at.TERM_START_DATE AS term_start_date, lag(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS previous_subject_title, lead(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS next_subject_title, fb.ACCESS_LEVEL_NAME AS access_level, fr.AREA AS room_assignable_area FROM ( SELECT DISTINCT subject_id, subject_title, effective_term_code, meet_place FROM COURSE_CATALOG_SUBJECT_OFFERED ) ccso JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ccso.effective_term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH ccso_cte AS (\n    SELECT DISTINCT subject_id, subject_title, effective_term_code, meet_place\n    FROM COURSE_CATALOG_SUBJECT_OFFERED\n),\nat_cte AS (\n    SELECT TERM_CODE, TERM_START_DATE\n    FROM ACADEMIC_TERMS\n),\nfr_cte AS (\n    SELECT FCLT_ROOM_KEY, FCLT_BUILDING_KEY, AREA\n    FROM FCLT_ROOMS\n),\nfb_cte AS (\n    SELECT FCLT_BUILDING_KEY, BUILDING_NAME_LONG, ACCESS_LEVEL_NAME\n    FROM FCLT_BUILDING\n)\nSELECT ccso.subject_title, fb.BUILDING_NAME_LONG AS building_name, at.TERM_START_DATE AS term_start_date, \n       lag(ccso.subject_title) OVER (ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC) AS previous_subject_title, \n       lead(ccso.subject_title) OVER (ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC) AS next_subject_title, \n       fb.ACCESS_LEVEL_NAME AS access_level, fr.AREA AS room_assignable_area\nFROM ccso_cte ccso\nJOIN at_cte at ON at.TERM_CODE = ccso.effective_term_code\nJOIN fr_cte fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY\nJOIN fb_cte fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY\nORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC;",
    "sql_decomposition": [
      {
        "question": "What are the unique subject IDs, subject titles, effective term codes, and meeting places listed in the course catalog subject offered table?",
        "gold-sql": "SELECT DISTINCT subject_id, subject_title, effective_term_code, meet_place FROM COURSE_CATALOG_SUBJECT_OFFERED",
        "title": "ccso_cte",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique subject IDs, subject titles, effective term codes, and meeting places listed in the course catalog subject offered table?",
          "B",
          "Can you provide a list of distinct subject IDs, subject titles, effective term codes, and meeting places from the course catalog subject offered table?",
          "C",
          "Which subject IDs, subject titles, effective term codes, and meeting places are included in the course catalog subject offered table, ensuring each entry is unique?",
          "D",
          "How many different subject IDs, subject titles, effective term codes, and meeting places are there in the course catalog subject offered table?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the term codes and start dates listed in the academic terms table? Can you provide the term code and the corresponding start date for each academic term?",
        "gold-sql": "SELECT TERM_CODE, TERM_START_DATE FROM ACADEMIC_TERMS",
        "title": "at_cte",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the term codes and start dates listed in the academic terms table? Can you provide the term code and the corresponding start date for each academic term?",
          "B",
          "Could you show me a list of term codes along with their respective start dates from the academic terms table? I need to know the term code and the date when each term starts.",
          "C",
          "How are the term codes and start dates structured in the academic terms table? Can you display the term code and the start date for each academic term in the table?",
          "D",
          "In the academic terms table, what are the term codes and start dates for each term? Can you list the term code along with the start date for every academic term available?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the room key, building key, and area for each room in the FCLT_ROOMS table?",
        "gold-sql": "SELECT FCLT_ROOM_KEY, FCLT_BUILDING_KEY, AREA FROM FCLT_ROOMS",
        "title": "fr_cte",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the room key, building key, and area for each room in the FCLT_ROOMS table?",
          "B",
          "Can you provide the room key, building key, and area for all rooms listed in the FCLT_ROOMS table?",
          "C",
          "How can we display the room key, building key, and area for each room stored in the FCLT_ROOMS table?",
          "D",
          "Which rooms in the FCLT_ROOMS table have the room key, building key, and area information available?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the facility building key, long building name, and access level name for all buildings in the FCLT_BUILDING table?",
        "gold-sql": "SELECT FCLT_BUILDING_KEY, BUILDING_NAME_LONG, ACCESS_LEVEL_NAME FROM FCLT_BUILDING",
        "title": "fb_cte",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "What are the facility building key, long building name, and access level name for all buildings in the FCLT_BUILDING table?",
          "Can you provide the facility building key, long building name, and access level name for each building listed in the FCLT_BUILDING table?",
          "Which buildings are included in the FCLT_BUILDING table, and what are their corresponding facility building keys, long building names, and access level names?",
          "How are the facility building keys, long building names, and access level names structured for the buildings in the FCLT_BUILDING table?"
        ],
        "question_ts_and_es": "What are the facility building key, long building name, and access level name for all buildings in the FCLT_BUILDING table?"
      },
      {
        "question": "What are the subject titles, building names, term start dates, previous subject titles, next subject titles, access levels, and room assignable areas for academic terms, facilities, and buildings? The results are ordered by term start date and subject title.",
        "gold-sql": "SELECT TERM_CODE, TERM_START_DATE\n    FROM ACADEMIC_TERMS\n),\nfr_cte AS (\n    SELECT FCLT_ROOM_KEY, FCLT_BUILDING_KEY, AREA\n    FROM FCLT_ROOMS\n),\nfb_cte AS (\n    SELECT FCLT_BUILDING_KEY, BUILDING_NAME_LONG, ACCESS_LEVEL_NAME\n    FROM FCLT_BUILDING\n)\nSELECT ccso.subject_title, fb.BUILDING_NAME_LONG AS building_name, at.TERM_START_DATE AS term_start_date, \n       lag(ccso.subject_title) OVER (ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC) AS previous_subject_title, \n       lead(ccso.subject_title) OVER (ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC) AS next_subject_title, \n       fb.ACCESS_LEVEL_NAME AS access_level, fr.AREA AS room_assignable_area\nFROM ccso_cte ccso\nJOIN at_cte at ON at.TERM_CODE = ccso.effective_term_code\nJOIN fr_cte fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY\nJOIN fb_cte fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY\nORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the subject titles, building names, term start dates, previous subject titles, next subject titles, access levels, and room assignable areas for academic terms, facilities, and buildings? The results are ordered by term start date and subject title.",
          "B",
          "Can you provide a list of subject titles, building names, term start dates, previous subject titles, next subject titles, access levels, and room assignable areas for academic terms, facilities, and buildings? The data is sorted by term start date and subject title.",
          "C",
          "How can we display the subject titles, building names, term start dates, previous subject titles, next subject titles, access levels, and room assignable areas for academic terms, facilities, and buildings? The output is organized by term start date and subject title.",
          "D",
          "What information is available regarding subject titles, building names, term start dates, previous subject titles, next subject titles, access levels, and room assignable areas for academic terms, facilities, and buildings? The results are arranged by term start date and subject title."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "What are the subject titles, building names, and term start dates for academic terms, along with the previous and next subject titles, access levels, and room assignable areas? How are these details ordered in the final result?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each room, list its associated building name, floor number, room number, ownership type, organization name, number of rooms, area, and percentage of area relative to the building. Include subtotals across floors, subtotals across all floors for each building, and a grand total across all buildings. For the subtotal for each building and the grand total, the percentage of area should be relative to area of all buildings. All numeric values should be rounded to integers and formatted using commas as thousands separators except the relative percentages which should be rounded to two decimal places.",
    "gold-sql": "SELECT Building_Name, FLOOR, Room, OWNERSHIP_TYPE, Organization_Name, FORMAT(Total_Rooms, 0) AS Total_Rooms, FORMAT(Total_Area, 0) AS Total_Area, Percent_Of_Total FROM (SELECT 0 AS SortOrder, NULL AS Building_Name, NULL AS FLOOR, NULL AS Room, NULL AS OWNERSHIP_TYPE, NULL AS Organization_Name, SUM(Total_Rooms) AS Total_Rooms, SUM(Total_Area) AS Total_Area, 100 AS Percent_Of_Total FROM (SELECT b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Total_Rooms, SUM(r.AREA) AS Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name, (SELECT SUM(r2.AREA) FROM FCLT_ROOMS r2 JOIN FCLT_FLOOR f2 ON r2.FCLT_FLOOR_KEY = f2.FCLT_FLOOR_KEY WHERE f2.FCLT_BUILDING_KEY = f.FCLT_BUILDING_KEY) AS Building_Total_Area, (SELECT SUM(r3.AREA) FROM FCLT_ROOMS r3) AS Overall_Total_Area FROM FCLT_FLOOR f LEFT JOIN FCLT_ROOMS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY LEFT JOIN FCLT_BUILDING b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME, f.FCLT_BUILDING_KEY) AS FloorStats WHERE Building_Name IS NOT NULL UNION ALL SELECT 1 AS SortOrder, Building_Name, FLOOR, Room, OWNERSHIP_TYPE, Organization_Name, Total_Rooms, Total_Area, CASE WHEN FLOOR IS NOT NULL AND Building_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Building_Total_Area, 2) WHEN FLOOR IS NULL AND Building_Name IS NOT NULL AND Overall_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Overall_Total_Area, 2) ELSE NULL END AS Percent_Of_Total FROM (SELECT b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Total_Rooms, SUM(r.AREA) AS Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name, (SELECT SUM(r2.AREA) FROM FCLT_ROOMS r2 JOIN FCLT_FLOOR f2 ON r2.FCLT_FLOOR_KEY = f2.FCLT_FLOOR_KEY WHERE f2.FCLT_BUILDING_KEY = f.FCLT_BUILDING_KEY) AS Building_Total_Area, (SELECT SUM(r3.AREA) FROM FCLT_ROOMS r3) AS Overall_Total_Area FROM FCLT_FLOOR f LEFT JOIN FCLT_ROOMS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY LEFT JOIN FCLT_BUILDING b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME, f.FCLT_BUILDING_KEY WITH ROLLUP) AS RollupWithPercentages WHERE Building_Name IS NOT NULL) AS AllData ORDER BY SortOrder, Building_Name, FLOOR, Room;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "WITH FloorStats AS (SELECT f.FCLT_BUILDING_KEY, b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Room_Count, SUM(r.AREA) AS Total_Floor_Area, SUM(SUM(r.AREA)) OVER (PARTITION BY f.FCLT_BUILDING_KEY) AS Building_Total_Area, SUM(SUM(r.AREA)) OVER () AS Overall_Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name FROM FCLT_FLOOR f LEFT JOIN FCLT_ROOMS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY LEFT JOIN FCLT_BUILDING b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY f.FCLT_BUILDING_KEY, b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME), RollupWithPercentages AS (SELECT Building_Name, FLOOR, CASE WHEN GROUPING(Room) = 0 THEN Room ELSE NULL END AS Room, CASE WHEN GROUPING_ID(Building_Name, FLOOR, Room) > 0 THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, MAX(Organization_Name) AS Organization_Name, SUM(Room_Count) AS Total_Rooms, SUM(Total_Floor_Area) AS Total_Area, MAX(Building_Total_Area) AS Building_Total_Area, MAX(Overall_Total_Area) AS Overall_Total_Area FROM FloorStats GROUP BY ROLLUP(Building_Name, FLOOR, Room), OWNERSHIP_TYPE, Organization_Name), GrandTotal AS (SELECT NULL AS Building_Name, NULL AS FLOOR, NULL AS Room, NULL AS OWNERSHIP_TYPE, NULL AS Organization_Name, SUM(Total_Rooms) AS Total_Rooms, SUM(Total_Area) AS Total_Area, NULL AS Building_Total_Area, MAX(Overall_Total_Area) AS Overall_Total_Area, 0 AS SortOrder, 100 AS Percent_Of_Total FROM RollupWithPercentages WHERE Building_Name IS NOT NULL), AllData AS (SELECT 0 AS SortOrder, Building_Name, FLOOR, Room, NULL AS OWNERSHIP_TYPE, NULL AS Organization_Name, Total_Rooms, Total_Area, Percent_Of_Total FROM GrandTotal UNION ALL SELECT 1 AS SortOrder, Building_Name, FLOOR, Room, CASE WHEN Building_Name IS NOT NULL THEN OWNERSHIP_TYPE ELSE NULL END AS OWNERSHIP_TYPE, Organization_Name, Total_Rooms, Total_Area, CASE WHEN FLOOR IS NOT NULL AND Building_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Building_Total_Area, 2) WHEN FLOOR IS NULL AND Building_Name IS NOT NULL AND Overall_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Overall_Total_Area, 2) ELSE NULL END AS Percent_Of_Total FROM RollupWithPercentages) SELECT Building_Name, FLOOR, Room, OWNERSHIP_TYPE, Organization_Name, TO_CHAR(Total_Rooms, '999,999') AS Total_Rooms, TO_CHAR(Total_Area, '999,999,999') AS Total_Area, Percent_Of_Total FROM AllData ORDER BY SortOrder, Building_Name, FLOOR, Room;",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH RollupWithPercentages AS (\n    SELECT b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Total_Rooms, SUM(r.AREA) AS Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name, \n    (SELECT SUM(r2.AREA) FROM FCLT_ROOMS AS r2 JOIN FCLT_FLOOR AS f2 ON r2.FCLT_FLOOR_KEY = f2.FCLT_FLOOR_KEY WHERE f2.FCLT_BUILDING_KEY = f.FCLT_BUILDING_KEY) AS Building_Total_Area, \n    (SELECT SUM(r3.AREA) FROM FCLT_ROOMS AS r3) AS Overall_Total_Area \n    FROM FCLT_FLOOR AS f \n    LEFT JOIN FCLT_ROOMS AS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY \n    LEFT JOIN FCLT_BUILDING AS b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY \n    LEFT JOIN FCLT_ORGANIZATION AS o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY \n    GROUP BY b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME, f.FCLT_BUILDING_KEY\n)\nSELECT * FROM RollupWithPercentages;",
    "sql_decomposition": [
      {
        "question": "What are the building names, floors, rooms, total number of rooms, total area, ownership types, organization names, building total area, and overall total area for each building, floor, and room in the dataset?",
        "gold-sql": "SELECT b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Total_Rooms, SUM(r.AREA) AS Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name, (SELECT SUM(r2.AREA) FROM FCLT_ROOMS AS r2 JOIN FCLT_FLOOR AS f2 ON r2.FCLT_FLOOR_KEY = f2.FCLT_FLOOR_KEY WHERE f2.FCLT_BUILDING_KEY = f.FCLT_BUILDING_KEY) AS Building_Total_Area, (SELECT SUM(r3.AREA) FROM FCLT_ROOMS AS r3) AS Overall_Total_Area FROM FCLT_FLOOR AS f LEFT JOIN FCLT_ROOMS AS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY LEFT JOIN FCLT_BUILDING AS b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION AS o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME, f.FCLT_BUILDING_KEY",
        "title": "RollupWithPercentages",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "What are the building names, floors, rooms, total number of rooms, total area, ownership types, organization names, building total area, and overall total area for each building, floor, and room in the dataset?",
          "How many rooms are there in each building, broken down by floors and room numbers, along with the total area of each room and the ownership type of the building?",
          "Can you provide a detailed breakdown of the buildings, floors, and rooms, including the total number of rooms, total area, ownership type, and organization name associated with each room?",
          "Which buildings have rooms on different floors, and what are the total number of rooms and total area for each building?"
        ],
        "question_ts_and_es": "What are the building names, floors, rooms, total number of rooms, total area, ownership types, organization names, building total area, and overall total area for each building, floor, and room in the dataset?"
      },
      {
        "question": "What is the complete dataset from the table `RollupWithPercentages`? The output includes all columns present in the table.",
        "gold-sql": "SELECT * FROM RollupWithPercentages;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the complete dataset from the table `RollupWithPercentages`? The output includes all columns present in the table.",
          "B",
          "Can you show me all the details available in the table `RollupWithPercentages`?",
          "C",
          "Provide a comprehensive view of the data stored in the table `RollupWithPercentages`, including all columns.",
          "D",
          "What are all the columns and their respective values in the table `RollupWithPercentages`?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each term and department, list the term, department, the number of courses, average number of equivalent subjects, the school name, and department phone number. Include subtotals for each term (the corresponding term field is 'SUBTOTAL') and a grand total across all terms (the corresponding term field is 'TOTAL'). Do not repeat the term if it is the same as the previous row. Sort the table by term and department.",
    "gold-sql": "SELECT CASE WHEN LAG(term) OVER (ORDER BY term_sort, term, dept_sort) = term THEN NULL ELSE term END AS term, dept, subcnt, avgeqisub, sd.SCHOOL_NAME AS school_name, ad.DEPARTMENT_PHONE_NUMBER AS department_phone FROM (SELECT CASE WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE TERM_CODE END AS term_sort, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'TOTAL' ELSE TERM_CODE END AS term, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE DEPARTMENT_NAME END AS dept_sort, DEPARTMENT_NAME AS dept, COUNT(DISTINCT SUBJECT_ID) AS subcnt, MIN(MEET_TIME) AS mintime, AVG(CASE WHEN equivalent_subjects IS NULL THEN 0 ELSE 1 + LENGTH(equivalent_subjects) - LENGTH(REPLACE(equivalent_subjects, ',', '')) END) AS avgeqisub FROM COURSE_CATALOG_SUBJECT_OFFERED GROUP BY TERM_CODE, DEPARTMENT_NAME WITH ROLLUP) tbltmp LEFT JOIN SIS_DEPARTMENT sd ON tbltmp.dept = sd.DEPARTMENT_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON sd.DEPARTMENT_CODE = ad.SIS_ADMIN_DEPARTMENT_CODE ORDER BY term_sort, dept_sort;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT CASE WHEN LAG(term) OVER (ORDER BY term_sort, term, dept_sort) = term THEN NULL ELSE term END AS term, dept, subcnt, avgeqisub, sd.SCHOOL_NAME AS school_name, ad.DEPARTMENT_PHONE_NUMBER AS department_phone FROM ( SELECT CASE WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE TERM_CODE END AS term_sort, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'TOTAL' ELSE TERM_CODE END AS term, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE DEPARTMENT_NAME END AS dept_sort, DEPARTMENT_NAME AS dept, COUNT(DISTINCT SUBJECT_ID) AS subcnt, MIN(MEET_TIME) AS mintime, AVG(CASE WHEN equivalent_subjects IS NULL THEN 0 ELSE 1 + LENGTH(equivalent_subjects) - LENGTH(REPLACE(equivalent_subjects, ',', '')) END) AS avgeqisub FROM COURSE_CATALOG_SUBJECT_OFFERED GROUP BY ROLLUP(TERM_CODE, DEPARTMENT_NAME) ) tbltmp LEFT JOIN SIS_DEPARTMENT sd ON tbltmp.dept = sd.DEPARTMENT_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON sd.DEPARTMENT_CODE = ad.SIS_ADMIN_DEPARTMENT_CODE ORDER BY term_sort, dept_sort;",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH cte_tbltmp AS (\n    SELECT CASE WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE TERM_CODE END AS term_sort,\n           CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'SUBTOTAL'\n                WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'TOTAL'\n                ELSE TERM_CODE END AS term,\n           CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE DEPARTMENT_NAME END AS dept_sort,\n           DEPARTMENT_NAME AS dept,\n           COUNT(DISTINCT SUBJECT_ID) AS subcnt,\n           MIN(MEET_TIME) AS mintime,\n           AVG(CASE WHEN equivalent_subjects IS NULL THEN 0\n                    ELSE 1 + LENGTH(equivalent_subjects) - LENGTH(REPLACE(equivalent_subjects, ',', ''))\n               END) AS avgeqisub\n    FROM COURSE_CATALOG_SUBJECT_OFFERED\n    GROUP BY TERM_CODE, DEPARTMENT_NAME\n    WITH ROLLUP\n)\nSELECT CASE WHEN LAG(term) OVER (ORDER BY term_sort, term, dept_sort) = term THEN NULL ELSE term END AS term,\n       dept,\n       subcnt,\n       avgeqisub,\n       sd.SCHOOL_NAME AS school_name,\n       ad.DEPARTMENT_PHONE_NUMBER AS department_phone\nFROM cte_tbltmp\nLEFT JOIN SIS_DEPARTMENT sd ON cte_tbltmp.dept = sd.DEPARTMENT_NAME\nLEFT JOIN SIS_ADMIN_DEPARTMENT ad ON sd.DEPARTMENT_CODE = ad.SIS_ADMIN_DEPARTMENT_CODE\nORDER BY term_sort, dept_sort;",
    "sql_decomposition": [
      {
        "question": "What are the different terms and departments in the course catalog subject offered? Include the term code, term, department name, number of unique subject IDs, minimum meet time, and average number of equivalent subjects per subject. The result will show a breakdown by term and department, with subtotals and totals included.",
        "gold-sql": "SELECT CASE WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE TERM_CODE END AS term_sort, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'TOTAL' ELSE TERM_CODE END AS term, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE DEPARTMENT_NAME END AS dept_sort, DEPARTMENT_NAME AS dept, COUNT(DISTINCT SUBJECT_ID) AS subcnt, MIN(MEET_TIME) AS mintime, AVG(CASE WHEN equivalent_subjects IS NULL THEN 0 ELSE 1 + LENGTH(equivalent_subjects) - LENGTH(REPLACE(equivalent_subjects, ',', '')) END) AS avgeqisub FROM COURSE_CATALOG_SUBJECT_OFFERED GROUP BY TERM_CODE, DEPARTMENT_NAME WITH ROLLUP",
        "title": "cte_tbltmp",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the different terms and departments in the course catalog subject offered? Include the term code, term, department name, number of unique subject IDs, minimum meet time, and average number of equivalent subjects per subject. The result will show a breakdown by term and department, with subtotals and totals included.",
          "B",
          "Can you provide a summary of the course catalog subject offerings by term and department? Include the term code, term, department name, count of unique subject IDs, minimum meet time, and average number of equivalent subjects per subject. The output will display subtotals and totals for each term and department.",
          "C",
          "How can we categorize and analyze the course catalog subject offerings based on terms and departments? Show the term code, term, department name, unique subject ID count, minimum meet time, and average number of equivalent subjects per subject. The query will present subtotals and totals for each term and department.",
          "D",
          "What is the distribution of course catalog subjects across different terms and departments? Include details such as term code, term, department name, unique subject ID count, minimum meet time, and average number of equivalent subjects per subject. The output will feature subtotals and totals for each term and department."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique terms, departments, number of subjects, average equivalent subjects, school names, and department phone numbers for each department? The results are sorted by term and department.",
        "gold-sql": "SELECT CASE WHEN LAG(term) OVER (ORDER BY term_sort, term, dept_sort) = term THEN NULL ELSE term END AS term,\n       dept,\n       subcnt,\n       avgeqisub,\n       sd.SCHOOL_NAME AS school_name,\n       ad.DEPARTMENT_PHONE_NUMBER AS department_phone\nFROM cte_tbltmp\nLEFT JOIN SIS_DEPARTMENT sd ON cte_tbltmp.dept = sd.DEPARTMENT_NAME\nLEFT JOIN SIS_ADMIN_DEPARTMENT ad ON sd.DEPARTMENT_CODE = ad.SIS_ADMIN_DEPARTMENT_CODE\nORDER BY term_sort, dept_sort;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique terms, departments, number of subjects, average equivalent subjects, school names, and department phone numbers for each department? The results are sorted by term and department.",
          "B",
          "Which terms, departments, number of subjects, average equivalent subjects, school names, and department phone numbers are included in the output? The data is organized by term and department.",
          "C",
          "Can you provide a list of terms, departments, number of subjects, average equivalent subjects, school names, and department phone numbers for each department? The information is sorted based on term and department.",
          "D",
          "How are the terms, departments, number of subjects, average equivalent subjects, school names, and department phone numbers structured in the output? The results are ordered by term and department."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": false,
    "comment": "Be aware of the filter statements.",
    "db_id": "dw",
    "gold-question": "What is the room, floor, building key, building street address, city, state, and postal code of Professor Summer Haynes's office?",
    "gold-sql": "SELECT DISTINCT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE FROM (SELECT office_location FROM employee_directory WHERE full_name = 'Haynes, Summer') AS emp_office JOIN fac_rooms ON emp_office.office_location = fac_rooms.fac_room_key JOIN fac_building_address ON fac_rooms.building_key = fac_building_address.BUILDING_KEY JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY WHERE fac_building_address.ADDRESS_PURPOSE = 'STREET';",
    "options": [
      "What are the unique room numbers, floors, building keys, street addresses, cities, states, and postal codes associated with the building information dataset?",
      "Which specific room, floor, building key, street address, city, state, and postal code combinations are available in the building information records?",
      "Can you provide the distinct room details, including room number, floor, building key, street address, city, state, and postal code from the building information dataset?",
      "What are the room-specific details such as room number, floor, building key, street address, city, state, and postal code found in the building information data?"
    ],
    "oracle_sql": "SELECT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE FROM (SELECT office_location FROM employee_directory WHERE full_name = 'Haynes, Summer') JOIN fac_rooms on office_location = fac_room_key JOIN fac_building_address on fac_rooms.building_key = fac_building_address.BUILDING_KEY JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY where fac_building_address.ADDRESS_PURPOSE = 'STREET';",
    "question": "1. Retrieve the room number, floor, building key, building street address, city, state, and postal code for the office location of the employee named Summer Haynes.",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH emp_office AS (\n    SELECT office_location \n    FROM employee_directory \n    WHERE full_name = 'Haynes, Summer'\n),\nemp_rooms AS (\n    SELECT fac_room_key \n    FROM fac_rooms \n    WHERE fac_room_key = (SELECT office_location FROM emp_office)\n),\nbuilding_info AS (\n    SELECT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE\n    FROM emp_rooms\n    JOIN fac_rooms ON emp_rooms.fac_room_key = fac_rooms.fac_room_key\n    JOIN fac_building_address ON fac_rooms.building_key = fac_building_address.BUILDING_KEY\n    JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY\n    WHERE fac_building_address.ADDRESS_PURPOSE = 'STREET'\n)\nSELECT DISTINCT Room, floor, BUILDING_KEY, BUILDING_STREET_ADDRESS, CITY, STATE, POSTAL_CODE\nFROM building_info;",
    "sql_decomposition": [
      {
        "question": "What is the office location for the employee with the full name 'Haynes, Summer' in the employee directory?",
        "gold-sql": "SELECT office_location FROM employee_directory WHERE full_name = 'Haynes, Summer'",
        "title": "emp_office",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the office location for the employee with the full name 'Haynes, Summer' in the employee directory?",
          "B",
          "Which office does the employee named 'Haynes, Summer' work in, according to the employee directory?",
          "C",
          "Can you provide the office location for the employee named 'Haynes, Summer' from the employee directory?",
          "D",
          "Where is the office situated for the employee with the full name 'Haynes, Summer' in the employee directory?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the facility room keys that match the office locations of employees?",
        "gold-sql": "SELECT fac_room_key FROM fac_rooms WHERE fac_room_key = (SELECT office_location FROM emp_office)",
        "title": "emp_rooms",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the facility room keys that match the office locations of employees?",
          "B",
          "Which facility room keys correspond to the office locations of employees?",
          "C",
          "Identify the facility room keys that align with the office locations of employees.",
          "D",
          "List the facility room keys that are the same as the office locations of employees."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the room details, including room number and floor, associated with each building's street address, city, state, and postal code?",
        "gold-sql": "SELECT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE FROM emp_rooms JOIN fac_rooms ON emp_rooms.fac_room_key = fac_rooms.fac_room_key JOIN fac_building_address ON fac_rooms.building_key = fac_building_address.BUILDING_KEY JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY WHERE fac_building_address.ADDRESS_PURPOSE = 'STREET'",
        "title": "building_info",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the room details, including room number and floor, associated with each building's street address, city, state, and postal code?",
          "B",
          "Can you provide a list of room numbers and floors along with the building key, street address, city, state, and postal code for buildings with street addresses?",
          "C",
          "How can we retrieve the room information such as room number and floor, along with the building key, street address, city, state, and postal code for buildings designated for 'STREET' purposes?",
          "D",
          "Which rooms, including their room numbers and floors, are linked to building details like building key, street address, city, state, and postal code for buildings with 'STREET' as the address purpose?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique combinations of Room, floor, Building Key, Building Street Address, City, State, and Postal Code available in the building information dataset?",
        "gold-sql": "SELECT DISTINCT Room, floor, BUILDING_KEY, BUILDING_STREET_ADDRESS, CITY, STATE, POSTAL_CODE\nFROM building_info;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique combinations of Room, floor, Building Key, Building Street Address, City, State, and Postal Code available in the building information dataset?",
          "B",
          "Can you provide a list of distinct rooms along with their corresponding floor numbers, building keys, street addresses, cities, states, and postal codes from the building information table?",
          "C",
          "How many different rooms are there in each building, and what are their respective floor numbers, building keys, street addresses, cities, states, and postal codes in the building information dataset?",
          "D",
          "Which unique room numbers are associated with different floors, building keys, street addresses, cities, states, and postal codes in the building information table?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "What are the unique room numbers, floors, building keys, street addresses, cities, states, and postal codes associated with the building information dataset?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each term code, list the term description, attribute desciption, department name, school name, and the number of subjects in the area of humanities, arts and social sciences.",
    "gold-sql": "SELECT ata.TERM_DESCRIPTION, ccso.HASS_ATTRIBUTE_DESC, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, (SELECT COUNT(DISTINCT ccso2.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED ccso2 JOIN CIS_HASS_ATTRIBUTE cha2 ON ccso2.HASS_ATTRIBUTE = cha2.HASS_ATTRIBUTE WHERE ccso2.TERM_CODE = ata.TERM_CODE AND cha2.CIS_ATTRIBUTE_GROUP = cha.CIS_ATTRIBUTE_GROUP) AS Total_Subjects FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN CIS_HASS_ATTRIBUTE cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE JOIN SIS_DEPARTMENT sd ON ccso.DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN ACADEMIC_TERMS_ALL ata ON ccso.TERM_CODE = ata.TERM_CODE WHERE cha.CIS_ATTRIBUTE_GROUP = 'H';",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT ata.TERM_DESCRIPTION, ccso.HASS_ATTRIBUTE_DESC, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY ata.TERM_CODE, cha.CIS_ATTRIBUTE_GROUP) AS Total_Subjects FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN CIS_HASS_ATTRIBUTE cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE JOIN SIS_DEPARTMENT sd ON ccso.DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN ACADEMIC_TERMS_ALL ata ON ccso.TERM_CODE = ata.TERM_CODE WHERE cha.CIS_ATTRIBUTE_GROUP = 'H';",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH Total_Subjects_CTE AS (\n    SELECT ccso.TERM_CODE, COUNT(DISTINCT ccso.SUBJECT_ID) AS Total_Subjects\n    FROM COURSE_CATALOG_SUBJECT_OFFERED ccso\n    JOIN CIS_HASS_ATTRIBUTE cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE\n    WHERE cha.CIS_ATTRIBUTE_GROUP = 'H'\n    GROUP BY ccso.TERM_CODE\n)\n\nSELECT ata.TERM_DESCRIPTION, ccso.HASS_ATTRIBUTE_DESC, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, ts.Total_Subjects\nFROM COURSE_CATALOG_SUBJECT_OFFERED ccso\nJOIN CIS_HASS_ATTRIBUTE cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE\nJOIN SIS_DEPARTMENT sd ON ccso.DEPARTMENT_CODE = sd.DEPARTMENT_CODE\nJOIN ACADEMIC_TERMS_ALL ata ON ccso.TERM_CODE = ata.TERM_CODE\nJOIN Total_Subjects_CTE ts ON ccso.TERM_CODE = ts.TERM_CODE;\n",
    "sql_decomposition": [
      {
        "question": "What is the count of unique subjects offered in each term for courses falling under the 'H' CIS attribute group? The output displays the term code along with the total number of distinct subjects offered in that term. Which term has the highest number of unique subjects offered under the 'H' CIS attribute group?",
        "gold-sql": "SELECT ccso.TERM_CODE, COUNT(DISTINCT ccso.SUBJECT_ID) AS Total_Subjects FROM COURSE_CATALOG_SUBJECT_OFFERED AS ccso JOIN CIS_HASS_ATTRIBUTE AS cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE WHERE cha.CIS_ATTRIBUTE_GROUP = 'H' GROUP BY ccso.TERM_CODE",
        "title": "Total_Subjects_CTE",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of unique subjects offered in each term for courses falling under the 'H' CIS attribute group? The output displays the term code along with the total number of distinct subjects offered in that term. Which term has the highest number of unique subjects offered under the 'H' CIS attribute group?",
          "B",
          "How many different subjects are offered in each term for courses categorized under the 'H' CIS attribute group? The result shows the term code alongside the count of distinct subjects available during that term. Can you identify the term with the lowest number of unique subjects offered under the 'H' CIS attribute group?",
          "C",
          "For courses falling under the 'H' CIS attribute group, what is the total count of unique subjects offered in each term? The output lists the term code and the number of distinct subjects available in that term. Which term exhibits the most diverse range of unique subjects under the 'H' CIS attribute group?",
          "D",
          "What is the distribution of unique subjects offered in different terms for courses associated with the 'H' CIS attribute group? The result includes the term code and the count of distinct subjects offered during that term. Can you determine which term has the smallest variety of unique subjects under the 'H' CIS attribute group?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the term descriptions, HASS attribute descriptions, department names, school names, and total subjects for each course catalog subject offered?",
        "gold-sql": "SELECT ata.TERM_DESCRIPTION, ccso.HASS_ATTRIBUTE_DESC, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, ts.Total_Subjects\nFROM COURSE_CATALOG_SUBJECT_OFFERED ccso\nJOIN CIS_HASS_ATTRIBUTE cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE\nJOIN SIS_DEPARTMENT sd ON ccso.DEPARTMENT_CODE = sd.DEPARTMENT_CODE\nJOIN ACADEMIC_TERMS_ALL ata ON ccso.TERM_CODE = ata.TERM_CODE\nJOIN Total_Subjects_CTE ts ON ccso.TERM_CODE = ts.TERM_CODE;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the term descriptions, HASS attribute descriptions, department names, school names, and total subjects for each course catalog subject offered?",
          "B",
          "How do the term descriptions, HASS attribute descriptions, department names, school names, and total subjects relate to each other in the course catalog subject offered table?",
          "C",
          "Can you provide the term descriptions, HASS attribute descriptions, department names, school names, and total subjects for the courses cataloged in the system?",
          "D",
          "In the course catalog subject offered, what are the term descriptions, HASS attribute descriptions, department names, school names, and total subjects associated with each entry?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "List all buildings with their names, building numbers, building height, street address, city, state, HR department name, assignable square footage, total and average square footage, ordered in descending order of assignable, total, and average square footage.",
    "gold-sql": "SELECT DISTINCT new.BUILDING_NAME, new.BUILDING_NUMBER, fb.BUILDING_HEIGHT, new.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, new.HR_DEPARTMENT_NAME, new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, new.Total_Square_Footage, new.Avg_Square_Footage_Per_Room FROM (SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, SUM(fr.AREA) AS Total_Square_Footage, AVG(fr.AREA) AS Avg_Square_Footage_Per_Room FROM BUILDINGS b JOIN FAC_BUILDING fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE) new JOIN FAC_BUILDING_ADDRESS fba ON new.FAC_BUILDING_KEY = fba.BUILDING_KEY JOIN FAC_BUILDING fb ON new.FAC_BUILDING_KEY = fb.FAC_BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' ORDER BY new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE DESC, new.Total_Square_Footage DESC, new.Avg_Square_Footage_Per_Room DESC;",
    "options": [
      "What are the names, numbers, heights, street addresses, cities, states, HR department names, assignable square footages, total square footages, and average square footages per room of the buildings located at 32 Vassar St in Cambridge, MA, sorted by assignable square footage, total square footage, and average square footage per room in descending order?",
      "Which departments are housed in the building located at 32 Vassar St in Cambridge, MA, and what are their respective assignable square footages, total square footages, and average square footages per room, sorted by assignable square footage, total square footage, and average square footage per room in descending order?",
      "For the building at 32 Vassar St in Cambridge, MA, what are the different departments, their assignable square footages, total square footages, and average square footages per room, and how do they rank in terms of assignable square footage, total square footage, and average square footage per room?",
      "Which HR departments occupy the building at 32 Vassar St in Cambridge, MA, and what are the corresponding assignable square footages, total square footages, and average square footages per room, listed in descending order of assignable square footage, total square footage, and average square footage per room?"
    ],
    "oracle_sql": "SELECT DISTINCT new.BUILDING_NAME, new.BUILDING_NUMBER, fb.BUILDING_HEIGHT, new.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, new.HR_DEPARTMENT_NAME, new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, new.Total_Square_Footage, new.Avg_Square_Footage_Per_Room FROM (SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, SUM(fr.AREA) AS Total_Square_Footage, AVG(fr.AREA) AS Avg_Square_Footage_Per_Room FROM BUILDINGS b JOIN FAC_BUILDING fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE) new JOIN FAC_BUILDING_ADDRESS fba ON new.FAC_BUILDING_KEY = fba.BUILDING_KEY JOIN FAC_BUILDING fb ON new.FAC_BUILDING_KEY = fb.FAC_BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' ORDER BY new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE DESC, new.Total_Square_Footage DESC, new.Avg_Square_Footage_Per_Room DESC;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH BuildingData AS (\n    SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, SUM(fr.AREA) AS Total_Square_Footage, AVG(fr.AREA) AS Avg_Square_Footage_Per_Room\n    FROM BUILDINGS b\n    JOIN FAC_BUILDING fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY\n    JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY\n    JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY\n    GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE\n),\nBuildingAddress AS (\n    SELECT fba.BUILDING_KEY, fba.CITY, fba.STATE\n    FROM FAC_BUILDING_ADDRESS fba\n    WHERE fba.ADDRESS_PURPOSE = 'STREET'\n)\nSELECT DISTINCT new.BUILDING_NAME, new.BUILDING_NUMBER, fb.BUILDING_HEIGHT, new.BUILDING_STREET_ADDRESS, ba.CITY, ba.STATE, new.HR_DEPARTMENT_NAME, new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, new.Total_Square_Footage, new.Avg_Square_Footage_Per_Room\nFROM BuildingData new\nJOIN BuildingAddress ba ON new.FAC_BUILDING_KEY = ba.BUILDING_KEY\nJOIN FAC_BUILDING fb ON new.FAC_BUILDING_KEY = fb.FAC_BUILDING_KEY\nORDER BY new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE DESC, new.Total_Square_Footage DESC, new.Avg_Square_Footage_Per_Room DESC;\n",
    "sql_decomposition": [
      {
        "question": "What are the building details, including the building name, number, street address, facility building key, HR department name, assignable square footage, total square footage, and average square footage per room for each building?",
        "gold-sql": "SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, SUM(fr.AREA) AS Total_Square_Footage, AVG(fr.AREA) AS Avg_Square_Footage_Per_Room FROM BUILDINGS AS b JOIN FAC_BUILDING AS fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS AS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION AS fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE",
        "title": "BuildingData",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the building details, including the building name, number, street address, facility building key, HR department name, assignable square footage, total square footage, and average square footage per room for each building?",
          "B",
          "Can you provide a list of buildings with their respective details such as building name, number, street address, facility building key, HR department name, assignable square footage, total square footage, and the average square footage per room?",
          "C",
          "How can we display the building information like name, number, street address, facility building key, HR department name, assignable square footage, total square footage, and average square footage per room for each building in the dataset?",
          "D",
          "Which buildings are listed with their corresponding details, including building name, number, street address, facility building key, HR department name, assignable square footage, total square footage, and the average square footage per room?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "",
        "gold-sql": "SELECT fba.BUILDING_KEY, fba.CITY, fba.STATE FROM FAC_BUILDING_ADDRESS AS fba WHERE fba.ADDRESS_PURPOSE = 'STREET'",
        "title": "BuildingAddress",
        "db_id": "dw",
        "adjusted": "",
        "comment": "What are the building keys, cities, and states of addresses with the purpose 'STREET' in the FAC_BUILDING_ADDRESS table?",
        "options": [
          "A",
          "What are the building keys, cities, and states of addresses with the purpose 'STREET' in the FAC_BUILDING_ADDRESS table?",
          "B",
          "Can you provide a list of building keys, cities, and states for addresses marked with the purpose 'STREET' in the FAC_BUILDING_ADDRESS table?",
          "C",
          "Which building keys, cities, and states are associated with addresses labeled as 'STREET' in the FAC_BUILDING_ADDRESS table?",
          "D",
          "Show the building keys, cities, and states for addresses that have the purpose 'STREET' in the FAC_BUILDING_ADDRESS table."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique building names, building numbers, building heights, street addresses, cities, states, HR department names, assignable square footages, total square footages, and average square footages per room of the buildings with their corresponding addresses, sorted by assignable square footage, total square footage, and average square footage per room in descending order?",
        "gold-sql": "SELECT fba.BUILDING_KEY, fba.CITY, fba.STATE\n    FROM FAC_BUILDING_ADDRESS fba\n    WHERE fba.ADDRESS_PURPOSE = 'STREET'\n)\nSELECT DISTINCT new.BUILDING_NAME, new.BUILDING_NUMBER, fb.BUILDING_HEIGHT, new.BUILDING_STREET_ADDRESS, ba.CITY, ba.STATE, new.HR_DEPARTMENT_NAME, new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, new.Total_Square_Footage, new.Avg_Square_Footage_Per_Room\nFROM BuildingData new\nJOIN BuildingAddress ba ON new.FAC_BUILDING_KEY = ba.BUILDING_KEY\nJOIN FAC_BUILDING fb ON new.FAC_BUILDING_KEY = fb.FAC_BUILDING_KEY\nORDER BY new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE DESC, new.Total_Square_Footage DESC, new.Avg_Square_Footage_Per_Room DESC;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique building names, building numbers, building heights, street addresses, cities, states, HR department names, assignable square footages, total square footages, and average square footages per room of the buildings with their corresponding addresses, sorted by assignable square footage, total square footage, and average square footage per room in descending order?",
          "B",
          "Can you provide a list of building names, building numbers, building heights, street addresses, cities, states, HR department names, assignable square footages, total square footages, and average square footages per room for buildings, ordered by assignable square footage, total square footage, and average square footage per room in descending order?",
          "C",
          "What are the names, numbers, heights, addresses, cities, states, HR department names, assignable square footages, total square footages, and average square footages per room of buildings, sorted by assignable square footage, total square footage, and average square footage per room in descending order?",
          "D",
          "How can we list the building names, numbers, heights, addresses, cities, states, HR department names, assignable square footages, total square footages, and average square footages per room for buildings, ordered by assignable square footage, total square footage, and average square footage per room in descending order?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "What are the names, numbers, heights, street addresses, cities, states, HR department names, assignable square footages, total square footages, and average square footages per room of the buildings located at 32 Vassar St in Cambridge, MA, sorted by assignable square footage, total square footage, and average square footage per room in descending order?"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "List each academic year, the term code, and the number of newly introduced subjects in this term. Display the academic year only if it differs from the previous entry. Include a grand total (the corresponding year field should be 'TOTAL') stating the total number of subjects across all academic years.",
    "gold-sql": "SELECT CASE WHEN LAG(ACADEMIC_YEAR) OVER (ORDER BY ata.TERM_CODE) = ACADEMIC_YEAR THEN NULL ELSE ACADEMIC_YEAR END AS ACADEMIC_YEAR, ata.TERM_CODE, COUNT(DISTINCT si) AS distinct_subject_count FROM ACADEMIC_TERMS_ALL ata LEFT OUTER JOIN (SELECT CASE WHEN LAG(subject_id) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = subject_id THEN NULL ELSE subject_id END AS si, CASE WHEN LAG(TERM_CODE) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = TERM_CODE THEN NULL ELSE term_code END AS term_code FROM course_catalog_subject_offered) AS a ON ata.TERM_CODE = a.TERM_CODE GROUP BY ata.TERM_CODE, ACADEMIC_YEAR UNION ALL SELECT 'TOTAL', NULL, COUNT(DISTINCT SUBJECT_ID) AS total_distinct_subject_count FROM course_catalog_subject_offered;",
    "options": [
      "How many distinct subjects were offered in each academic term, and are there any terms where no subjects were offered based on the academic year and term code?",
      "Can you provide the distribution of distinct subject counts for each academic term, including the academic year and term code, and identify if there were any terms with zero subjects offered?",
      "What is the total count of distinct subject IDs for each academic year and term code in the course catalog subject offered table, and how does this count compare to the previous academic year and term code?",
      "Could you display the academic year, term code, and the number of distinct subjects offered in each term, highlighting any terms where no subjects were offered?"
    ],
    "oracle_sql": "select CASE WHEN Lag(ACADEMIC_YEAR)over (order by ata.TERM_CODE) =ACADEMIC_YEAR THEN NULL ELSE ACADEMIC_YEAR end AS ACADEMIC_YEAR,ata.TERM_CODE, COUNT(distinct si) from ACADEMIC_TERMS_ALL ata LEFT OUTER JOIN (select * from (select CASE WHEN LAG(subject_id) over(ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = subject_id then NULL else subject_id end as si, case when LAG(TERM_CODE) over (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) =TERM_CODE then null else term_code end as term_code from course_catalog_subject_offered) where si is not null) a ON ata.TERM_CODE=a.TERM_CODE GROUP BY ata.TERM_CODE, ACADEMIC_YEAR UNION ALL SELECT 'TOTAL', NULL, COUNT(DISTINCT SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH CTE1 AS (\n    SELECT \n        CASE WHEN LAG(ACADEMIC_YEAR) OVER (ORDER BY ata.TERM_CODE) = ACADEMIC_YEAR THEN NULL ELSE ACADEMIC_YEAR END AS ACADEMIC_YEAR, \n        ata.TERM_CODE, \n        COUNT(DISTINCT si) AS distinct_subject_count \n    FROM ACADEMIC_TERMS_ALL ata \n    LEFT OUTER JOIN (\n        SELECT \n            CASE WHEN LAG(subject_id) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = subject_id THEN NULL ELSE subject_id END AS si, \n            CASE WHEN LAG(TERM_CODE) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = TERM_CODE THEN NULL ELSE term_code END AS term_code \n        FROM course_catalog_subject_offered\n    ) AS a ON ata.TERM_CODE = a.TERM_CODE \n    GROUP BY ata.TERM_CODE, ACADEMIC_YEAR\n),\nCTE2 AS (\n    SELECT 'TOTAL' AS ACADEMIC_YEAR, NULL AS TERM_CODE, COUNT(DISTINCT SUBJECT_ID) AS total_distinct_subject_count \n    FROM course_catalog_subject_offered\n)\nSELECT ACADEMIC_YEAR, TERM_CODE, distinct_subject_count \nFROM CTE1\nUNION ALL\nSELECT ACADEMIC_YEAR, TERM_CODE, total_distinct_subject_count \nFROM CTE2;\n",
    "sql_decomposition": [
      {
        "question": "What is the distribution of distinct subject counts for each academic term in the dataset? Display the academic year, term code, and the number of distinct subjects offered in each term. Are there any terms where no subjects are offered?",
        "gold-sql": "SELECT CASE WHEN LAG(ACADEMIC_YEAR) OVER (ORDER BY ata.TERM_CODE) = ACADEMIC_YEAR THEN NULL ELSE ACADEMIC_YEAR END AS ACADEMIC_YEAR, ata.TERM_CODE, COUNT(DISTINCT si) AS distinct_subject_count FROM ACADEMIC_TERMS_ALL AS ata LEFT OUTER JOIN (SELECT CASE WHEN LAG(subject_id) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = subject_id THEN NULL ELSE subject_id END AS si, CASE WHEN LAG(TERM_CODE) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = TERM_CODE THEN NULL ELSE term_code END AS term_code FROM course_catalog_subject_offered) AS a ON ata.TERM_CODE = a.TERM_CODE GROUP BY ata.TERM_CODE, ACADEMIC_YEAR",
        "title": "CTE1",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the distribution of distinct subject counts for each academic term in the dataset? Display the academic year, term code, and the number of distinct subjects offered in each term. Are there any terms where no subjects are offered?",
          "B",
          "How many distinct subjects are offered in each academic term? Show the academic year, term code, and the count of unique subjects for each term. Are there any terms with zero subjects offered?",
          "C",
          "Can you provide a breakdown of the number of distinct subjects offered in each academic term? Include the academic year, term code, and the count of unique subjects for each term. Are there any terms where no subjects are offered?",
          "D",
          "What is the count of unique subjects offered in each academic term? Include the academic year, term code, and the number of distinct subjects for each term. Are there any terms where no subjects are available?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "This query aims to calculate the total number of distinct subject IDs offered in the course catalog. The 'total_distinct_subject_count' is derived by counting the unique occurrences of 'SUBJECT_ID' in the 'course_catalog_subject_offered' table. The final result shows that there are 6845 distinct subject IDs offered in the course catalog.",
        "gold-sql": "SELECT 'TOTAL' AS ACADEMIC_YEAR, NULL AS TERM_CODE, COUNT(DISTINCT SUBJECT_ID) AS total_distinct_subject_count FROM course_catalog_subject_offered",
        "title": "CTE2",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "This query aims to calculate the total number of distinct subject IDs offered in the course catalog.",
          "The 'total_distinct_subject_count' is derived by counting the unique occurrences of 'SUBJECT_ID' in the 'course_catalog_subject_offered' table.",
          "The final result shows that there are 6845 distinct subject IDs offered in the course catalog.",
          "B",
          "What is the total count of unique subject IDs available in the course catalog?",
          "The output displays 'ACADEMIC_YEAR' as 'TOTAL', 'TERM_CODE' as NULL, and 'total_distinct_subject_count' representing the distinct count of subject IDs.",
          "The 'total_distinct_subject_count' is calculated by counting the unique occurrences of 'SUBJECT_ID' in the 'course_catalog_subject_offered' table.",
          "The query result reveals that there are 6845 distinct subject IDs listed in the course catalog.",
          "C",
          "How many different subject IDs are there in the course catalog?",
          "The output includes 'ACADEMIC_YEAR' labeled as 'TOTAL', 'TERM_CODE' with NULL, and 'total_distinct_subject_count' indicating the count of unique subject IDs.",
          "The 'total_distinct_subject_count' is computed by counting the distinct occurrences of 'SUBJECT_ID' in the 'course_catalog_subject_offered' table.",
          "The query outcome specifies a total of 6845 distinct subject IDs available in the course catalog.",
          "D",
          "What is the total number of unique subject IDs listed in the course catalog?",
          "The result set consists of 'ACADEMIC_YEAR' denoted as 'TOTAL', 'TERM_CODE' as NULL, and 'total_distinct_subject_count' showing the count of distinct subject IDs.",
          "The 'total_distinct_subject_count' is determined by counting the unique 'SUBJECT_ID' entries in the 'course_catalog_subject_offered' table.",
          "The query output highlights that there are 6845 distinct subject IDs offered in the course catalog."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the count of distinct subject IDs for each academic year and term code in the course catalog subject offered table? How does this count change compared to the previous academic year and term code?",
        "gold-sql": "SELECT \n            CASE WHEN LAG(subject_id) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = subject_id THEN NULL ELSE subject_id END AS si, \n            CASE WHEN LAG(TERM_CODE) OVER (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = TERM_CODE THEN NULL ELSE term_code END AS term_code \n        FROM course_catalog_subject_offered\n    ) AS a ON ata.TERM_CODE = a.TERM_CODE \n    GROUP BY ata.TERM_CODE, ACADEMIC_YEAR\n),\nCTE2 AS (\n    SELECT 'TOTAL' AS ACADEMIC_YEAR, NULL AS TERM_CODE, COUNT(DISTINCT SUBJECT_ID) AS total_distinct_subject_count \n    FROM course_catalog_subject_offered\n)\nSELECT ACADEMIC_YEAR, TERM_CODE, distinct_subject_count \nFROM CTE1\nUNION ALL\nSELECT ACADEMIC_YEAR, TERM_CODE, total_distinct_subject_count \nFROM CTE2;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of distinct subject IDs for each academic year and term code in the course catalog subject offered table? How does this count change compared to the previous academic year and term code?",
          "B",
          "Can you provide the academic year, term code, and the count of distinct subject IDs for each combination in the course catalog subject offered table? Additionally, what is the total count of distinct subject IDs across all academic years?",
          "C",
          "How many unique subject IDs are there for each academic year and term code in the course catalog subject offered table? Could you also show the total count of distinct subject IDs for all academic years combined?",
          "D",
          "For every academic year and term code in the course catalog subject offered table, what is the number of distinct subject IDs? How does this count compare to the total count of distinct subject IDs across all academic years?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "How many distinct subjects were offered in each academic term, and are there any terms where no subjects were offered based on the academic year and term code?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "List each floor key and department name within the Stata building, as well as the number of rooms, total area, and average area per department on each floor. Include subtotals for each floor and a grand total across all floors. Sort the results by floor key and department name in ascending order. Exclude departments without any rooms in the building. Only the first row of each floor group should include the floor key, and the subtotal and grand total rows should not include floor key or department name. Number of rooms and area should be rounded to integers and formatted using commas as thousands separators.",
    "gold-sql": "SELECT CASE WHEN LAG(FLOOR_KEY) OVER (ORDER BY COALESCE(FAC_FLOOR.FLOOR_SORT_SEQUENCE, 999), flsort, orgname) = FLOOR_KEY THEN NULL ELSE FLOOR_KEY END AS flid2, CASE WHEN orgname = 'zzz' THEN NULL ELSE orgname END AS dept, rmcnt, areasum, area_avg FROM (SELECT FLOOR_KEY AS flsort, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'TOTAL' ELSE FLOOR_KEY END AS flid, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE org.ORGANIZATION_NAME END AS orgname, COUNT(rm.FAC_ROOM_KEY) AS rmcnt, SUM(rm.AREA) AS areasum, AVG(rm.AREA) AS area_avg FROM FAC_ROOMS rm JOIN FCLT_ORGANIZATION org ON rm.ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY JOIN BUILDINGS bu ON rm.BUILDING_KEY = bu.BUILDING_KEY WHERE bu.BUILDING_NAME = 'Ray and Maria Stata Center' GROUP BY FLOOR_KEY, org.ORGANIZATION_NAME WITH ROLLUP ORDER BY flsort, orgname) tbltmp LEFT JOIN FAC_FLOOR ON FLOOR_KEY = flsort;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT CASE WHEN LAG(FLOOR_KEY) OVER (ORDER BY NVL(FAC_FLOOR.FLOOR_SORT_SEQUENCE, 999), flsort, orgname) = FLOOR_KEY THEN NULL ELSE FLOOR_KEY END AS flid2, CASE WHEN orgname = 'zzz' THEN NULL ELSE orgname END AS dept, rmcnt, areasum, area_avg FROM ( SELECT CASE WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE FLOOR_KEY END AS flsort, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'TOTAL' ELSE FLOOR_KEY END AS flid, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE org.ORGANIZATION_NAME END AS orgname, TO_CHAR(COUNT(rm.FAC_ROOM_KEY), '999,999,999') AS rmcnt, TO_CHAR(SUM(rm.AREA), '999,999,999') AS areasum, TO_CHAR(AVG(rm.AREA), '999,999,999') AS area_avg FROM FAC_ROOMS rm JOIN FCLT_ORGANIZATION org ON rm.ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY JOIN BUILDINGS bu ON rm.BUILDING_KEY = bu.BUILDING_KEY WHERE bu.BUILDING_NAME = 'Ray and Maria Stata Center' GROUP BY ROLLUP(FLOOR_KEY, org.ORGANIZATION_NAME) ORDER BY flsort, orgname ) tbltmp LEFT JOIN FAC_FLOOR ON FLOOR_KEY = flsort;",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH cte_main AS (\n    SELECT FLOOR_KEY AS flsort, \n           CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'SUBTOTAL' \n                WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'TOTAL' \n                ELSE FLOOR_KEY \n           END AS flid, \n           CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' \n                ELSE org.ORGANIZATION_NAME \n           END AS orgname, \n           COUNT(rm.FAC_ROOM_KEY) AS rmcnt, \n           SUM(rm.AREA) AS areasum, \n           AVG(rm.AREA) AS area_avg \n    FROM FAC_ROOMS AS rm \n    JOIN FCLT_ORGANIZATION AS org ON rm.ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY \n    JOIN BUILDINGS AS bu ON rm.BUILDING_KEY = bu.BUILDING_KEY \n    WHERE bu.BUILDING_NAME = 'Ray and Maria Stata Center' \n    GROUP BY FLOOR_KEY, org.ORGANIZATION_NAME \n    WITH ROLLUP\n)\n\nSELECT FLOOR_KEY AS flsort, \n       CASE WHEN LAG(FLOOR_KEY) OVER (ORDER BY COALESCE(FAC_FLOOR.FLOOR_SORT_SEQUENCE, 999), flsort, orgname) = FLOOR_KEY \n            THEN NULL \n            ELSE FLOOR_KEY \n       END AS flid2, \n       CASE WHEN orgname = 'zzz' \n            THEN NULL \n            ELSE orgname \n       END AS dept, \n       rmcnt, \n       areasum, \n       area_avg \nFROM cte_main \nLEFT JOIN FAC_FLOOR ON FLOOR_KEY = flsort;",
    "sql_decomposition": [
      {
        "question": "What are the different floors in the 'Ray and Maria Stata Center' building, along with the organizations present on each floor? Include a count of rooms, total area, and average area for each floor. Additionally, provide subtotals and a total for each floor.",
        "gold-sql": "SELECT FLOOR_KEY AS flsort, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'TOTAL' ELSE FLOOR_KEY END AS flid, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE org.ORGANIZATION_NAME END AS orgname, COUNT(rm.FAC_ROOM_KEY) AS rmcnt, SUM(rm.AREA) AS areasum, AVG(rm.AREA) AS area_avg FROM FAC_ROOMS AS rm JOIN FCLT_ORGANIZATION AS org ON rm.ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY JOIN BUILDINGS AS bu ON rm.BUILDING_KEY = bu.BUILDING_KEY WHERE bu.BUILDING_NAME = 'Ray and Maria Stata Center' GROUP BY FLOOR_KEY, org.ORGANIZATION_NAME WITH ROLLUP",
        "title": "cte_main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the different floors in the 'Ray and Maria Stata Center' building, along with the organizations present on each floor? Include a count of rooms, total area, and average area for each floor. Additionally, provide subtotals and a total for each floor.",
          "B",
          "Can you list the floors in the 'Ray and Maria Stata Center' building along with the organizations on each floor? Include the room count, total area, and average area for each floor. Also, show subtotals and a grand total for all floors.",
          "C",
          "Which floors are there in the 'Ray and Maria Stata Center' building, and what organizations are located on each floor? Show the number of rooms, total area, and average area for each floor. Include subtotals and a total for all floors.",
          "D",
          "Provide a breakdown of floors within the 'Ray and Maria Stata Center' building, including the organizations on each floor. Display the room count, total area, and average area for each floor. Additionally, present subtotals and a total for all floors."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique floor keys, corresponding department names, room counts, total area sums, and average areas for each floor in the facility? The results include the floor key, department name (excluding 'zzz'), room count, total area sum, and average area for each floor.",
        "gold-sql": "SELECT FLOOR_KEY AS flsort, \n       CASE WHEN LAG(FLOOR_KEY) OVER (ORDER BY COALESCE(FAC_FLOOR.FLOOR_SORT_SEQUENCE, 999), flsort, orgname) = FLOOR_KEY \n            THEN NULL \n            ELSE FLOOR_KEY \n       END AS flid2, \n       CASE WHEN orgname = 'zzz' \n            THEN NULL \n            ELSE orgname \n       END AS dept, \n       rmcnt, \n       areasum, \n       area_avg \nFROM cte_main \nLEFT JOIN FAC_FLOOR ON FLOOR_KEY = flsort;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique floor keys, corresponding department names, room counts, total area sums, and average areas for each floor in the facility? The results include the floor key, department name (excluding 'zzz'), room count, total area sum, and average area for each floor.",
          "B",
          "Can you provide a list of floor keys, department names excluding 'zzz', room counts, total area sums, and average areas for each floor in the facility? The output displays the floor key, department name, room count, total area sum, and average area for each floor.",
          "C",
          "How can we list the floor keys, department names (excluding 'zzz'), room counts, total area sums, and average areas for each floor in the facility? The query shows the floor key, department name, room count, total area sum, and average area for each floor.",
          "D",
          "What is the breakdown of floor keys, corresponding department names (excluding 'zzz'), room counts, total area sums, and average areas for each floor in the facility? The results present the floor key, department name, room count, total area sum, and average area for each floor."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "Show the department names, the corresponding SIS subject code, subject code descriptions, graduate level, and the total number of courses per department.",
    "gold-sql": "SELECT sd.DEPARTMENT_NAME, sc.SUBJECT_CODE, sc.SUBJECT_CODE_DESC, scd.GRADUATE_LEVEL, Total_Courses.Total_Courses FROM SIS_DEPARTMENT sd JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE sc ON scd.COURSE = sc.COURSE_NUMBER JOIN (SELECT sd.DEPARTMENT_NAME, COUNT(DISTINCT COURSE_NUMBER) AS Total_Courses FROM SIS_DEPARTMENT sd JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE sc ON scd.COURSE = sc.COURSE_NUMBER GROUP BY DEPARTMENT_NAME) AS Total_Courses ON sd.DEPARTMENT_NAME = Total_Courses.DEPARTMENT_NAME;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT sd.DEPARTMENT_NAME, sc.SUBJECT_CODE, sc.SUBJECT_CODE_DESC, scd.GRADUATE_LEVEL, COUNT(DISTINCT sc.COURSE_NUMBER) OVER (PARTITION BY sd.DEPARTMENT_NAME) AS Total_Courses FROM SIS_DEPARTMENT sd JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE sc ON scd.COURSE = sc.COURSE_NUMBER;",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH Total_Courses AS (\n    SELECT sd.DEPARTMENT_NAME, COUNT(DISTINCT COURSE_NUMBER) AS Total_Courses \n    FROM SIS_DEPARTMENT AS sd \n    JOIN SIS_COURSE_DESCRIPTION AS scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT \n    JOIN SIS_SUBJECT_CODE AS sc ON scd.COURSE = sc.COURSE_NUMBER \n    GROUP BY sd.DEPARTMENT_NAME\n)\n\nSELECT sd.DEPARTMENT_NAME, sc.SUBJECT_CODE, sc.SUBJECT_CODE_DESC, scd.GRADUATE_LEVEL, Total_Courses.Total_Courses \nFROM SIS_DEPARTMENT AS sd \nJOIN SIS_COURSE_DESCRIPTION AS scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT \nJOIN SIS_SUBJECT_CODE AS sc ON scd.COURSE = sc.COURSE_NUMBER \nJOIN Total_Courses ON sd.DEPARTMENT_NAME = Total_Courses.DEPARTMENT_NAME;",
    "sql_decomposition": [
      {
        "question": "What is the total number of courses offered in each department? Show the department name along with the count of unique course numbers. For example, the Department of Aeronautics and Astronautics offers 1 course, while the Department of Anthropology offers 1 course as well.",
        "gold-sql": "SELECT sd.DEPARTMENT_NAME, COUNT(DISTINCT COURSE_NUMBER) AS Total_Courses FROM SIS_DEPARTMENT AS sd JOIN SIS_COURSE_DESCRIPTION AS scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE AS sc ON scd.COURSE = sc.COURSE_NUMBER GROUP BY sd.DEPARTMENT_NAME",
        "title": "Total_Courses",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the total number of courses offered in each department? Show the department name along with the count of unique course numbers. For example, the Department of Aeronautics and Astronautics offers 1 course, while the Department of Anthropology offers 1 course as well.",
          "B",
          "How many unique courses are available in each department? Provide a breakdown of the department names and the corresponding count of distinct course numbers. For instance, the Department of Architecture has 1 unique course, and the Department of Biological Engineering offers 2 unique courses.",
          "C",
          "Can you list the departments along with the total count of distinct courses they offer? For instance, the Department of Bioengineering & Environmental Health provides 1 course, while the Department of Biological Engineering offers 2 unique courses.",
          "D",
          "What is the distribution of unique courses across different departments? Show the department names and the corresponding count of distinct course numbers. For example, the Department of Anthropology offers 1 course, and the Department of Architecture offers 1 course as well."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the department name, subject code, subject code description, graduate level, and total courses for each department?",
        "gold-sql": "SELECT sd.DEPARTMENT_NAME, sc.SUBJECT_CODE, sc.SUBJECT_CODE_DESC, scd.GRADUATE_LEVEL, Total_Courses.Total_Courses \nFROM SIS_DEPARTMENT AS sd \nJOIN SIS_COURSE_DESCRIPTION AS scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT \nJOIN SIS_SUBJECT_CODE AS sc ON scd.COURSE = sc.COURSE_NUMBER \nJOIN Total_Courses ON sd.DEPARTMENT_NAME = Total_Courses.DEPARTMENT_NAME;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the department name, subject code, subject code description, graduate level, and total courses for each department?",
          "B",
          "Can you provide a list of department names along with their corresponding subject codes, subject code descriptions, graduate levels, and total number of courses offered by each department?",
          "C",
          "How many courses are offered by each department, and what are the details of these courses such as subject code, subject code description, and graduate level?",
          "D",
          "Which departments offer courses at the graduate level, and how many total courses do they offer?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For building 36, list all space units, their floor and building name, building street address, their space usage, and the number of organizations and space units on the same building and floor.",
    "gold-sql": "SELECT DISTINCT su.SPACE_UNIT, sf.FLOOR, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, su2.SPACE_USAGE, (SELECT COUNT(DISTINCT fo2.FCLT_ORGANIZATION_KEY) FROM SPACE_UNIT su2 JOIN SPACE_DETAIL sd2 ON su2.SPACE_UNIT_KEY = sd2.SPACE_UNIT_KEY JOIN FCLT_ORGANIZATION fo2 ON fo2.FCLT_ORGANIZATION_KEY = su2.FCLT_ORGANIZATION_KEY WHERE sd2.FLOOR_KEY = sd.FLOOR_KEY AND sd2.BUILDING_KEY = sd.BUILDING_KEY) AS Total_Organizations, (SELECT COUNT(DISTINCT su3.SPACE_UNIT) FROM SPACE_UNIT su3 JOIN SPACE_DETAIL sd3 ON su3.SPACE_UNIT_KEY = sd3.SPACE_UNIT_KEY WHERE sd3.FLOOR_KEY = sd.FLOOR_KEY AND sd3.BUILDING_KEY = sd.BUILDING_KEY) AS Total_Space_Units FROM SPACE_UNIT su JOIN SPACE_DETAIL sd ON su.SPACE_UNIT_KEY = sd.SPACE_UNIT_KEY JOIN SPACE_USAGE su2 ON su2.SPACE_USAGE_KEY = sd.SPACE_USAGE_KEY JOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = sd.BUILDING_KEY JOIN FCLT_ORGANIZATION fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = b.BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' AND b.BUILDING_NUMBER = 36;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT DISTINCT su.SPACE_UNIT, sf.FLOOR, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, su2.SPACE_USAGE, COUNT(DISTINCT fo.FCLT_ORGANIZATION_KEY) OVER (PARTITION BY sd.FLOOR_KEY, sd.BUILDING_KEY) AS Total_Organizations, COUNT(DISTINCT su.SPACE_UNIT) OVER (PARTITION BY sd.FLOOR_KEY, sd.BUILDING_KEY) AS Total_Space_Units FROM SPACE_UNIT su JOIN SPACE_DETAIL sd ON su.SPACE_UNIT_KEY = sd.SPACE_UNIT_KEY JOIN SPACE_USAGE su2 ON su2.SPACE_USAGE_KEY = sd.SPACE_USAGE_KEY JOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = sd.BUILDING_KEY JOIN FCLT_ORGANIZATION fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = b.BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' AND b.BUILDING_NUMBER = '36';",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH OrganizationsCount AS (\n    SELECT su2.SPACE_UNIT_KEY, COUNT(DISTINCT fo2.FCLT_ORGANIZATION_KEY) AS Total_Organizations\n    FROM SPACE_UNIT su2\n    JOIN SPACE_DETAIL sd2 ON su2.SPACE_UNIT_KEY = sd2.SPACE_UNIT_KEY\n    JOIN FCLT_ORGANIZATION fo2 ON fo2.FCLT_ORGANIZATION_KEY = su2.FCLT_ORGANIZATION_KEY\n    GROUP BY su2.SPACE_UNIT_KEY\n),\nSpaceUnitsCount AS (\n    SELECT sd3.FLOOR_KEY, sd3.BUILDING_KEY, COUNT(DISTINCT su3.SPACE_UNIT) AS Total_Space_Units\n    FROM SPACE_UNIT su3\n    JOIN SPACE_DETAIL sd3 ON su3.SPACE_UNIT_KEY = sd3.SPACE_UNIT_KEY\n    GROUP BY sd3.FLOOR_KEY, sd3.BUILDING_KEY\n)\nSELECT DISTINCT su.SPACE_UNIT, sf.FLOOR, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, su2.SPACE_USAGE, oc.Total_Organizations, suc.Total_Space_Units\nFROM SPACE_UNIT su\nJOIN SPACE_DETAIL sd ON su.SPACE_UNIT_KEY = sd.SPACE_UNIT_KEY\nJOIN SPACE_USAGE su2 ON su2.SPACE_USAGE_KEY = sd.SPACE_USAGE_KEY\nJOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY\nJOIN BUILDINGS b ON b.BUILDING_KEY = sd.BUILDING_KEY\nJOIN FCLT_ORGANIZATION fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY\nJOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = b.BUILDING_KEY\nLEFT JOIN OrganizationsCount oc ON su.SPACE_UNIT_KEY = oc.SPACE_UNIT_KEY\nLEFT JOIN SpaceUnitsCount suc ON sd.FLOOR_KEY = suc.FLOOR_KEY AND sd.BUILDING_KEY = suc.BUILDING_KEY\nWHERE fba.ADDRESS_PURPOSE = 'STREET' AND b.BUILDING_NUMBER = 36;\n",
    "sql_decomposition": [
      {
        "question": "What is the count of distinct organizations associated with each space unit key? Can you provide the space unit key along with the total number of organizations linked to it?",
        "gold-sql": "SELECT su2.SPACE_UNIT_KEY, COUNT(DISTINCT fo2.FCLT_ORGANIZATION_KEY) AS Total_Organizations FROM SPACE_UNIT AS su2 JOIN SPACE_DETAIL AS sd2 ON su2.SPACE_UNIT_KEY = sd2.SPACE_UNIT_KEY JOIN FCLT_ORGANIZATION AS fo2 ON fo2.FCLT_ORGANIZATION_KEY = su2.FCLT_ORGANIZATION_KEY GROUP BY su2.SPACE_UNIT_KEY",
        "title": "OrganizationsCount",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of distinct organizations associated with each space unit key? Can you provide the space unit key along with the total number of organizations linked to it?",
          "B",
          "How many different organizations are connected to each space unit key? Show the space unit key alongside the total count of organizations related to it.",
          "C",
          "Could you list the unique organizations linked to each space unit key? Display the space unit key and the total number of distinct organizations associated with it.",
          "D",
          "For each space unit key, what is the total count of distinct organizations connected to it? Show the space unit key and the corresponding number of organizations for each."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the total number of unique space units in each building on floor 0? The output includes the floor key, building key, and the count of distinct space units in each building on floor 0.",
        "gold-sql": "SELECT sd3.FLOOR_KEY, sd3.BUILDING_KEY, COUNT(DISTINCT su3.SPACE_UNIT) AS Total_Space_Units FROM SPACE_UNIT AS su3 JOIN SPACE_DETAIL AS sd3 ON su3.SPACE_UNIT_KEY = sd3.SPACE_UNIT_KEY GROUP BY sd3.FLOOR_KEY, sd3.BUILDING_KEY",
        "title": "SpaceUnitsCount",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the total number of unique space units in each building on floor 0? The output includes the floor key, building key, and the count of distinct space units in each building on floor 0.",
          "B",
          "How many different space units are there in each building located on floor 0? The result displays the floor key, building key, and the total count of unique space units for each building on floor 0.",
          "C",
          "For buildings on floor 0, what is the total count of distinct space units in each building? The output lists the floor key, building key, and the number of unique space units in each building on floor 0.",
          "D",
          "Which buildings on floor 0 have how many unique space units? The result shows the floor key, building key, and the total count of distinct space units for each building on floor 0."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique space units, their corresponding floor numbers, building names, street addresses, space usages, total organizations, and total space units for building number 36 located on a street address?",
        "gold-sql": "SELECT sd3.FLOOR_KEY, sd3.BUILDING_KEY, COUNT(DISTINCT su3.SPACE_UNIT) AS Total_Space_Units\n    FROM SPACE_UNIT su3\n    JOIN SPACE_DETAIL sd3 ON su3.SPACE_UNIT_KEY = sd3.SPACE_UNIT_KEY\n    GROUP BY sd3.FLOOR_KEY, sd3.BUILDING_KEY\n)\nSELECT DISTINCT su.SPACE_UNIT, sf.FLOOR, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, su2.SPACE_USAGE, oc.Total_Organizations, suc.Total_Space_Units\nFROM SPACE_UNIT su\nJOIN SPACE_DETAIL sd ON su.SPACE_UNIT_KEY = sd.SPACE_UNIT_KEY\nJOIN SPACE_USAGE su2 ON su2.SPACE_USAGE_KEY = sd.SPACE_USAGE_KEY\nJOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY\nJOIN BUILDINGS b ON b.BUILDING_KEY = sd.BUILDING_KEY\nJOIN FCLT_ORGANIZATION fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY\nJOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = b.BUILDING_KEY\nLEFT JOIN OrganizationsCount oc ON su.SPACE_UNIT_KEY = oc.SPACE_UNIT_KEY\nLEFT JOIN SpaceUnitsCount suc ON sd.FLOOR_KEY = suc.FLOOR_KEY AND sd.BUILDING_KEY = suc.BUILDING_KEY\nWHERE fba.ADDRESS_PURPOSE = 'STREET' AND b.BUILDING_NUMBER = 36;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique space units, their corresponding floor numbers, building names, street addresses, space usages, total organizations, and total space units for building number 36 located on a street address?",
          "B",
          "How many different space units are there in each floor of building number 36 on a street address, along with their respective floor numbers, building names, street addresses, space usages, total organizations, and total space units?",
          "C",
          "Which space units are present in building number 36 on a street address, and what are their floor numbers, building names, street addresses, space usages, total organizations, and total space units?",
          "D",
          "Can you provide a list of unique space units in each floor of building number 36 on a street address, including details such as floor numbers, building names, space usages, total organizations, and total space units?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each course, list its title, name of the building of the course location, duration (in terms of days), and a running average of the duration (in terms of days) using a window of two preceding and two following courses (partitioned by academic year and sorted by course start date).",
    "gold-sql": "select distinct ccso.subject_title, building_name, ccso.duration, avg(duration) over (partition by ccso.academic_year order by ccso.term_start_date rows between 2 preceding and 2 following) from (select distinct subject_title, term_start_date, term_end_date-term_start_date as duration, cis.academic_year, meet_place from academic_terms join COURSE_CATALOG_SUBJECT_OFFERED cis on cis.effective_term_code=academic_terms.term_code) ccso JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY;",
    "options": [
      "What are the subject titles, building names, durations, and average durations of classes offered in different academic years? How do the average durations compare across different academic years?",
      "Which courses have the same duration but are held in different buildings? Can you identify any patterns in the distribution of course durations across buildings?",
      "How do the durations of courses vary within the same academic year? Are there any subject titles that consistently have similar durations across different terms?",
      "Can you identify any courses that have varying durations within the same academic year? How does the average duration of these courses change over consecutive terms?"
    ],
    "oracle_sql": "select distinct ccso.subject_title, building_name, ccso.duration, avg(duration) over (partition by ccso.academic_year order by ccso.term_start_date rows between 2 preceding and 2 following) from (select distinct subject_title, term_start_date, term_end_date-term_start_date as duration, cis.academic_year, meet_place from academic_terms join COURSE_CATALOG_SUBJECT_OFFERED cis on cis.effective_term_code=academic_terms.term_code) ccso JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH ccso_cte AS (\n    SELECT DISTINCT subject_title, term_start_date, term_end_date - term_start_date AS duration, cis.academic_year, meet_place\n    FROM academic_terms\n    JOIN COURSE_CATALOG_SUBJECT_OFFERED cis ON cis.effective_term_code = academic_terms.term_code\n),\navg_duration_cte AS (\n    SELECT subject_title, building_name, duration, AVG(duration) OVER (PARTITION BY academic_year ORDER BY term_start_date ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS avg_duration\n    FROM ccso_cte\n    JOIN FCLT_ROOMS fr ON ccso_cte.meet_place = fr.FCLT_ROOM_KEY\n    JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY\n)\nSELECT DISTINCT subject_title, building_name, duration, avg_duration\nFROM avg_duration_cte;\n",
    " ": [
      {
        "question": "What are the subject titles, start dates, durations, academic years, and meeting places for courses offered in the academic terms? The output includes the subject title, term start date, duration (calculated as the term end date minus the term start date), academic year, and meeting place.",
        "gold-sql": "SELECT DISTINCT subject_title, term_start_date, term_end_date - term_start_date AS duration, cis.academic_year, meet_place FROM academic_terms JOIN COURSE_CATALOG_SUBJECT_OFFERED AS cis ON cis.effective_term_code = academic_terms.term_code",
        "title": "ccso_cte",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the subject titles, start dates, durations, academic years, and meeting places for courses offered in the academic terms? The output includes the subject title, term start date, duration (calculated as the term end date minus the term start date), academic year, and meeting place.",
          "B",
          "Can you provide a list of subject titles, term start dates, durations, academic years, and meeting places for courses offered in the academic terms? The duration is calculated as the difference between the term end date and the term start date.",
          "C",
          "Which subject titles, term start dates, durations, academic years, and meeting places are associated with courses offered in the academic terms? The duration represents the length of each term, calculated as the term end date minus the term start date.",
          "D",
          "How do the subject titles, term start dates, durations, academic years, and meeting places for courses offered in the academic terms relate to each other? The duration is derived by subtracting the term start date from the term end date."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the subject titles, building names, durations, and the average duration of classes for each academic year? The average duration is calculated based on the durations of classes within a window of 2 preceding and 2 following terms.",
        "gold-sql": "SELECT subject_title, building_name, duration, AVG(duration) OVER (PARTITION BY academic_year ORDER BY term_start_date ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS avg_duration FROM ccso_cte JOIN FCLT_ROOMS AS fr ON ccso_cte.meet_place = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING AS fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY",
        "title": "avg_duration_cte",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the subject titles, building names, durations, and the average duration of classes for each academic year? The average duration is calculated based on the durations of classes within a window of 2 preceding and 2 following terms.",
          "B",
          "How do the subject titles, building names, and durations of classes vary across different academic years? Additionally, what is the average duration of classes within a window of 2 preceding and 2 following terms for each academic year?",
          "C",
          "Can you provide a list of subject titles, building names, durations, and the average duration of classes for each academic year? The average duration is computed by considering the durations of classes within a window of 2 preceding and 2 following terms.",
          "D",
          "What is the relationship between subject titles, building names, and class durations across different academic years? How is the average duration of classes calculated within a window of 2 preceding and 2 following terms for each academic year?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the unique subject titles, building names, durations, and average durations from the table?",
        "gold-sql": "SELECT DISTINCT subject_title, building_name, duration, avg_duration\nFROM avg_duration_cte;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the unique subject titles, building names, durations, and average durations from the table?",
          "B",
          "Can you show me the subject titles, building names, durations, and average durations without any duplicates?",
          "C",
          "Which subject titles, building names, durations, and average durations are listed in the table without repetition?",
          "D",
          "How can I retrieve a list of subject titles, building names, durations, and average durations without any duplicates?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "What are the subject titles, building names, durations, and average durations of classes offered in different academic years? How do the average durations compare across different academic years?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each building use, list the type, the number of distinct buildings (excluding subdivisions) of this use, the total gross square footage of these buildings, and the number of unique organizations associated with the rooms in these buildings. If the building is used as a residence, display the usage type as \"RESIDENTIAL.\" You should also include a row at the end showing the total number of buildings, the gross square footage, and the number of organizations across all types of building use. All numerical values should be rounded to integers and formatted using commas as thousands separators.",
    "gold-sql": "SELECT * FROM (SELECT CASE WHEN FLOOR.BUILDING_USE = 'RESIDENT' THEN 'RESIDENTIAL' ELSE FLOOR.BUILDING_USE END AS TYPE, COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY WHERE FLOOR.BUILDING_USE IS NOT NULL GROUP BY FLOOR.BUILDING_USE) AS derived_table UNION ALL SELECT NULL AS TYPE, COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT * FROM ( SELECT CASE WHEN FLOOR.BUILDING_USE = 'RESIDENT' THEN 'RESIDENTIAL' ELSE FLOOR.BUILDING_USE END AS TYPE, COUNT(DISTINCT NVL(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, TO_CHAR(SUM(FLOOR.EXT_GROSS_AREA), '999,999,999,999,999') AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY WHERE FLOOR.BUILDING_USE IS NOT NULL GROUP BY FLOOR.BUILDING_USE ) UNION ALL SELECT NULL AS TYPE, COUNT(DISTINCT NVL(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, TO_CHAR(SUM(FLOOR.EXT_GROSS_AREA), '999,999,999,999,999') AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY;",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH building_data AS (\n    SELECT \n        CASE WHEN FLOOR.BUILDING_USE = 'RESIDENT' THEN 'RESIDENTIAL' ELSE FLOOR.BUILDING_USE END AS TYPE,\n        COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS,\n        FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT,\n        COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS\n    FROM FCLT_BUILDING FLOOR\n    LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY\n    LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY\n    WHERE FLOOR.BUILDING_USE IS NOT NULL\n    GROUP BY FLOOR.BUILDING_USE\n),\ntotal_data AS (\n    SELECT \n        NULL AS TYPE,\n        COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS,\n        FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT,\n        COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS\n    FROM FCLT_BUILDING FLOOR\n    LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY\n    LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY\n)\nSELECT * FROM building_data\nUNION ALL\nSELECT * FROM total_data;\n",
    "sql_decomposition": [
      {
        "question": "What are the different types of buildings, the number of buildings for each type, the total gross square footage, and the number of organizations associated with each building type?",
        "gold-sql": "SELECT CASE WHEN FLOOR.BUILDING_USE = 'RESIDENT' THEN 'RESIDENTIAL' ELSE FLOOR.BUILDING_USE END AS TYPE, COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING AS FLOOR LEFT JOIN FCLT_ROOMS AS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION AS org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY WHERE NOT FLOOR.BUILDING_USE IS NULL GROUP BY FLOOR.BUILDING_USE",
        "title": "building_data",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the different types of buildings, the number of buildings for each type, the total gross square footage, and the number of organizations associated with each building type?",
          "B",
          "How many residential buildings are there, and what is the total gross square footage and the number of organizations associated with them? Additionally, what are the counts for other building types?",
          "C",
          "Which building types are present in the dataset, and how many buildings, total gross square footage, and organizations are associated with each type?",
          "D",
          "Can you provide a breakdown of the building types along with the count of buildings, total gross square footage, and the number of organizations linked to each type of building?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the count of unique buildings in the dataset, the total gross square footage, and the number of organizations associated with these buildings? The output includes the building type, the count of buildings, the total gross square footage formatted with commas, and the number of organizations.",
        "gold-sql": "SELECT NULL AS TYPE, COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING AS FLOOR LEFT JOIN FCLT_ROOMS AS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION AS org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY",
        "title": "total_data",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of unique buildings in the dataset, the total gross square footage, and the number of organizations associated with these buildings? The output includes the building type, the count of buildings, the total gross square footage formatted with commas, and the number of organizations.",
          "B",
          "How many distinct buildings are there in the dataset, and what is the total gross square footage of these buildings? Additionally, how many unique organizations are linked to these buildings? The result displays the building type, the count of buildings, the total gross square footage formatted with commas, and the number of organizations.",
          "C",
          "Can you provide information on the number of different buildings, the total gross square footage, and the count of organizations associated with these buildings? The output consists of the building type, the count of buildings, the total gross square footage formatted with commas, and the number of organizations.",
          "D",
          "What is the count of unique buildings, the total gross square footage, and the number of organizations linked to these buildings? The result includes the building type, the count of buildings, the total gross square footage formatted with commas, and the number of organizations."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the count of unique buildings, the total gross square footage, and the number of organizations in the facility?",
        "gold-sql": "SELECT \n        NULL AS TYPE,\n        COUNT(DISTINCT COALESCE(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS,\n        FORMAT(SUM(FLOOR.EXT_GROSS_AREA), 0) AS GROSS_SQFT,\n        COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS\n    FROM FCLT_BUILDING FLOOR\n    LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY\n    LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY\n)\nSELECT * FROM building_data\nUNION ALL\nSELECT * FROM total_data;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of unique buildings, the total gross square footage, and the number of organizations in the facility?",
          "B",
          "How many distinct buildings are there, what is the total gross square footage, and how many organizations are present in the facility?",
          "C",
          "Can you provide the count of unique buildings, the total gross square footage formatted to the nearest whole number, and the number of organizations in the facility?",
          "D",
          "What is the number of unique buildings, the total gross square footage in formatted form, and the count of organizations in the facility?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "Retrieve the titles of subjects offered in the summer term along with their descriptions, responsible faculty names, email address, building name, room name, floor level, building street address, and the total number of types of courses per departmnet.",
    "gold-sql": "SELECT ccso.SUBJECT_TITLE, ccso.SUBJECT_DESCRIPTION, ccso.RESPONSIBLE_FACULTY_NAME, ed.EMAIL_ADDRESS, b.BUILDING_NAME, fr.ROOM_FULL_NAME, ff.LEVEL_ID, b.BUILDING_STREET_ADDRESS, (SELECT COUNT(DISTINCT ccso2.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED ccso2 WHERE ccso2.DEPARTMENT_CODE = ccso.DEPARTMENT_CODE) AS Total_Courses FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE JOIN FAC_ROOMS fr ON ccso.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_FLOOR ff ON ff.FLOOR_KEY = fr.FLOOR_KEY JOIN BUILDINGS b ON fr.BUILDING_KEY = b.BUILDING_KEY JOIN FAC_BUILDING_ADDRESS fba ON fba.BUILDING_KEY = fr.BUILDING_KEY WHERE at.TERM_CODE LIKE '%SU' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "SELECT ccso.SUBJECT_TITLE, ccso.SUBJECT_DESCRIPTION, ccso.RESPONSIBLE_FACULTY_NAME, ed.EMAIL_ADDRESS, b.BUILDING_NAME, fr.ROOM_FULL_NAME, ff.LEVEL_ID, b.BUILDING_STREET_ADDRESS, COUNT(DISTINCT ccso.SUBJECT_ID) OVER (PARTITION BY ccso.DEPARTMENT_CODE) AS Total_Courses FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE JOIN FAC_ROOMS fr ON ccso.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_FLOOR ff ON ff.FLOOR_KEY = fr.FLOOR_KEY JOIN BUILDINGS b ON fr.BUILDING_KEY = b.BUILDING_KEY JOIN FAC_BUILDING_ADDRESS fba ON fba.BUILDING_KEY = fr.BUILDING_KEY WHERE at.TERM_CODE LIKE '%SU' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH TotalCourses AS (\n    SELECT ccso2.DEPARTMENT_CODE, COUNT(DISTINCT ccso2.SUBJECT_ID) AS Total_Courses\n    FROM COURSE_CATALOG_SUBJECT_OFFERED ccso2\n    GROUP BY ccso2.DEPARTMENT_CODE\n),\nFilteredData AS (\n    SELECT ccso.SUBJECT_TITLE, ccso.SUBJECT_DESCRIPTION, ccso.RESPONSIBLE_FACULTY_NAME, ed.EMAIL_ADDRESS, b.BUILDING_NAME, fr.ROOM_FULL_NAME, ff.LEVEL_ID, b.BUILDING_STREET_ADDRESS, tc.Total_Courses\n    FROM COURSE_CATALOG_SUBJECT_OFFERED ccso\n    JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID\n    JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE\n    JOIN FAC_ROOMS fr ON ccso.MEET_PLACE = fr.FAC_ROOM_KEY\n    JOIN FAC_FLOOR ff ON ff.FLOOR_KEY = fr.FLOOR_KEY\n    JOIN BUILDINGS b ON fr.BUILDING_KEY = b.BUILDING_KEY\n    JOIN FAC_BUILDING_ADDRESS fba ON fba.BUILDING_KEY = fr.BUILDING_KEY\n    LEFT JOIN TotalCourses tc ON ccso.DEPARTMENT_CODE = tc.DEPARTMENT_CODE\n    WHERE at.TERM_CODE LIKE '%SU' AND fba.ADDRESS_PURPOSE = 'STREET'\n)\nSELECT * FROM FilteredData;\n",
    "sql_decomposition": [
      {
        "question": "What is the count of unique courses offered for each department in the course catalog? Display the department code along with the total number of distinct courses offered in each department.",
        "gold-sql": "SELECT ccso2.DEPARTMENT_CODE, COUNT(DISTINCT ccso2.SUBJECT_ID) AS Total_Courses FROM COURSE_CATALOG_SUBJECT_OFFERED AS ccso2 GROUP BY ccso2.DEPARTMENT_CODE",
        "title": "TotalCourses",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the count of unique courses offered for each department in the course catalog? Display the department code along with the total number of distinct courses offered in each department.",
          "B",
          "How many different courses are available in each department of the course catalog? Show the department code and the total count of unique courses offered in that department.",
          "C",
          "Can you list the department codes along with the total number of distinct courses offered in each department from the course catalog?",
          "D",
          "Which departments have the highest number of unique courses in the course catalog? Provide the department code and the corresponding count of distinct courses offered."
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What are the subject title, subject description, responsible faculty name, email address, building name, room full name, level ID, building street address, and total courses for courses offered in the summer term with a street address as the purpose in the building address?",
        "gold-sql": "SELECT ccso.SUBJECT_TITLE, ccso.SUBJECT_DESCRIPTION, ccso.RESPONSIBLE_FACULTY_NAME, ed.EMAIL_ADDRESS, b.BUILDING_NAME, fr.ROOM_FULL_NAME, ff.LEVEL_ID, b.BUILDING_STREET_ADDRESS, tc.Total_Courses FROM COURSE_CATALOG_SUBJECT_OFFERED AS ccso JOIN EMPLOYEE_DIRECTORY AS ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN ACADEMIC_TERMS AS at ON ccso.TERM_CODE = at.TERM_CODE JOIN FAC_ROOMS AS fr ON ccso.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_FLOOR AS ff ON ff.FLOOR_KEY = fr.FLOOR_KEY JOIN BUILDINGS AS b ON fr.BUILDING_KEY = b.BUILDING_KEY JOIN FAC_BUILDING_ADDRESS AS fba ON fba.BUILDING_KEY = fr.BUILDING_KEY LEFT JOIN TotalCourses AS tc ON ccso.DEPARTMENT_CODE = tc.DEPARTMENT_CODE WHERE at.TERM_CODE LIKE '%SU' AND fba.ADDRESS_PURPOSE = 'STREET'",
        "title": "FilteredData",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the subject title, subject description, responsible faculty name, email address, building name, room full name, level ID, building street address, and total courses for courses offered in the summer term with a street address as the purpose in the building address?",
          "B",
          "Retrieve the subject title, subject description, responsible faculty name, email address, building name, room full name, level ID, building street address, and total courses for courses offered in the summer term with a street address specified in the building address.",
          "C",
          "List the subject title, subject description, responsible faculty name, email address, building name, room full name, level ID, building street address, and total courses for courses offered in the summer term with a street address designated in the building address.",
          "D",
          "Which courses have the subject title, subject description, responsible faculty name, email address, building name, room full name, level ID, building street address, and total courses, and are offered in the summer term with a street address as the building address purpose?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What information is included in the dataset from the table `FilteredData`? The output displays all columns present in the table.",
        "gold-sql": "SELECT * FROM FilteredData;\n",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What information is included in the dataset from the table `FilteredData`? The output displays all columns present in the table.",
          "B",
          "Can you provide a list of all the columns available in the `FilteredData` table without any filtering or manipulation?",
          "C",
          "What are the contents of the `FilteredData` table? This query returns all columns for each row in the table.",
          "D",
          "How can I retrieve all the data from the `FilteredData` table without any specific conditions or filters applied?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": "",
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each TIP material status, list the total number of unique materials associated with the status, the total number of records associated with the status, and the total student enrollment associated with the status. Any material status with null values should be displayed as 'No material status'. Additionally, include a grand total across all material status (the material status for this row should be displayed as 'Grand Total').",
    "gold-sql": "SELECT COALESCE(material_status, 'Grand Total') AS material_status, num_materials, total_record_count, total_enrollment FROM (SELECT CASE WHEN material_status IS NULL THEN 'No material status' ELSE material_status END AS material_status, COUNT(DISTINCT material_title) AS num_materials, SUM(RECORD_COUNT) AS total_record_count, SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment FROM (SELECT tms.TIP_MATERIAL_STATUS AS material_status, tm.TITLE AS material_title, td.RECORD_COUNT, tso.NUM_ENROLLED_STUDENTS FROM TIP_DETAIL td JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY WHERE td.RECORD_COUNT > 0) MaterialStatusDetails GROUP BY material_status WITH ROLLUP) MaterialStatusAggregates ORDER BY CASE WHEN material_status = 'Grand Total' THEN 1 ELSE 0 END, total_record_count DESC, material_status;",
    "options": [
      "Hello! How can I assist you today?"
    ],
    "oracle_sql": "WITH MaterialStatusDetails AS ( SELECT tms.TIP_MATERIAL_STATUS AS material_status, tm.TITLE AS material_title, td.RECORD_COUNT, tso.NUM_ENROLLED_STUDENTS FROM TIP_DETAIL td JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY WHERE td.RECORD_COUNT > 0 ), MaterialStatusAggregates AS ( SELECT CASE WHEN GROUPING(material_status) = 1 THEN NULL WHEN material_status IS NULL THEN 'No material status' ELSE material_status END AS material_status, COUNT(DISTINCT material_title) AS num_materials, SUM(RECORD_COUNT) AS total_record_count, SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment FROM MaterialStatusDetails GROUP BY ROLLUP(material_status) ) SELECT COALESCE(material_status, 'Grand Total') AS material_status, num_materials, total_record_count, total_enrollment FROM MaterialStatusAggregates ORDER BY CASE WHEN material_status = 'Grand Total' THEN 1 ELSE 0 END, total_record_count DESC, material_status;",
    "question": "",
    "sql": "",
    "sql_in_cte": "WITH MaterialStatusDetails AS (\n    SELECT tms.TIP_MATERIAL_STATUS AS material_status, tm.TITLE AS material_title, td.RECORD_COUNT, tso.NUM_ENROLLED_STUDENTS\n    FROM TIP_DETAIL td\n    JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY\n    JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY\n    JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY\n    WHERE td.RECORD_COUNT > 0\n),\nMaterialStatusAggregates AS (\n    SELECT CASE WHEN material_status IS NULL THEN 'No material status' ELSE material_status END AS material_status,\n           COUNT(DISTINCT material_title) AS num_materials,\n           SUM(RECORD_COUNT) AS total_record_count,\n           SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment\n    FROM MaterialStatusDetails\n    GROUP BY material_status WITH ROLLUP\n)\nSELECT material_status, num_materials, total_record_count, total_enrollment\nFROM MaterialStatusAggregates\nORDER BY CASE WHEN material_status = 'Grand Total' THEN 1 ELSE 0 END, total_record_count DESC, material_status;",
    "sql_decomposition": [
      {
        "question": "What are the material status, title, record count, and number of enrolled students for courses with a record count greater than zero?",
        "gold-sql": "SELECT tms.TIP_MATERIAL_STATUS AS material_status, tm.TITLE AS material_title, td.RECORD_COUNT, tso.NUM_ENROLLED_STUDENTS FROM TIP_DETAIL AS td JOIN TIP_MATERIAL_STATUS AS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_MATERIAL AS tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED AS tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY WHERE td.RECORD_COUNT > 0",
        "title": "MaterialStatusDetails",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the material status, title, record count, and number of enrolled students for courses with a record count greater than zero?",
          "B",
          "Can you provide the material status, title, record count, and number of enrolled students for courses that have at least one student enrolled?",
          "C",
          "How many courses have students enrolled, and what is the material status and title of each course along with the record count?",
          "D",
          "Which courses have students enrolled, and what is the material status, title, record count, and number of enrolled students for each course?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the breakdown of material statuses in the MaterialStatusDetails table? How many unique material titles are associated with each status? What is the total record count and total enrollment for each material status, including an overall summary?",
        "gold-sql": "SELECT CASE WHEN material_status IS NULL THEN 'No material status' ELSE material_status END AS material_status, COUNT(DISTINCT material_title) AS num_materials, SUM(RECORD_COUNT) AS total_record_count, SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment FROM MaterialStatusDetails GROUP BY material_status WITH ROLLUP",
        "title": "MaterialStatusAggregates",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the breakdown of material statuses in the MaterialStatusDetails table? How many unique material titles are associated with each status? What is the total record count and total enrollment for each material status, including an overall summary?",
          "B",
          "Can you provide a summary of material statuses in the MaterialStatusDetails table, along with the number of unique material titles for each status? Additionally, what are the total record count and total enrollment for each material status, including a grand total?",
          "C",
          "How many different material statuses are there in the MaterialStatusDetails table? For each status, what is the count of unique material titles, total record count, and total enrollment? What is the overall summary for all material statuses?",
          "D",
          "What is the distribution of material statuses in the MaterialStatusDetails table? How many unique material titles are associated with each status, and what are the total record count and total enrollment for each status, including a comprehensive summary?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the breakdown of material statuses in the dataset, along with the number of unique material titles, total record count, and total enrollment for each status? The results are sorted by total record count in descending order, with 'Grand Total' appearing at the end.",
        "gold-sql": "SELECT CASE WHEN material_status IS NULL THEN 'No material status' ELSE material_status END AS material_status,\n           COUNT(DISTINCT material_title) AS num_materials,\n           SUM(RECORD_COUNT) AS total_record_count,\n           SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment\n    FROM MaterialStatusDetails\n    GROUP BY material_status WITH ROLLUP\n)\nSELECT material_status, num_materials, total_record_count, total_enrollment\nFROM MaterialStatusAggregates\nORDER BY CASE WHEN material_status = 'Grand Total' THEN 1 ELSE 0 END, total_record_count DESC, material_status;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the breakdown of material statuses in the dataset, along with the number of unique material titles, total record count, and total enrollment for each status? The results are sorted by total record count in descending order, with 'Grand Total' appearing at the end.",
          "B",
          "How many unique material titles are associated with each material status, and what is the total record count and enrollment for each status? The output is sorted by total record count in descending order, with 'Grand Total' displayed at the end.",
          "C",
          "Can you provide a summary of material statuses, including the number of unique material titles, total record count, and enrollment for each status? The results are ordered by total record count, with 'Grand Total' listed last.",
          "D",
          "What is the distribution of material statuses in terms of the number of unique material titles, total record count, and enrollment? The output is sorted by total record count, with 'Grand Total' appearing at the end of the list."
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "Hello! How can I assist you today?"
  },
  {
    "adjusted": false,
    "comment": "",
    "db_id": "dw",
    "gold-question": "For each department in the library system, list the name of the department, total number of courses using library materials, the number of catalog items associated with those courses, and the average enrollment per course. Include a grand total across all departments (the corresponding department field should be 'Grand Total').",
    "gold-sql": "WITH DepartmentLibraryUsage AS ( SELECT lci.DEPARTMENT, lci.COURSE_NAME, COUNT(DISTINCT lrc.LIBRARY_RESERVE_CATALOG_KEY) AS num_catalog_items, SUM(lso.NUM_ENROLLED_STUDENTS) AS total_students FROM LIBRARY_RESERVE_MATRL_DETAIL lrd JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY WHERE lso.NUM_ENROLLED_STUDENTS > 0 GROUP BY lci.DEPARTMENT, lci.COURSE_NAME ), DepartmentAggregates AS ( SELECT DEPARTMENT, COUNT(DISTINCT COURSE_NAME) AS total_courses, SUM(num_catalog_items) AS total_catalog_items, AVG(total_students) AS avg_students_per_course FROM DepartmentLibraryUsage GROUP BY DEPARTMENT ), GrandTotal AS ( SELECT 'Grand Total' AS DEPARTMENT, SUM(total_courses) AS total_courses, SUM(total_catalog_items) AS total_catalog_items, AVG(avg_students_per_course) AS avg_students_per_course FROM DepartmentAggregates ) SELECT * FROM ( SELECT * FROM GrandTotal UNION ALL SELECT * FROM DepartmentAggregates ) CombinedResults ORDER BY CASE WHEN DEPARTMENT = 'Grand Total' THEN 0 ELSE 1 END, DEPARTMENT;",
    "options": [
      "How many total courses are offered across all departments, and what is the combined count of catalog items associated with these courses? What is the average number of students per course when considering all departments together?",
      "Which department has the course \"Essentials of Planetary Science,\" and how many catalog items and students are linked to this course? How does this department's average number of students per course compare to the grand total average across all departments?",
      "What is the total count of unique course names, the sum of catalog items, and the average number of students per course for the department \"Mechanical Engineering\"? How does this department's average student count per course differ from the overall average across all departments?",
      "How do the total number of courses, catalog items, and average students per course vary across different departments? What is the grand total for all departments combined in terms of courses, catalog items, and average students per course?"
    ],
    "oracle_sql": "WITH DepartmentLibraryUsage AS ( SELECT lci.DEPARTMENT, lci.COURSE_NAME, COUNT(DISTINCT lrc.LIBRARY_RESERVE_CATALOG_KEY) AS num_catalog_items, SUM(lso.NUM_ENROLLED_STUDENTS) AS total_students FROM LIBRARY_RESERVE_MATRL_DETAIL lrd JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY WHERE lso.NUM_ENROLLED_STUDENTS > 0 GROUP BY lci.DEPARTMENT, lci.COURSE_NAME ), DepartmentAggregates AS ( SELECT DEPARTMENT, COUNT(DISTINCT COURSE_NAME) AS total_courses, SUM(num_catalog_items) AS total_catalog_items, AVG(total_students) AS avg_students_per_course FROM DepartmentLibraryUsage GROUP BY DEPARTMENT ), GrandTotal AS ( SELECT 'Grand Total' AS DEPARTMENT, SUM(total_courses) AS total_courses, SUM(total_catalog_items) AS total_catalog_items, AVG(avg_students_per_course) AS avg_students_per_course FROM DepartmentAggregates ) SELECT * FROM ( SELECT * FROM GrandTotal UNION ALL SELECT * FROM DepartmentAggregates ) CombinedResults ORDER BY CASE WHEN DEPARTMENT = 'Grand Total' THEN 0 ELSE 1 END, DEPARTMENT;",
    "question": "",
    "sql": "",
    "question_ts_and_es": "A",
    "sql_in_cte": "WITH DepartmentLibraryUsage AS (\n    SELECT \n        lci.DEPARTMENT, \n        lci.COURSE_NAME, \n        COUNT(DISTINCT lrc.LIBRARY_RESERVE_CATALOG_KEY) AS num_catalog_items, \n        SUM(lso.NUM_ENROLLED_STUDENTS) AS total_students \n    FROM \n        LIBRARY_RESERVE_MATRL_DETAIL lrd \n        JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY \n        JOIN LIBRARY_RESERVE_CATALOG lrc ON lrd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY \n        JOIN LIBRARY_SUBJECT_OFFERED lso ON lrd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY \n    WHERE \n        lso.NUM_ENROLLED_STUDENTS > 0 \n    GROUP BY \n        lci.DEPARTMENT, lci.COURSE_NAME\n), \nDepartmentAggregates AS (\n    SELECT \n        DEPARTMENT, \n        COUNT(DISTINCT COURSE_NAME) AS total_courses, \n        SUM(num_catalog_items) AS total_catalog_items, \n        AVG(total_students) AS avg_students_per_course \n    FROM \n        DepartmentLibraryUsage \n    GROUP BY \n        DEPARTMENT\n), \nGrandTotal AS (\n    SELECT \n        'Grand Total' AS DEPARTMENT, \n        SUM(total_courses) AS total_courses, \n        SUM(total_catalog_items) AS total_catalog_items, \n        AVG(avg_students_per_course) AS avg_students_per_course \n    FROM \n        DepartmentAggregates\n)\nSELECT * \nFROM (\n    SELECT * \n    FROM GrandTotal \n    UNION ALL \n    SELECT * \n    FROM DepartmentAggregates\n) CombinedResults \nORDER BY \n    CASE \n        WHEN DEPARTMENT = 'Grand Total' THEN 0 \n        ELSE 1 \n    END, \n    DEPARTMENT;",
    "sql_decomposition": [
      {
        "question": "What are the total number of catalog items and enrolled students for each department and course? Which department offers the course \"Essentials of Planetary Science,\" and how many catalog items and students are associated with it?",
        "gold-sql": "SELECT lci.DEPARTMENT, lci.COURSE_NAME, COUNT(DISTINCT lrc.LIBRARY_RESERVE_CATALOG_KEY) AS num_catalog_items, SUM(lso.NUM_ENROLLED_STUDENTS) AS total_students FROM LIBRARY_RESERVE_MATRL_DETAIL AS lrd JOIN LIBRARY_COURSE_INSTRUCTOR AS lci ON lrd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG AS lrc ON lrd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED AS lso ON lrd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY WHERE lso.NUM_ENROLLED_STUDENTS > 0 GROUP BY lci.DEPARTMENT, lci.COURSE_NAME",
        "title": "DepartmentLibraryUsage",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What are the total number of catalog items and enrolled students for each department and course? Which department offers the course \"Essentials of Planetary Science,\" and how many catalog items and students are associated with it?",
          "B",
          "Can you provide a breakdown of the number of catalog items and enrolled students for different courses within each department? How many catalog items and students are associated with the course \"Database, Internet, and Systems Integration Technologies\" in the department of Civil and Environmental Engineering?",
          "C",
          "How many unique catalog items and enrolled students are there for each course offered by the departments? Which course in the department of Civil and Environmental Engineering has the highest number of catalog items and students enrolled?",
          "D",
          "For each department and course, what is the count of unique catalog items and the total number of enrolled students? Which course in the department of Civil and Environmental Engineering has the highest number of catalog items and students enrolled?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the total number of unique course names, total catalog items, and average number of students per course for each department in the Department Library Usage table?",
        "gold-sql": "SELECT DEPARTMENT, COUNT(DISTINCT COURSE_NAME) AS total_courses, SUM(num_catalog_items) AS total_catalog_items, AVG(total_students) AS avg_students_per_course FROM DepartmentLibraryUsage GROUP BY DEPARTMENT",
        "title": "DepartmentAggregates",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the total number of unique course names, total catalog items, and average number of students per course for each department in the Department Library Usage table?",
          "B",
          "How many different courses are offered by each department in the Department Library Usage table, and what is the total number of catalog items and the average number of students per course for each department?",
          "C",
          "For each department in the Department Library Usage table, what is the count of unique course names, the sum of catalog items, and the average number of students per course?",
          "D",
          "Can you provide a breakdown of the total number of courses, catalog items, and average students per course for each department in the Department Library Usage table?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the grand total of courses and catalog items across all departments? How does the average number of students per course compare across departments?",
        "gold-sql": "SELECT 'Grand Total' AS DEPARTMENT, SUM(total_courses) AS total_courses, SUM(total_catalog_items) AS total_catalog_items, AVG(avg_students_per_course) AS avg_students_per_course FROM DepartmentAggregates",
        "title": "GrandTotal",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the grand total of courses and catalog items across all departments? How does the average number of students per course compare across departments?",
          "B",
          "How many total courses and catalog items are there in all departments combined? What is the average number of students per course across all departments?",
          "C",
          "Can you provide the overall summary of courses and catalog items for all departments? What is the average number of students per course across all departments?",
          "D",
          "What is the total count of courses and catalog items for all departments? How does the average number of students per course vary across different departments?"
        ],
        "question_ts_and_es": "A"
      },
      {
        "question": "What is the total number of courses, total catalog items, and average number of students per course for each department in the Department Library Usage table? How does this information vary across different departments, and what is the grand total for all departments combined?",
        "gold-sql": "SELECT \n        DEPARTMENT, \n        COUNT(DISTINCT COURSE_NAME) AS total_courses, \n        SUM(num_catalog_items) AS total_catalog_items, \n        AVG(total_students) AS avg_students_per_course \n    FROM \n        DepartmentLibraryUsage \n    GROUP BY \n        DEPARTMENT\n), \nGrandTotal AS (\n    SELECT \n        'Grand Total' AS DEPARTMENT, \n        SUM(total_courses) AS total_courses, \n        SUM(total_catalog_items) AS total_catalog_items, \n        AVG(avg_students_per_course) AS avg_students_per_course \n    FROM \n        DepartmentAggregates\n)\nSELECT * \nFROM (\n    SELECT * \n    FROM GrandTotal \n    UNION ALL \n    SELECT * \n    FROM DepartmentAggregates\n) CombinedResults \nORDER BY \n    CASE \n        WHEN DEPARTMENT = 'Grand Total' THEN 0 \n        ELSE 1 \n    END, \n    DEPARTMENT;",
        "title": "main",
        "db_id": "dw",
        "adjusted": "",
        "comment": "",
        "options": [
          "A",
          "What is the total number of courses, total catalog items, and average number of students per course for each department in the Department Library Usage table? How does this information vary across different departments, and what is the grand total for all departments combined?",
          "B",
          "How many unique courses are offered by each department, and what is the total count of catalog items associated with these courses? Additionally, what is the average number of students enrolled in each course for every department? How do these metrics differ across departments, and what is the overall total for all departments?",
          "C",
          "Can you provide a breakdown of the total number of courses, catalog items, and average students per course for each department in the Department Library Usage table? How do these statistics differ between departments, and what is the cumulative total when considering all departments together?",
          "D",
          "What is the count of distinct course names, total catalog items, and average number of students per course for every department in the Department Library Usage table? How do these metrics vary across different departments, and what is the overall summary when aggregating data for all departments?"
        ],
        "question_ts_and_es": "A"
      }
    ],
    "sql_embedding": [
      -0.1188383847,
      0.0482986681,
      -0.002548045,
      -0.0110111907,
      0.0519507751,
      0.0102917533,
      0.1154332682,
      0.0007007773,
      -0.0859253556,
      -0.0706540346,
      0.00133175,
      -0.0354723744,
      0.0184340663,
      -0.0067371465,
      0.0244029667,
      -0.0295031685,
      -0.0581384562,
      -0.0504395366,
      -0.0207654908,
      0.0290359519,
      -0.063676022,
      0.0240299832,
      0.0262433123,
      -0.0060373419,
      -0.0110764503,
      -0.001400705,
      -0.0186197609,
      0.0327700712,
      0.0028860394,
      -0.0569438785,
      -0.0439416543,
      0.0254141279,
      0.0879093558,
      -0.0249911603,
      -0.0366831869,
      0.0062413802,
      -0.0664679557,
      -0.0671444684,
      0.0205642004,
      0.0423887558,
      0.0218802691,
      -0.0428824611,
      -0.034376923,
      0.061466869,
      0.0656372979,
      -0.0785202533,
      0.0294870082,
      0.0107983407,
      0.0633240566,
      -0.0450846292,
      -0.0182340108,
      -0.0277210269,
      -0.0036737609,
      -0.0365945324,
      0.0542501286,
      -0.0208565891,
      0.015034874,
      -0.0600952394,
      0.0163939893,
      -0.0332385264,
      0.0175036099,
      -0.0005951563,
      -0.1634837538,
      0.0849208906,
      -0.075838387,
      0.0161097255,
      0.0483828932,
      -0.0075980909,
      -0.0249854177,
      0.0594974756,
      0.0658899099,
      -0.0351374224,
      0.0008842416,
      -0.1156797931,
      0.0493903905,
      0.0336046554,
      0.0551541969,
      0.0263836943,
      0.0536944382,
      0.0389323644,
      0.0004394612,
      0.0180604625,
      -0.0928824991,
      -0.0040740161,
      -0.0008234651,
      -0.0488310792,
      -0.0066774264,
      -0.02354181,
      -0.0381330997,
      0.0524516068,
      -0.0424938463,
      -0.0558997169,
      0.086815767,
      -0.0489617512,
      -0.0833966881,
      -0.0457635224,
      0.029042216,
      0.0346578211,
      -0.0864919201,
      0.4062185585,
      0.0359495096,
      0.0186972059,
      0.0979784504,
      -0.0078651989,
      0.0237141699,
      -0.0575650372,
      -0.0610998273,
      -0.0066204616,
      0.0070600118,
      0.0216697622,
      -0.0244050976,
      -0.0335145518,
      0.0002501598,
      0.0317076333,
      0.0440715775,
      0.0946324766,
      -0.0355799757,
      -0.0045343093,
      0.0437148362,
      0.0002049804,
      -0.0028587277,
      -0.0248840731,
      0.0037606442,
      0.0140412608,
      0.0778158903,
      -0.1323143989,
      0.0068764347,
      -7.220123606e-33,
      0.0073346565,
      0.0027260706,
      0.0121475169,
      -0.0024402803,
      0.0279325731,
      0.0392706878,
      0.0037438767,
      -0.0464353003,
      -0.0144925108,
      0.0536020026,
      0.0065906984,
      0.0366479717,
      -0.0231356863,
      0.0327537544,
      0.0781109184,
      0.009627535,
      0.0079641389,
      0.0028742938,
      -0.0018806926,
      0.0046915985,
      -0.0124022532,
      -0.0008041157,
      -0.0230387468,
      0.0429728925,
      -0.0282600336,
      -0.0669464022,
      0.0385390185,
      -0.0708570927,
      0.0201092828,
      0.0014602817,
      0.0014639902,
      0.0499123111,
      -0.025945602,
      0.0008223383,
      -0.0375727825,
      -0.0287405998,
      0.0333751068,
      -0.0746282414,
      -0.0359839648,
      0.0256808065,
      -0.0501390845,
      0.0108372504,
      -0.0424378887,
      -0.0026685183,
      -0.0049163555,
      0.1664792448,
      -0.0011541905,
      -0.0049606361,
      -0.0648221225,
      0.0697621182,
      -0.0028181968,
      -0.0213252287,
      -0.1161369681,
      0.0433387272,
      -0.0033509284,
      -0.0201066341,
      0.0165539254,
      -0.0439712144,
      0.020619344,
      -0.009090024,
      0.0097136442,
      0.0393914394,
      -0.0124876816,
      0.0093502318,
      -0.0864778459,
      -0.0485177338,
      0.0244777258,
      -0.0084949704,
      0.0230635945,
      -0.0126382122,
      -0.0510099903,
      0.0367599279,
      0.0377174392,
      0.0309159942,
      -0.0287985876,
      -0.0192688219,
      -0.0198317561,
      0.0358352177,
      0.0806304589,
      0.0064973584,
      0.0354553275,
      -0.0419588797,
      0.0066938312,
      -0.0240788832,
      0.0950236991,
      0.0546349585,
      0.0042210338,
      -0.0518072471,
      0.0102152117,
      -0.0410986282,
      -0.0357455984,
      0.0613181293,
      -0.0030944825,
      0.087961711,
      0.0060008876,
      4.492563819e-33,
      -0.0771673694,
      0.0189931206,
      -0.0357380919,
      0.0887978449,
      -0.0175550431,
      -0.0027627065,
      0.0372740105,
      0.0901368111,
      -0.0925044641,
      0.0680299699,
      0.0223902166,
      -0.0450896993,
      0.0308789462,
      0.0444951653,
      -0.0057996414,
      0.0352335796,
      0.0696884245,
      -0.0040634992,
      -0.0281550679,
      -0.0357293636,
      -0.0305070765,
      -0.0323785134,
      -0.002499911,
      0.0349294767,
      -0.0414806902,
      0.0302052815,
      0.0485890061,
      0.0632987916,
      -0.0216931459,
      0.0368004516,
      0.0389657356,
      -0.0235814638,
      -0.0506325923,
      -0.0582029559,
      0.0482625179,
      0.0840439871,
      0.0367811136,
      -0.0007769273,
      0.0248482544,
      -0.0505174063,
      0.0396689512,
      -0.0100827934,
      0.002244503,
      0.1169772744,
      -0.0219612382,
      -0.005805986,
      -0.0480929576,
      0.0037889348,
      0.0351725891,
      0.0772972703,
      -0.0931971967,
      -0.0119929146,
      -0.0219681486,
      0.0412943028,
      -0.0229583159,
      0.0041604666,
      -0.0432187282,
      0.0702132583,
      -0.0190594103,
      0.0004752596,
      0.0054806145,
      0.0267614219,
      -0.0336127765,
      0.0134685384,
      -0.022746671,
      0.0387389511,
      -0.0245231763,
      -0.0363281555,
      -0.0017924154,
      -0.0525697991,
      0.0066894065,
      -0.0258465186,
      -0.1348353475,
      0.0011394566,
      -0.0471693724,
      -0.0534749888,
      -0.0184271187,
      -0.0073041688,
      -0.0096570943,
      -0.0377261862,
      -0.0339999013,
      0.0184173081,
      -0.0080031008,
      -0.0055122105,
      -0.0335320532,
      -0.0201806221,
      0.0216657389,
      0.0107582891,
      -0.0574746616,
      0.0196967553,
      -0.0072409483,
      0.02303713,
      0.1202340871,
      0.0032419658,
      0.0101499986,
      -1.34e-08,
      -0.0467246249,
      0.0406205915,
      -0.0556164607,
      -0.0018853496,
      0.0563239828,
      0.0496388599,
      -0.041541636,
      0.0325038582,
      0.0257491358,
      -0.0187808797,
      0.069208093,
      0.025987884,
      -0.0278233476,
      0.0575751476,
      0.0912808627,
      -0.0153256608,
      -0.1047209054,
      -0.0275859851,
      -0.0162227675,
      -0.0353992619,
      -0.0104612857,
      -0.0139993085,
      -0.0002940363,
      -0.083629787,
      0.0079322485,
      0.0069600274,
      -0.0442298129,
      0.0747582987,
      0.0744095519,
      -0.0405807979,
      -0.0018266753,
      0.0198501293,
      0.0143822012,
      0.0205852892,
      0.0221337546,
      -0.0643703938,
      -0.0636985302,
      0.0161391106,
      0.0099073295,
      -0.0055596433,
      -0.0546731278,
      -0.0233115572,
      0.0704692155,
      0.0064680236,
      -0.0477000363,
      -0.0036470974,
      0.0078375116,
      -0.0049746274,
      -0.0124185625,
      -0.077812098,
      -0.0009409394,
      -0.0080025755,
      0.0060341936,
      0.0843493417,
      0.1073036566,
      0.0114277732,
      0.0133666517,
      -0.0127473325,
      0.0614542775,
      0.0356412679,
      0.1587459147,
      0.126409471,
      0.0465490147,
      -0.0157173164
    ],
    "question_dec": "How many total courses are offered across all departments, and what is the combined count of catalog items associated with these courses? What is the average number of students per course when considering all departments together?"
  }
]
